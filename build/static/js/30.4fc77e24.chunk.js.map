{"version":3,"sources":["utils/question_bank.ts","components/Table/Table.tsx","actions/session.ts","actions/document.ts","components/Navigation/SideNavigation.tsx","containers/Claimings/Candidate/FormPlacementList.tsx","containers/Claimings/Candidate/ClaimForm.tsx","containers/Positions/ViewRequirements.tsx","containers/Claimings/Candidate/FormExamList.tsx","containers/Claimings/ClaimDocView.tsx","containers/Claimings/Candidate/ApplicationFormView.tsx","containers/Claimings/Candidate/ExaminationFormView.tsx","components/AnswersDetails/CandidateAnswersDetails.tsx","containers/Claimings/Candidate/ChooseReason.tsx","containers/Claimings/Candidate/DocFormView.tsx","containers/Claimings/Candidate/FormApplicationList.tsx","containers/Claimings/Candidate/FormDocumentList.tsx","containers/SessionSettings/ApplicationSession/SessionDetails.tsx","containers/CandidateExams/CandidateExams.tsx","containers/Claimings/Admin/AdminFilterByType.tsx","containers/Claimings/ClaimHeaderTitle.tsx","containers/Claimings/Candidate/index.tsx","containers/Claimings/ClaimApplView.tsx","containers/Claimings/ClaimExamView.tsx","containers/Claimings/ClaimPlacementView.tsx","containers/Claimings/Candidate/FilterByType.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","Table","props","table","tr","tableId","result","charactersLength","charAt","Math","floor","random","FC_makeID","useState","totalItems","setTotalItems","totalPages","setTotalPages","currentPage","setCurrentPage","pages","setPages","pageSize","setPageSize","startIndex","setStartIndex","endIndex","setEndIndex","useEffect","pagination","tablePagination","document","getElementById","getElementsByTagName","ceil","min","_pages","Array","from","keys","map","style","display","className","tableSize","search","searchBG","placeholder","onChange","e","data","filterType","td","rows","cols","toLowerCase","columns","textContent","innerText","indexOf","filterTable","target","value","disabled","loading","Number","tableClass","rounded","hideColumns","thColor","column","index","padding","alignText","isSortAllowed","onClick","switching","x","y","shouldSwitch","colIndex","dir","switchcount","innerHTML","parentNode","insertBefore","sortThisColumn","columnTitle","aria-label","page","pageIndex","GetPlansTypes","callback","dispatch","a","setAxiosToken","axios","get","API","CLAIMING","console","log","GET_PLANS_TYPES","plan_types","ActionTypes","payload","error","errorToText","setSelectedPlanType","thisType","SELECT_PLAN_TYPE","getActiveSessionPlan","GET_ACTIVE_SESSION_PLANS","session_plan","is_active","GetAllSessionPlans","GET_ALL_SESSION_PLANS","session_data","createSessionPlan","CREATE_SESSION_PLAN","updateSessionPlan","UPDATE_SESSION_PLAN","sessionActivation","SESSION_ACTIVATION","deleteSessionPlan","DELETE_SESSION_PLAN","createAcademicSession","CREATE_ACADEMIC_SESSION","GetAllAcademicSession","PLACEMENT","GET_ALL_ACADEMIC_SESSION","updateAcademicSession","UPDATE_ACADEMIC_SESSION","academicSessionActivation","ACADEMIC_SESSION_ACTIVATION","deleteAcademicSession","DELETE_ACADEMIC_SESSION","getActiveAcademicSession","GET_ACTIVE_ACADEMIC_SESSION","getDocumentCategory","AUTH","docCategory","GET_DOCUMENT_CATEGORY","createDocumentCategory","CREATE_DOCUMENT_CATEGORY","updateDocumentCategory","UPDATE_DOCUMENT_CATEGORY","deleteDocumentCategory","DELETE_DOCUMENT_CATEGORY","getDocumentSubCategory","docSubCategory","GET_DOCUMENT_SUB_CATEGORY","doc_SUB_category_error","createDocumentSubCategory","CREATE_DOCUMENT_SUB_CATEGORY","updateDocumentSubCategory","UPDATE_DOCUMENT_SUB_CATEGORY","deleteDocumentSubCategory","DELETE_DOCUMENT_SUB_CATEGORY","getDocumentFields","docFields","GET_DOCUMENT_FIELDS","createDocumentFields","CREATE_DOCUMENT_FIELDS","updateDocumentFields","reducer","UPDATE_DOCUMENT_FIELDS","deleteDocumentFields","DELETE_DOCUMENT_FIELDS","distinctCandidates","candidatesData","user_ids","candidate","forEach","includes","push","getCandidatesInInstitute","educatin_type_id","session_id","APPLICATION","GET_CANDIDATE_IN_INSTITUTE","verifyDocument","VERIFY_DOCUMENT","_SideNavigation","componentDidMount","PageHasSubNav","componentWillUnmount","state","this","auth","isAuthenticated","navActive","system","navigation","children","React","Component","SideNavigation","connect","NavToogle","MainItem","title","icon","MdBrightness1","active","count","IconDefined","searchInput","setSearchInput","myPlacement","isClaimAllowed","myClaims","activeSession","placed","_id","setChooseClaimFile","setViewThisFile","setClaimFileId","school","school_name","ClaimGetDocTitle","documentCategories","doc","DocCategory","DocSubCategory","DocField","DocTitle","sub_category_id","documentSubCategory","c","user_detail_subcategory_id","category_id","documentCategory","user_detail_category_id","category_subcategory_data","category_subcategory_Data_id","documentFields","category","sub_category","field","main","allClaim","period_id","claimOnId","item","claiming_on_id","ClaimForm","setLoading","setState","setLoadingForm","loadingForm","setFormError","formError","setAlertError","alertError","claimFileId","viewThisFile","chooseClaimFile","setChooseClaimReason","chooseClaimReason","setClaimReason","claimReason","setClaimComment","claimComment","isClaimTypeOpen","thisSession","PlansTypeKeys","plans","type_key","isPlanActive","DOCUMENT_VALIDATION","PLACEMENT_TRANSFER","displayClaimType","claimType","EXAMINATION","MARKS_PUBLICATION","loadExamAnswers","activeSessionPlan","getMyAnswers","PushPopupAlert","theme","PopupAlertTheme","danger","application_session","setFormState","thisClaimType","thisClaimTypeId","formType","documentReducer","claiming","claimReasons","getClaimReasons","getDocumentById","documents","doc_id","getApplicationById","applications","application_id","getExamById","exams","answer_sheet_id","getValidation","thisId","old_reason","old_status","old_evaluated_by","candidateDocuments","validated_by","comment","validation_status","candidateApplications","override_by","application_status","cleanToClose","response","loadUserById","isEmptyOrSpaces","getClaimTitle","position","position_title","myAnswer","getCourseIdBySheetId","getCourseById","course_name","getClaimInstitute","education_institute_id","handleSubmit","preventDefault","toLocaleLowerCase","old_evaluator_email","old_evaluator_name","evaluator_email","evaluator_name","institute_id","email","user_info","fname","lname","post","user","default_claim_resaons","reason","createClaim","success","selectClaimType","thisClaim","getMyRejectedApplications","loadCourses","getMyRejectedDocuments","getMyPlacement","generateChooseFileTitle","formState","Modal","backDrop","Themes","default","close","displayClose","backDropClose","widthSizeClass","ModalSize","extraLarge","medium","body","footer","onSubmit","Object","values","capitalizeFirstLetter","replace","FormDocumentList","FormApplicationList","FormExamList","candidateAnswers","ChooseReason","allClaimReasons","resize","DocFormView","thisDoc","ApplicationFormView","thisApplication","ExaminationFormView","thisAnswerSheet","getMyClaims","GetClaimingTypes","ViewRequirements","requirements","colSpan","subcategory_title","field_id","field_title","subcategory_required","required","getFailedExam","allData","allCourses","sheet_id","isReclaimAllowed","claim_level","_thisClaim","claims","level","decision_taken_status","ClaimDecisionStatus","REJECTED","isClaimEvaluated","claim_status","ClaimStatus","EVALUATED","createReClaim","reClaimingMsg","warning","setLoadingRequest","put","setReClaimingMsg","setReClaiming","getReasonById","reason_id","setViewImage","viewImage","previous","evaluater","name","src","AUTH_FILES","files","alt","claim","showDate","createdAt","evaluation_comment","reClaiming","last_claim_status","PENDING","DELETED","loadingRequest","FC_ApplicationPositionDistinctCategory","thisPosition","PositionsTemp","DistinctCategoriesTemp","DistinctCategoriesIds","DistinctSubCategoriesTemp","DistinctSubCategoriesIds","req","thisRequirements","thisCategory","thisSubCategory","thisField","position_requirement","category_subcategory_data_id","category_title","subcategory_id","DATE","ApplicationStates","Rejected","description","school_level_id","school_level_name","education_category_title","course_code","NoResultThemes","Dark","claimShowAnswer","answer","discription","termes","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","period","showAnswers","exam_id","CandidateAnswersDetails","tomorrow","setDate","date","compareWithToday","getRejectedApplicants","applicationData","objList","text","product","flag","prop","DocumentTitleData","documentData","documentTemp","company","end_year","names","phone_number","school_id","start_year","year","doc_title","getRejectedDocuments","rejected","isActivationAllowed","thisPlans","end_date","getPlanTypeByKey","allPlanTypes","viewThisSession","thisPlan","planEndDate","planStartDate","start_date","type_status","SessionPlanTypeStatus","CLOSED","SessionDetails","handlePlanActivation","session","newState","window","confirm","newData","session_plan_name","updatedAt","prototype","hasOwnProperty","call","OPEN","type_title","allowed_claim_level","history","setViewThisSession","info","tooday","myDate","todayConverted","ChangeLocationComponent","setDisplay","changeLocation","_CandidateExams","setloadingExamsDone","loadingExamsDone","loadCandidateExams","QBank","candidateExams","alert","loadUserProfileDetails","FC_GetProfileDetails","InitializationFn","application","user_exams_done","loadUserApplications","candidate_applications","AddUserApplication","findLocation","updateLocation","selectedCourse","centersModal","maxExamModal","successMessage","updateLocationFunction","addLocation","location","proctoring_type","loadApplicationPeriods","sex","removeDuplicatesExams","temp","removeDuplicatesNotPreparedExams","setTimeOut","temps","activeExams","selectApplication","setMaxExamModal","closeModal","selectedExam","FC_Access","UserAccessList","MY_APPLICATION","view","selected_exam_id","to","preparedExam","user_status","center_name","room_number","school_levels","UserExamStatus","Editing","Paused","Shortlisted","setSelectedPosition","setSelectedCourse","setSelectedCandidateExam","Done","Removed","user_marks","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","positionCourses","CandidateExams","periods","LoadCandidateApplications","filterClaimsByClaimType","claimList","setSelectedClaimType","getAllClaims","loadingClaimTypes","setLoadingClaimTypes","claimTypes","countClaims","allClaims","Fragment","loadingClaims","selectedClaimType","ClaimHeaderTitle","isLoading","loadingSession","periodChanged","headerTitle","thisPeriod","sessions","application_sessions","selectPeriod","setThisPeriod","setLoadingSession","onPeriodChange","ClaimTypesEnum","setViewPosition","viewPosition","NoResult","questionTypes","loadQuestionTypes","thisExam","thisExamSheet","userDetails","district_name","loadingRejectedApplications","setLoadingRejectedApplications","loadingRejectedDocuments","setLoadingRejectedDocuments","COMPLETED","document_id","whichClaimType","exam","marks_publication","placement","whichClaimStatus","classes","getClaimById","claim_id","displayDocClaimTitle","displayClaimTitle","allCourse","thisAnswer","Index","setViewClaim","viewClaim","setPeriodChanged","setClaimForm","claimForm","setClaimId","claimId","loadClaims","setSession","isDeleteAllowed","thisCLaim","Light","ClaimApplView","ClaimExamView","CandidateClaim","sessionPlan","allSessionPlans"],"mappings":"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","file":"static/js/30.4fc77e24.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import React, { useEffect, useState } from \"react\";\nimport { BiSort } from \"react-icons/bi\";\nimport { MdNavigateBefore, MdNavigateNext, MdSearch } from \"react-icons/md\";\n\nconst FC_makeID = (length: number = 5): string => {\n  let result: string = \"\";\n  let characters: string =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let charactersLength = characters.length;\n  for (let i: number = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const sortThisColumn = (\n  tableId: string,\n  colIndex: number = 0,\n  dir: \"asc\" | \"desc\" = \"asc\"\n) => {\n  var table,\n    rows,\n    switching,\n    i,\n    x,\n    y,\n    shouldSwitch,\n    switchcount = 0;\n  table = document.getElementById(tableId) as HTMLTableElement;\n  switching = true;\n  /* Make a loop that will continue until\n  no switching has been done: */\n  if (table) {\n    while (switching) {\n      //start by saying: no switching is done:\n      switching = false;\n      rows = table.rows;\n      /*Loop through all table rows (except the\n    first, which contains table headers):*/\n      for (i = 1; i < rows.length - 1; i++) {\n        //start by saying there should be no switching:\n        shouldSwitch = false;\n        /*Get the two elements you want to compare,\n      one from current row and one from the next:*/\n        x = rows[i].getElementsByTagName(\"TD\")[colIndex];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[colIndex];\n        /*check if the two rows should switch place,\n      based on the direction, asc or desc:*/\n        if (dir === \"asc\" && x && y) {\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n            //if so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        } else if (dir === \"desc\" && x && y) {\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n            //if so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        }\n      }\n      if (shouldSwitch && rows[i].parentNode) {\n        /*If a switch has been marked, make the switch\n      and mark that a switch has been done:*/\n        rows[i].parentNode!.insertBefore(rows[i + 1], rows[i]);\n        switching = true;\n        //Each time a switch is done, increase this count by 1:\n        switchcount++;\n      } else {\n        /*If no switching has been done AND the direction is \"asc\",\n      set the direction to \"desc\" and run the while loop again.*/\n        if (switchcount === 0 && dir === \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n      // if (i === 0) continue;\n      // rows.cells[i].style.backgroundColor = \"blue\";\n    }\n  }\n};\n\nexport interface TableColumnsInterface {\n  columnTitle: JSX.Element | string;\n  alignText: string;\n  padding?: string;\n  isSortAllowed?: boolean;\n}\n\ninterface TableProps {\n  columns: TableColumnsInterface[];\n  rows: Function;\n  hideColumns?: boolean;\n  pagination?: boolean;\n  search?: boolean;\n  tableSize?: string;\n  tableClass?: string;\n  tableId?: string;\n  rounded?: boolean;\n  searchBG?: string;\n  thColor?: string;\n  loading?: boolean;\n}\n\nconst Table: React.FC<TableProps> = (props) => {\n  const startPage = 1;\n  const tableId =\n    !props.tableId || props.tableId === \"myTable\" ? FC_makeID() : props.tableId;\n  let table: HTMLElement, tr: HTMLCollectionOf<HTMLTableRowElement>;\n  const [totalItems, setTotalItems] = useState<number>(0);\n  const [totalPages, setTotalPages] = useState<number>(1);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [pages, setPages] = useState<number[]>();\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [startIndex, setStartIndex] = useState<number>(0);\n  const [endIndex, setEndIndex] = useState<number>(0);\n\n  useEffect(() => {\n    props.pagination && tablePagination();\n  });\n\n  const filterTable = (\n    data: string,\n    filterType?: \"default\" | \"field\"\n  ): void => {\n    var filter, tr, td, rows: number, cols: number, txtValue;\n    if (filterType === \"field\" && data === \"all\") data = \"\";\n    filter = data.toLowerCase();\n    table = document.getElementById(tableId!)!;\n    tr = table.getElementsByTagName(\"tr\");\n    for (rows = 0; rows < tr.length; rows++) {\n      for (cols = 0; cols < props.columns.length; cols++) {\n        td = tr[rows].getElementsByTagName(\"td\")[cols];\n        if (td) {\n          txtValue = td.textContent || td.innerText;\n          if (txtValue.toLowerCase().indexOf(filter) > -1) {\n            tr[rows].style.display = \"\";\n            break;\n          } else {\n            tr[rows].style.display = \"none\";\n          }\n        }\n      }\n    }\n  };\n\n  const tablePagination = (): void => {\n    table = document.getElementById(tableId)!;\n    tr = table.getElementsByTagName(\"tr\");\n    setTotalItems(tr.length);\n    setTotalPages(Math.ceil(totalItems / pageSize));\n\n    // calculate start and end item indexes on the current page\n    setStartIndex((currentPage - 1) * pageSize);\n    setEndIndex(Math.min(startIndex + pageSize - 1, totalItems - 1));\n\n    /**\n     * TODO!\n     * There is a problem with this condition\n     */\n    let _pages = Array.from(Array(totalPages + 1 - startPage).keys()).map(\n      (i) => startPage + i\n    );\n    if (!pages || _pages.length !== pages.length) {\n      setPages(_pages);\n    }\n\n    for (let i: number = 0; i < tr.length; i++) {\n      if (i >= startIndex && i <= endIndex) {\n        tr[i].style.display = \"\";\n      } else {\n        tr[i].style.display = \"none\";\n      }\n    }\n  };\n\n  return (\n    <div className={`${props.tableSize} overflow-x-auto`}>\n      {/* search box  */}\n      {props.search && (\n        <div className={`${props.searchBG} w-full mb-2`}>\n          {props.search && (\n            <div className=\"bg-white rounded flex items-center w-full p-2 border-2 border-gray-500\">\n              <MdSearch className=\"h-5 w-5 fill-current text-gray-400\" />\n              <input\n                type=\"search\"\n                placeholder=\"search\"\n                onChange={(e) => filterTable(e.target.value)}\n                className=\"w-full h-6 pl-4 text-sm outline-none focus:outline-none bg-white\"\n                disabled={props.loading}\n              />\n\n              {props.pagination && (\n                <div className=\"select\">\n                  <select\n                    className=\"text-base outline-none focus:outline-none bg-white\"\n                    onChange={(e) => setPageSize(Number(e.target.value))}\n                    disabled={props.loading}\n                  >\n                    <option value=\"10\">10</option>\n                    <option value=\"25\">25</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                  </select>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      <div className=\"overflow-x-auto w-full\">\n        <table\n          className={\n            props.tableClass\n              ? props.tableClass\n              : `w-full shadow ${\n                  props.rounded && \"sm:rounded-lg\"\n                } table-auto order-table`\n          }\n          id={tableId}\n        >\n          {!props.hideColumns && (\n            <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-base\">\n              <tr\n                className={`text-left tracking-wide bg-${props.thColor}-100 border-b-2 border-${props.thColor}-500 text-${props.thColor}-600`}\n              >\n                {props.columns.map((column, index) => (\n                  <th\n                    key={index}\n                    className={`${column.padding} text-${\n                      column.alignText\n                    } px-3 py-2 ${column.isSortAllowed && \"cursor-pointer\"}`}\n                    onClick={() =>\n                      column.isSortAllowed && sortThisColumn(tableId, index)\n                    }\n                  >\n                    <div className=\"flex items-center gap-1\">\n                      {column.columnTitle}\n                      {column.isSortAllowed && <BiSort />}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n          )}\n          <tbody id=\"table-data\" className=\"bg-white text-black text-base\">\n            {props.rows()}\n          </tbody>\n        </table>\n        {props.pagination && (\n          <div className=\"sm:flex-1 sm:flex sm:items-center sm:justify-between mt-4 work-sans\">\n            <div>\n              <span className=\"text-xs xs:text-sm text-gray-900\">\n                Showing 1 to {pageSize} of {totalItems - 1} Entries\n              </span>\n            </div>\n            <div>\n              <nav className=\"inline-flex shadow-sm\">\n                <div>\n                  <button\n                    type=\"button\"\n                    className={`inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 text-sm font-medium text-gray-500 ${\n                      currentPage !== 1 && \"bg-white\"\n                    }`}\n                    aria-label=\"Previous\"\n                    disabled={currentPage === 1 || props.loading}\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                  >\n                    <MdNavigateBefore className=\"h-5 w-5\" />\n                  </button>\n                </div>\n                <div>\n                  {pages &&\n                    pages.map((page, pageIndex) => (\n                      <button\n                        key={pageIndex}\n                        className={`-ml-px inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 ${\n                          page !== currentPage\n                            ? \"bg-white\"\n                            : \"bg-gray-100 cursor-default\"\n                        }`}\n                        disabled={page === currentPage || props.loading}\n                        onClick={() => setCurrentPage(page)}\n                      >\n                        {page}\n                      </button>\n                    ))}\n                </div>\n                <div>\n                  <button\n                    type=\"button\"\n                    className={`inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 text-sm leading-5 font-medium text-gray-500 ${\n                      currentPage !== totalPages && \"bg-white\"\n                    }`}\n                    aria-label=\"Next\"\n                    disabled={currentPage === totalPages || props.loading}\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                  >\n                    <MdNavigateNext className=\"h-5 w-5\" />\n                  </button>\n                </div>\n              </nav>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Table;\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport {\n  AcademicSessionInterface,\n  PlansTypeInterface,\n  SessionPlanInterface,\n} from \"../interfaces\";\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// GET ACTIVE PLAN TYPES\nexport interface GetPlansTypesAction {\n  type: ActionTypes.GET_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// GET INACTIVE PLAN TYPES\nexport interface GetDeletedPlansTypesAction {\n  type: ActionTypes.GET_DELETED_PLANS_TYPES;\n  payload: PlansTypeInterface[];\n}\n\n// CREATE PLAN TYPE\nexport interface CreatePlansTypeAction {\n  type: ActionTypes.CREATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// UPDATE PLAN TYPE\nexport interface UpdatePlansTypeAction {\n  type: ActionTypes.UPDATE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// DELETE PLAN TYPE\nexport interface DeletePlansTypeAction {\n  type: ActionTypes.DELETE_PLAN_TYPE;\n  payload: PlansTypeInterface;\n}\n\n// SET PLAN TYPE =====================================\nexport interface setSelectedPlanTypeActions {\n  type: ActionTypes.SELECT_PLAN_TYPE;\n  payload: PlansTypeInterface | \"all\";\n}\n\n// GET ALL SESSION PLAN\nexport interface GetAllSessionPlansAction {\n  type: ActionTypes.GET_ALL_SESSION_PLANS;\n  payload: SessionPlanInterface[];\n}\n\n// GET ACTIVE SESSION PLAN\nexport interface GetActiveSessionPlanAction {\n  type: ActionTypes.GET_ACTIVE_SESSION_PLANS;\n  payload: SessionPlanInterface | \"none\";\n}\n\n// CREATE SESSION PLAN\nexport interface CreateSessionPlansAction {\n  type: ActionTypes.CREATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// UPDATE SESSION PLAN\nexport interface UpdateSessionPlansAction {\n  type: ActionTypes.UPDATE_SESSION_PLAN;\n  payload: SessionPlanInterface;\n}\n\n// ACTIVATE SESSION PLAN\nexport interface ActivateSessionPlansAction {\n  type: ActionTypes.SESSION_ACTIVATION;\n  payload: SessionPlanInterface;\n}\n\n// DELETE SESSION PLAN\nexport interface DeleteSessionPlanAction {\n  type: ActionTypes.DELETE_SESSION_PLAN;\n  payload: string;\n}\n\n// GET ALL ACADEMIC SESSION\nexport interface GetAllAcademicSessionAction {\n  type: ActionTypes.GET_ALL_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface[];\n}\n\n// CREATE ACADEMIC SESSION\nexport interface CreateAcademicSessionAction {\n  type: ActionTypes.CREATE_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface;\n}\n\n// UPDATE ACADEMIC SESSION\nexport interface UpdateAcademicSessionAction {\n  type: ActionTypes.UPDATE_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface;\n}\n\n// ACTIVATE ACADEMIC SESSION\nexport interface ActivateAcademicSessionAction {\n  type: ActionTypes.ACADEMIC_SESSION_ACTIVATION;\n  payload: AcademicSessionInterface;\n}\n\n// DELETE ACADEMIC SESSION\nexport interface DeleteAcademicSessionAction {\n  type: ActionTypes.DELETE_ACADEMIC_SESSION;\n  payload: string;\n}\n\n// GET ACTIVE ACADEMIC SESSION\nexport interface GetActiveAcademicSessionAction {\n  type: ActionTypes.GET_ACTIVE_ACADEMIC_SESSION;\n  payload: AcademicSessionInterface | \"none\";\n}\n\nexport type SessionActionType =\n  | GetPlansTypesAction\n  | GetDeletedPlansTypesAction\n  | CreatePlansTypeAction\n  | UpdatePlansTypeAction\n  | DeletePlansTypeAction\n  | GetAllSessionPlansAction\n  | GetActiveSessionPlanAction\n  | CreateSessionPlansAction\n  | UpdateSessionPlansAction\n  | ActivateSessionPlansAction\n  | DeleteSessionPlanAction\n  | setSelectedPlanTypeActions\n  | GetAllAcademicSessionAction\n  | CreateAcademicSessionAction\n  | UpdateAcademicSessionAction\n  | ActivateAcademicSessionAction\n  | DeleteAcademicSessionAction\n  | GetActiveAcademicSessionAction;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type`\n      );\n      console.log({ GET_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetPlansTypesAction>({\n        type: ActionTypes.GET_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const GetDeletedPlansTypes = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<PlansTypeInterface[]>(\n        `${API.CLAIMING}/session-type/deleted`\n      );\n      console.log({ GET_DELETED_PLANS_TYPES: res.data });\n      let plan_types: PlansTypeInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          plan_types = res.data;\n        }\n      }\n      dispatch<GetDeletedPlansTypesAction>({\n        type: ActionTypes.GET_DELETED_PLANS_TYPES,\n        payload: plan_types,\n      });\n      callback(false, \"\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE PLAN TYPE\nexport const createPlanType = (\n  data: PlansTypeInterface\n): CreatePlansTypeAction => {\n  return {\n    type: ActionTypes.CREATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// UPDATE PLAN TYPE\nexport const updatePlanType = (\n  data: PlansTypeInterface\n): UpdatePlansTypeAction => {\n  return {\n    type: ActionTypes.UPDATE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// DELETE PLAN TYPE\nexport const deletePlanType = (\n  data: PlansTypeInterface\n): DeletePlansTypeAction => {\n  return {\n    type: ActionTypes.DELETE_PLAN_TYPE,\n    payload: data,\n  };\n};\n\n// SELECT PLAN TYPES ==========================\nexport const setSelectedPlanType = (\n  thisType: PlansTypeInterface | \"all\"\n): setSelectedPlanTypeActions => {\n  console.log({ thisType });\n  return {\n    type: ActionTypes.SELECT_PLAN_TYPE,\n    payload: thisType,\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const getActiveSessionPlan = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface>(\n        `${API.CLAIMING}/session/active/`\n      );\n      console.log({ GET_ACTIVE_SESSION_PLANS: res.data });\n      let session_plan: SessionPlanInterface | undefined = undefined;\n      // if (res.status === 200) {\n      //   // setApplications(res.data);\n      // }\n      if (res.data && res.data.is_active !== undefined) {\n        session_plan = res.data;\n      }\n      console.log({ session_plan: res.data });\n\n      dispatch<GetActiveSessionPlanAction>({\n        type: ActionTypes.GET_ACTIVE_SESSION_PLANS,\n        payload: session_plan ? session_plan : \"none\",\n      });\n      callback(false, \"\", session_plan ? session_plan : \"none\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// GET ALL PLAN TYPES ==========================\nexport const GetAllSessionPlans = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<SessionPlanInterface[]>(\n        `${API.CLAIMING}/session/`\n      );\n      console.log({ GET_ALL_SESSION_PLANS: res.data });\n      let session_data: SessionPlanInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          session_data = res.data;\n        }\n      }\n      dispatch<GetAllSessionPlansAction>({\n        type: ActionTypes.GET_ALL_SESSION_PLANS,\n        payload: session_data,\n      });\n      callback(false, \"\", session_data);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// CREATE SESSION PLAN\nexport const createSessionPlan = (\n  data: SessionPlanInterface\n): CreateSessionPlansAction => {\n  return {\n    type: ActionTypes.CREATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// UPDATE SESSION PLAN\nexport const updateSessionPlan = (\n  data: SessionPlanInterface\n): UpdateSessionPlansAction => {\n  return {\n    type: ActionTypes.UPDATE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// ACTIVATE SESSION PLAN\nexport const sessionActivation = (\n  data: SessionPlanInterface\n): ActivateSessionPlansAction => {\n  return {\n    type: ActionTypes.SESSION_ACTIVATION,\n    payload: data,\n  };\n};\n\n// DELETE SESSION PLAN\nexport const deleteSessionPlan = (data: string): DeleteSessionPlanAction => {\n  return {\n    type: ActionTypes.DELETE_SESSION_PLAN,\n    payload: data,\n  };\n};\n\n// CREATE ACADEMIC SESSION\nexport const createAcademicSession = (\n  data: AcademicSessionInterface\n): CreateAcademicSessionAction => {\n  return {\n    type: ActionTypes.CREATE_ACADEMIC_SESSION,\n    payload: data,\n  };\n};\n\n// GET ALL ACADEMIC SESSION ==========================\nexport const GetAllAcademicSession = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<AcademicSessionInterface[]>(\n        `${API.PLACEMENT}/postrequestperiod/`\n      );\n      console.log({ GET_ALL_SESSION_PLANS: res.data });\n      let session_data: AcademicSessionInterface[] = [];\n      if (res.status === 200) {\n        // setApplications(res.data);\n        if (res.data !== null && res.data.length > 0) {\n          session_data = res.data;\n        }\n      }\n      console.log(\"====================================\");\n      console.log({ GetAllAcademicSession: res });\n      console.log(\"====================================\");\n      dispatch<GetAllAcademicSessionAction>({\n        type: ActionTypes.GET_ALL_ACADEMIC_SESSION,\n        payload: session_data,\n      });\n      callback(false, \"\", session_data);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n\n// UPDATE ACADEMIC SESSION\nexport const updateAcademicSession = (\n  data: AcademicSessionInterface\n): UpdateAcademicSessionAction => {\n  return {\n    type: ActionTypes.UPDATE_ACADEMIC_SESSION,\n    payload: data,\n  };\n};\n\n// ACTIVATE ACADEMIC SESSION\nexport const academicSessionActivation = (\n  data: AcademicSessionInterface\n): ActivateAcademicSessionAction => {\n  return {\n    type: ActionTypes.ACADEMIC_SESSION_ACTIVATION,\n    payload: data,\n  };\n};\n\n// DELETE ACADEMIC SESSION\nexport const deleteAcademicSession = (\n  data: string\n): DeleteAcademicSessionAction => {\n  return {\n    type: ActionTypes.DELETE_ACADEMIC_SESSION,\n    payload: data,\n  };\n};\n\n// GET ACTIVE PLAN TYPES ==========================\nexport const getActiveAcademicSession = (callback: Function) => {\n  callback(true, \"\");\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<AcademicSessionInterface>(\n        `${API.PLACEMENT}/postrequestperiod/one`\n      );\n      console.log({ GET_ACTIVE_ACADEMIC_SESSION: res.data });\n      let session_plan: AcademicSessionInterface | undefined = undefined;\n      // if (res.status === 200) {\n      //   // setApplications(res.data);\n      // }\n      if (res.data) {\n        session_plan = res.data;\n      }\n      console.log({ session_plan: res.data });\n\n      dispatch<GetActiveAcademicSessionAction>({\n        type: ActionTypes.GET_ACTIVE_ACADEMIC_SESSION,\n        payload: session_plan ? session_plan : \"none\",\n      });\n      callback(false, \"\", session_plan ? session_plan : \"none\");\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      callback(false, errorToText(error));\n    }\n  };\n};\n","import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { ActionTypes } from \"./types\";\nimport {\n  CandidatesInterface,\n  DocumentCategoryInterface,\n  DocumentFieldsInterface,\n  DocumentSubCategoryInterface,\n} from \"../shared/interfaces\";\nimport { API } from \"../utils/api\";\nimport { setAxiosToken } from \"../utils/AxiosToken\";\nimport { errorToText } from \"../utils/errors\";\nimport { VerifyDocumentInterface } from \"./users\";\n\n/**\n * * ****************************** INTERFACES *****************************\n */\n\n// CATEGORY\nexport interface GetDocumentCategoryAction {\n  type: ActionTypes.GET_DOCUMENT_CATEGORY;\n  payload: DocumentCategoryInterface[];\n}\n\nexport interface CreateDocumentCategoryAction {\n  type: ActionTypes.CREATE_DOCUMENT_CATEGORY;\n  payload: DocumentCategoryInterface;\n}\n\nexport interface UpdateDocumentCategoryAction {\n  type: ActionTypes.UPDATE_DOCUMENT_CATEGORY;\n  payload: DocumentCategoryInterface;\n}\n\nexport interface DeleteDocumentCategoryAction {\n  type: ActionTypes.DELETE_DOCUMENT_CATEGORY;\n  payload: string;\n}\n\n// SUB CATEGORY\nexport interface GetDocumentSubCategoryAction {\n  type: ActionTypes.GET_DOCUMENT_SUB_CATEGORY;\n  payload: DocumentSubCategoryInterface[];\n}\n\nexport interface CreateDocumentSubCategoryAction {\n  type: ActionTypes.CREATE_DOCUMENT_SUB_CATEGORY;\n  payload: DocumentSubCategoryInterface;\n}\n\nexport interface UpdateDocumentSubCategoryAction {\n  type: ActionTypes.UPDATE_DOCUMENT_SUB_CATEGORY;\n  payload: DocumentSubCategoryInterface;\n}\n\nexport interface DeleteDocumentSubCategoryAction {\n  type: ActionTypes.DELETE_DOCUMENT_SUB_CATEGORY;\n  payload: string;\n}\n\n// FIELDS\nexport interface GetDocumentFieldsAction {\n  type: ActionTypes.GET_DOCUMENT_FIELDS;\n  payload: DocumentFieldsInterface[];\n}\n\nexport interface CreateDocumentFieldsAction {\n  type: ActionTypes.CREATE_DOCUMENT_FIELDS;\n  payload: DocumentFieldsInterface;\n}\n\nexport interface UpdateDocumentFieldsAction {\n  type: ActionTypes.UPDATE_DOCUMENT_FIELDS;\n  payload: DocumentFieldsInterface;\n}\n\nexport interface DeleteDocumentFieldsAction {\n  type: ActionTypes.DELETE_DOCUMENT_FIELDS;\n  payload: string;\n}\n\n// DOCUMENT CHECKING\nexport interface GetCandidatesInInstituteAtion {\n  type: ActionTypes.GET_CANDIDATE_IN_INSTITUTE;\n  payload: CandidatesInterface[];\n}\n\nexport interface VerifyDocumentAction {\n  type: ActionTypes.VERIFY_DOCUMENT;\n  payload: VerifyDocumentInterface;\n}\n\nexport type DocumentCategoryActionType =\n  | GetDocumentCategoryAction\n  | CreateDocumentCategoryAction\n  | UpdateDocumentCategoryAction\n  | DeleteDocumentCategoryAction\n  | GetDocumentSubCategoryAction\n  | CreateDocumentSubCategoryAction\n  | UpdateDocumentSubCategoryAction\n  | DeleteDocumentSubCategoryAction\n  | GetDocumentFieldsAction\n  | CreateDocumentFieldsAction\n  | UpdateDocumentFieldsAction\n  | DeleteDocumentFieldsAction\n  | GetCandidatesInInstituteAtion\n  | VerifyDocumentAction;\n\n/**\n * * ****************************** ACTIONS *****************************\n */\n\n// CATEGORY\n\nexport const getDocumentCategory = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get(`${API.AUTH}/detailcategory`);\n      console.log({ docCategory: res });\n      dispatch<GetDocumentCategoryAction>({\n        type: ActionTypes.GET_DOCUMENT_CATEGORY,\n        payload: res.data,\n      });\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n    }\n  };\n};\n\nexport const createDocumentCategory = (data: DocumentCategoryInterface) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<CreateDocumentCategoryAction>({\n      type: ActionTypes.CREATE_DOCUMENT_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const updateDocumentCategory = (data: DocumentCategoryInterface) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdateDocumentCategoryAction>({\n      type: ActionTypes.UPDATE_DOCUMENT_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const deleteDocumentCategory = (data: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DeleteDocumentCategoryAction>({\n      type: ActionTypes.DELETE_DOCUMENT_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\n// SUB CATEGORY\nexport const getDocumentSubCategory = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<DocumentSubCategoryInterface[]>(\n        `${API.AUTH}/detailsubcategory`\n      );\n      console.log({ docSubCategory: res });\n      dispatch<GetDocumentSubCategoryAction>({\n        type: ActionTypes.GET_DOCUMENT_SUB_CATEGORY,\n        payload: res.data,\n        // payload: response.data,\n      });\n    } catch (error) {\n      console.log({ doc_SUB_category_error: error });\n    }\n  };\n};\n\nexport const createDocumentSubCategory = (\n  data: DocumentSubCategoryInterface\n) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<CreateDocumentSubCategoryAction>({\n      type: ActionTypes.CREATE_DOCUMENT_SUB_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const updateDocumentSubCategory = (\n  data: DocumentSubCategoryInterface\n) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdateDocumentSubCategoryAction>({\n      type: ActionTypes.UPDATE_DOCUMENT_SUB_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\nexport const deleteDocumentSubCategory = (data: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DeleteDocumentSubCategoryAction>({\n      type: ActionTypes.DELETE_DOCUMENT_SUB_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\n// FIELDS\nexport const getDocumentFields = () => {\n  return async (dispatch: Dispatch) => {\n    try {\n      setAxiosToken();\n      const res = await axios.get<DocumentFieldsInterface[]>(\n        `${API.AUTH}/categorysubcatedata`\n      );\n      console.log({ docFields: res });\n      dispatch<GetDocumentFieldsAction>({\n        type: ActionTypes.GET_DOCUMENT_FIELDS,\n        payload: res.data,\n        // payload: response.data,\n      });\n    } catch (error) {\n      console.log({ doc_SUB_category_error: error });\n    }\n  };\n};\n\nexport const createDocumentFields = (data: DocumentFieldsInterface) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<CreateDocumentFieldsAction>({\n      type: ActionTypes.CREATE_DOCUMENT_FIELDS,\n      payload: data,\n    });\n  };\n};\n\nexport const updateDocumentFields = (data: DocumentFieldsInterface) => {\n  console.log({ reducer: data });\n  return async (dispatch: Dispatch) => {\n    dispatch<UpdateDocumentFieldsAction>({\n      type: ActionTypes.UPDATE_DOCUMENT_FIELDS,\n      payload: data,\n    });\n  };\n};\n\nexport const deleteDocumentFields = (data: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch<DeleteDocumentFieldsAction>({\n      type: ActionTypes.DELETE_DOCUMENT_FIELDS,\n      payload: data,\n    });\n  };\n};\n\n// REMOVE DUPLICATION IN CANDIDATES IN EDUCATION CATEGORY PER SESSION\nconst distinctCandidates = (\n  candidatesData: CandidatesInterface[]\n): CandidatesInterface[] => {\n  let result: CandidatesInterface[] = [];\n  let user_ids: string[] = [];\n  const newArray: CandidatesInterface[] = candidatesData.filter((candidate) => {\n    return candidate !== null && candidate !== undefined;\n  });\n  newArray.forEach((candidate) => {\n    if (!user_ids.includes(candidate.user_id)) {\n      result.push(candidate);\n      user_ids.push(candidate.user_id);\n    }\n  });\n  return result;\n};\n// CANDIDATE IN EDUCATION CATEGORY PER SESSION\nexport const getCandidatesInInstitute = (\n  educatin_type_id: string,\n  session_id: string,\n  callback: Function\n) => {\n  return async (dispatch: Dispatch) => {\n    callback(true, \"\", null);\n    try {\n      setAxiosToken();\n      const res = await axios.get<CandidatesInterface[]>(\n        `${API.APPLICATION}/educationtypeuserdocs/${educatin_type_id}/${session_id}`\n      );\n\n      console.log(\"====================================\");\n      console.log({\n        getCandidatesInInstitute: res,\n        distinctCandidates: distinctCandidates(res.data),\n      });\n      console.log(\"====================================\");\n      dispatch<GetCandidatesInInstituteAtion>({\n        type: ActionTypes.GET_CANDIDATE_IN_INSTITUTE,\n        payload: distinctCandidates(res.data),\n        // payload: response.data,\n      });\n      callback(false, \"\", distinctCandidates(res.data));\n    } catch (error) {\n      console.log({ getCandidatesInInstitute: error });\n      callback(false, errorToText(error), null);\n    }\n  };\n};\n\nexport const verifyDocument = (data: VerifyDocumentInterface) => {\n  console.log(\"====================================\");\n  console.log({ verifyDocument: data });\n  console.log(\"====================================\");\n  return async (dispatch: Dispatch) => {\n    dispatch<VerifyDocumentAction>({\n      type: ActionTypes.VERIFY_DOCUMENT,\n      payload: data,\n    });\n  };\n};\n","import React, { FC, ReactElement, ReactNode } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, System } from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { NavToogle, PageHasSubNav } from \"../../actions\";\nimport { MdBrightness1, MdSearch } from \"react-icons/md\";\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  system: System;\n  PageHasSubNav: Function;\n  NavToogle: Function;\n  children: ReactNode;\n}\n//\ninterface AppState {\n  loading: boolean;\n}\n\nclass _SideNavigation extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n    };\n  }\n\n  componentDidMount = () => this.props.PageHasSubNav(true);\n  componentWillUnmount = () => this.props.PageHasSubNav(false);\n\n  render() {\n    const isAuthenticated = this.props.auth.isAuthenticated;\n\n    if (isAuthenticated === false) {\n      return null;\n    }\n\n    const navActive = this.props.system.navigation;\n    return (\n      <div\n        className={`fixed w-48 p-1 pr-2 pl-6 text-gray-700 bg-white ${\n          navActive === true ? \"lg:left-16  left-16\" : \" -left-72 lg:left-16\"\n        }  top-0 bottom-0 pt-20 z-30 shadow-lg  transition-all duration-500 ease-in-out overflow-y-auto`}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  system,\n}: StoreState): { auth: Auth; system: System } => {\n  return { auth: auth, system: system };\n};\n\nexport const SideNavigation = connect(mapStateToProps, {\n  NavToogle,\n  PageHasSubNav,\n})(_SideNavigation);\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SearchComponentInterface = {\n  data: any[];\n};\n\nexport const Search: FC<SearchComponentInterface> = ({\n  data,\n}): ReactElement => {\n  return (\n    <div className=\"m-1 rounded-md shadow-md border border-blue-400 bg-white p-1 flex \">\n      <label htmlFor=\"search-text\" className=\"inline-block text-2xl\">\n        <MdSearch className=\"inline-block text-blue-400\" />\n      </label>\n      <input\n        type=\"search\"\n        className=\"outline-none bg-transparent flex-1 pl-1\"\n        placeholder=\"Search\"\n        id=\"search-text\"\n      />\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype MainItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const MainItem: FC<MainItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n  return (\n    <section\n      className={`${\n        active === true\n          ? \"bg-blue-500 text-white font-bold\"\n          : \"bg-blue-100 text-blue-800\"\n      } mb-1 hover:font-bold py-1 hover:bg-blue-400 hover:text-white --font-bold  px-2 rounded-md flex cursor-pointer items-center`}\n    >\n      <section className=\"flex-1\">\n        <IconDefined className=\"inline-block mr-1 text-xs\" />\n        <span>{title}</span>\n      </section>\n\n      {count > 0 ? (\n        <span className=\"px-0.5 my-1 text-xs bg-blue-600 text-white rounded-full\">\n          {count}\n        </span>\n      ) : null}\n    </section>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemContainerComponentInterface = {\n  children: ReactNode;\n};\n\n/**\n *\n * @param param0\n * @returns\n */\nexport const SubItemContainer: FC<SubItemContainerComponentInterface> = ({\n  children,\n}): ReactElement => {\n  return (\n    <div className=\"ml-3 overflow-y-auto border-l-2 border-blue-200 -mt-1 pt-2 mb-2 pl-1 cursor-pointer\">\n      {children}\n    </div>\n  );\n};\n\n//************************************ FORM SEARCH **************************************** */\n\ntype SubItemComponentInterface = {\n  title: string;\n  icon?: any;\n  active?: boolean;\n  count?: number;\n};\n\n/**\n *\n * @param param0\n * @returns\n * @important Remenber to use these components inside the <SubItemContainer>...</SubItemContainer>\n */\nexport const SubItem: FC<SubItemComponentInterface> = ({\n  title = \"\",\n  icon = MdBrightness1,\n  active = false,\n  count = 0,\n}): ReactElement => {\n  const IconDefined = icon;\n\n  return (\n    <div\n      className={`animate__animated animate__zoomIn animate__faster ${\n        active === true ? \"bg-blue-500 text-white font-bold\" : \" text-blue-800\"\n      } text-blue-800 bg-blue-200 rounded-md px-1 mb-1 flex items-center py-1 font-bold`}\n    >\n      <IconDefined\n        className={`inline-block mr-0.1 text-xs ${\n          active === true ? \"text-white\" : \"\"\n        }`}\n      />\n      <span\n        className={`inline-block pl-1 ${active === true ? \"text-white\" : \"\"}`}\n      >\n        {title}\n      </span>\n      {count >= 1 ? (\n        <span\n          className={`text-sm fint-bold ${active === true ? \"text-white\" : \"\"}`}\n        >\n          {count}\n        </span>\n      ) : null}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { ApplicationSession } from \"../../../actions\";\nimport {\n  course,\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimExamResultsDetails,\n} from \"../../../interfaces\";\nimport { candidatePlacementInterface } from \"../../../interfaces/placement\";\nimport { isClaimAllowed } from \"./ClaimForm\";\n\nexport const getCourseById = (courses: course[], course_id: string) => {\n  return courses.find((item) => item.course_id === course_id);\n};\n\nexport const getCourseIdBySheetId = (\n  allData: ClaimExamResultsDetails[],\n  sheet_id: string\n) => {\n  return allData.find((item) => item.answer_sheet_id === sheet_id);\n};\n\nexport const searchApplication = (\n  objList: claimApplicationsInterface[],\n  text: any\n): claimApplicationsInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (prop === \"position\") {\n        flag =\n          product.position.position_title\n            .toString()\n            .toLowerCase()\n            .indexOf(text.toLowerCase()) > -1;\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n  // return objList.filter((product) =>\n  //   product.position.position_title.includes(text)\n  // );\n};\n\ntype FormPlacementListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  myPlacement: candidatePlacementInterface | null;\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n\n  // REDUX //////////////////////\n};\n\nconst FormPlacementList: React.FC<FormPlacementListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            props.myPlacement === null ||\n            isClaimAllowed(\n              props.myClaims,\n              props.activeSession.session_plan_id,\n              props.myPlacement.placed._id\n            )\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}{\" \"}\n      {/* searchData(props.candidateAnswers, searchInput) */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {props.myPlacement ? (\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            props.myPlacement.placed._id\n          ) && (\n            <div className=\"group flex items-center justify-between my-1 hover:bg-gray-100\">\n              <div\n                className=\"p-1 w-full mr-2 cursor-pointer\"\n                onClick={() => {\n                  props.setChooseClaimFile(false);\n                  props.setClaimFileId(props.myPlacement!.placed._id);\n                }}\n              >\n                <p className=\"text-base font-medium text-black\">\n                  Placed on {props.myPlacement.placed.school.school_name}\n                </p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                onClick={() => {\n                  props.setViewThisFile(props.myPlacement!.placed._id);\n                }}\n              >\n                View\n              </button>\n            </div>\n          )\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No placement to claim on!\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\n// const mapStateToProps = ({\n//   course,\n// }: StoreState): {\n//   courses: course[] | null;\n// } => {\n//   return {\n//     courses: course.courses,\n//   };\n// };\nexport default connect(null, {})(FormPlacementList);\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  createClaim,\n  DocumentClaimUser,\n  GetClaimingTypes,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  course,\n  PlansInterface,\n  PlansTypeKeys,\n  SessionPlanInterface,\n} from \"../../../interfaces\";\nimport { candidatePlacementInterface } from \"../../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport {\n  capitalizeFirstLetter,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport { UserInterface } from \"../../../shared/interfaces\";\nimport { API } from \"../../../utils/api\";\nimport { setAxiosToken } from \"../../../utils/AxiosToken\";\nimport { errorToText } from \"../../../utils/errors\";\nimport { isPlanActive } from \"../../SessionSettings/ApplicationSession/SessionDetails\";\nimport ApplicationFormView from \"./ApplicationFormView\";\nimport ChooseReason from \"./ChooseReason\";\nimport DocFormView from \"./DocFormView\";\nimport ExaminationFormView from \"./ExaminationFormView\";\nimport FormApplicationList from \"./FormApplicationList\";\nimport FormDocumentList from \"./FormDocumentList\";\nimport FormExamList, {\n  getCourseById,\n  getCourseIdBySheetId,\n} from \"./FormExamList\";\nimport FormPlacementList from \"./FormPlacementList\";\n\nexport const ClaimGetDocTitle = (\n  documentCategories: DocumentReducerInterface,\n  doc: DocumentClaimUser\n): { category: string; sub_category: string; field: string; main: string } => {\n  let DocCategory: string = \"\",\n    DocSubCategory: string = \"\",\n    DocField: string = \"\",\n    DocTitle: string = \"\";\n  if (\n    doc.sub_category_id.length > 0 &&\n    documentCategories.documentSubCategory\n  ) {\n    DocTitle = documentCategories.documentSubCategory.filter(\n      (c) => c.user_detail_subcategory_id === doc.sub_category_id\n    )[0].title;\n    DocSubCategory = DocTitle;\n  } else if (\n    doc.category_id.length > 0 &&\n    documentCategories.documentCategory\n  ) {\n    DocTitle = documentCategories.documentCategory.filter(\n      (c) => c.user_detail_category_id === doc.category_id\n    )[0].title;\n    DocCategory = DocTitle;\n  }\n  if (\n    doc.category_subcategory_data &&\n    doc.category_subcategory_data.category_subcategory_Data_id.length > 0 &&\n    documentCategories.documentFields\n  ) {\n    console.log({ doc });\n    DocField = documentCategories.documentFields.filter(\n      (c) =>\n        c._id === doc.category_subcategory_data?.category_subcategory_Data_id\n    )[0].title;\n    DocTitle += \" in \" + DocField;\n  }\n\n  return {\n    category: DocCategory,\n    sub_category: DocSubCategory,\n    field: DocField,\n    main: DocTitle,\n  };\n};\n\nexport const isClaimAllowed = (\n  allClaim: CandidateClaimInterface[],\n  period_id: string,\n  claimOnId: string\n): boolean => {\n  if (\n    allClaim.find(\n      (item) =>\n        item.period_id === period_id && item.claiming_on_id === claimOnId\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\ntype ClaimFormProps = {\n  // REQUIRED PROPS\n  formState: boolean;\n  setFormState: (value: boolean, response?: boolean) => void;\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getMyPlacement: Function;\n  getClaimReasons: Function;\n  createClaim: Function;\n  GetClaimingTypes: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  getMyClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype ClaimFormState = {\n  loading: boolean;\n  loadingForm: boolean;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  thisClaimType: PlansTypeKeys | null;\n  thisClaimTypeId: string;\n  claimComment: string;\n  claimFileId: string;\n  chooseClaimFile: boolean;\n  chooseClaimReason: boolean;\n  claimReason: claimReasonInterface | null;\n  myPlacement: candidatePlacementInterface | null;\n  viewThisFile: string;\n  formType: \"DEFAULT\" | \"PROPS\";\n  alertError: string | null;\n};\n\nclass ClaimForm extends Component<ClaimFormProps, ClaimFormState> {\n  constructor(props: ClaimFormProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingForm: false,\n      formError: null,\n      thisClaimType: null,\n      thisClaimTypeId: \"\",\n      claimComment: \"\",\n      claimFileId: \"\",\n      chooseClaimFile: false,\n      viewThisFile: \"\",\n      formType: \"DEFAULT\",\n      alertError: null,\n      myPlacement: this.props.claiming.myPlacement,\n      chooseClaimReason: false,\n      claimReason: null,\n    };\n  }\n\n  setLoading = (state: boolean) => {\n    this.setState({ loading: state });\n  };\n\n  setLoadingForm = (state: boolean) => {\n    this.setState({ loadingForm: state });\n  };\n\n  setFormError = (\n    data: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: data });\n  };\n\n  setAlertError = (data: string | null) => {\n    this.setState({ alertError: data });\n  };\n\n  setClaimFileId = (data: string) => {\n    this.setState({ claimFileId: data });\n  };\n\n  setViewThisFile = (data: string) => {\n    this.setState({ viewThisFile: data });\n  };\n\n  setChooseClaimFile = (data: boolean) => {\n    this.setState({ chooseClaimFile: data });\n  };\n\n  setChooseClaimReason = (data: boolean) => {\n    this.setState({ chooseClaimReason: data });\n  };\n\n  setClaimReason = (value: claimReasonInterface | null) => {\n    this.setState({ claimReason: value });\n  };\n\n  setClaimComment = (data: string) => {\n    this.setState({ claimComment: data });\n  };\n\n  isClaimTypeOpen = (\n    thisSession: SessionPlanInterface,\n    thisType: PlansTypeKeys\n  ): boolean => {\n    let data: PlansInterface | undefined;\n    if (thisType === PlansTypeKeys.APPLICATION) {\n      data = thisSession.plans.find(\n        (item) => item.type_key === PlansTypeKeys.APPLICATION\n      );\n      if (data && isPlanActive(thisSession, data) === \"OPEN\") {\n        return true;\n      }\n    } else if (thisType === PlansTypeKeys.DOCUMENT_VALIDATION) {\n      data = thisSession.plans.find(\n        (item) => item.type_key === PlansTypeKeys.DOCUMENT_VALIDATION\n      );\n      if (data && isPlanActive(thisSession, data) === \"OPEN\") {\n        return true;\n      }\n    } else if (thisType === PlansTypeKeys.PLACEMENT_TRANSFER) {\n      data = thisSession.plans.find(\n        (item) => item.type_key === PlansTypeKeys.PLACEMENT_TRANSFER\n      );\n      if (data && isPlanActive(thisSession, data) === \"OPEN\") {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  displayClaimType = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    switch (claimType) {\n      case PlansTypeKeys.APPLICATION:\n        result = \"application\";\n        break;\n      case PlansTypeKeys.DOCUMENT_VALIDATION:\n        result = \"document\";\n        break;\n      case PlansTypeKeys.EXAMINATION:\n        result = \"exam\";\n        break;\n      case PlansTypeKeys.MARKS_PUBLICATION:\n        result = \"marks publication\";\n        break;\n      case PlansTypeKeys.PLACEMENT_TRANSFER:\n        result = \"placement\";\n        break;\n      default:\n        result = \"\";\n        break;\n    }\n\n    return result;\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan.session_plan_id,\n      user_id,\n      (status: boolean, msg: string, data: ClaimExamResultsDetails[]) => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n  };\n\n  componentDidMount = () => {\n    if (this.props.auth.application_session === null) {\n      this.props.PushPopupAlert({\n        title: \"No session active session\",\n        theme: PopupAlertTheme.danger,\n      });\n      this.props.setFormState(false);\n      this.setState({\n        claimFileId: \"\",\n        thisClaimType: null,\n        thisClaimTypeId: \"\",\n        claimComment: \"\",\n        chooseClaimFile: false,\n        formType: \"DEFAULT\",\n        viewThisFile: \"\",\n        formError: null,\n      });\n    } else {\n      if (this.props.documentReducer.documentCategory === null) {\n        this.props.getDocumentCategory();\n      }\n      if (this.props.documentReducer.documentSubCategory === null) {\n        this.props.getDocumentSubCategory();\n      }\n      if (this.props.documentReducer.documentFields === null) {\n        this.props.getDocumentFields();\n      }\n      if (this.props.claiming.claimReasons === null) {\n        this.props.getClaimReasons((status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length > 0) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        });\n      }\n    }\n  };\n\n  getDocumentById = (\n    documents: DocumentClaimUser[],\n    doc_id: string\n  ): DocumentClaimUser => {\n    return documents.filter((item) => item.doc_id === doc_id)[0];\n  };\n\n  getApplicationById = (\n    applications: claimApplicationsInterface[],\n    application_id: string\n  ): claimApplicationsInterface => {\n    return applications.filter(\n      (item) => item.application_id === application_id\n    )[0];\n  };\n\n  getExamById = (\n    exams: ClaimExamResultsDetails[],\n    answer_sheet_id: string\n  ): ClaimExamResultsDetails | undefined => {\n    return exams.find((item) => item.answer_sheet_id === answer_sheet_id);\n  };\n\n  getValidation = (\n    thisId: string\n  ): {\n    old_reason: string;\n    old_status: string;\n    old_evaluated_by: string;\n  } => {\n    let result: {\n      old_reason: string;\n      old_status: string;\n      old_evaluated_by: string;\n    } = { old_reason: \"\", old_status: \"\", old_evaluated_by: \"\" };\n\n    if (\n      this.state.thisClaimType === PlansTypeKeys.DOCUMENT_VALIDATION &&\n      this.props.claiming.candidateDocuments\n    ) {\n      result = {\n        old_reason: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.comment,\n        old_status: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.validation_status,\n        old_evaluated_by: this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          thisId\n        ).validated_by.user_id,\n      };\n    } else if (\n      this.state.thisClaimType === PlansTypeKeys.APPLICATION &&\n      this.props.claiming.candidateApplications\n    ) {\n      result = {\n        old_reason: this.getApplicationById(\n          this.props.claiming.candidateApplications,\n          thisId\n        ).override_by.comment,\n        old_status: this.getApplicationById(\n          this.props.claiming.candidateApplications,\n          thisId\n        ).override_by.application_status,\n        old_evaluated_by: this.getApplicationById(\n          this.props.claiming.candidateApplications,\n          thisId\n        ).override_by.user_id,\n      };\n    }\n\n    return result;\n  };\n\n  cleanToClose = (response?: boolean) => {\n    this.props.setFormState(false);\n    this.setState({\n      claimFileId: \"\",\n      thisClaimType: null,\n      thisClaimTypeId: \"\",\n      claimComment: \"\",\n      chooseClaimFile: false,\n      formType: \"DEFAULT\",\n      viewThisFile: \"\",\n      formError: null,\n    });\n  };\n\n  loadUserById = async (user_id: string, callback: Function) => {\n    if (isEmptyOrSpaces(user_id)) {\n      return this.props.PushPopupAlert({\n        title: \"No user id provided\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    try {\n      setAxiosToken();\n      const res = await axios.get<UserInterface>(\n        `${API.AUTH}/users/${user_id}`\n      );\n      console.log(\"====================================\");\n      console.log({ loadUserById: res });\n      console.log(\"====================================\");\n      if (res) {\n        callback(res.data);\n      }\n    } catch (error) {\n      console.error({ error });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  getClaimTitle = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    if (\n      claimType === PlansTypeKeys.DOCUMENT_VALIDATION &&\n      this.props.claiming.candidateDocuments\n    ) {\n      result = ClaimGetDocTitle(\n        this.props.documentReducer,\n        this.getDocumentById(\n          this.props.claiming.candidateDocuments,\n          this.state.claimFileId\n        )\n      ).main;\n    }\n    if (\n      claimType === PlansTypeKeys.APPLICATION &&\n      this.props.claiming.candidateApplications\n    ) {\n      result = this.getApplicationById(\n        this.props.claiming.candidateApplications,\n        this.state.claimFileId\n      ).position.position_title;\n    }\n    if (\n      claimType === PlansTypeKeys.EXAMINATION &&\n      this.props.courses &&\n      this.props.claiming.myAnswer &&\n      getCourseIdBySheetId(\n        this.props.claiming.myAnswer,\n        this.state.claimFileId\n      ) &&\n      getCourseById(\n        this.props.courses,\n        getCourseIdBySheetId(\n          this.props.claiming.myAnswer,\n          this.state.claimFileId\n        )!.course\n      )\n    ) {\n      result = getCourseById(\n        this.props.courses,\n        getCourseIdBySheetId(\n          this.props.claiming.myAnswer,\n          this.state.claimFileId\n        )!.course\n      )!.course_name;\n    }\n    if (\n      claimType === PlansTypeKeys.PLACEMENT_TRANSFER &&\n      this.state.myPlacement\n    ) {\n      result = \"Placed on \" + this.state.myPlacement.placed.school.school_name;\n    }\n\n    return result;\n  };\n\n  getClaimInstitute = (claimType: PlansTypeKeys): string => {\n    let result: string = \"\";\n    if (\n      claimType === PlansTypeKeys.APPLICATION &&\n      this.props.claiming.candidateApplications\n    ) {\n      result = this.getApplicationById(\n        this.props.claiming.candidateApplications,\n        this.state.claimFileId\n      ).position.education_institute_id.education_institute_id;\n    }\n\n    return result;\n  };\n\n  handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!this.state.thisClaimType) {\n      return this.setFormError({\n        element: \"claim_type\",\n        msg: \"Claim type is required!\",\n      });\n    }\n    if (isEmptyOrSpaces(this.state.claimFileId)) {\n      return this.setFormError({\n        element: \"claim_file\",\n        msg: `Please select ${this.state.thisClaimType.toLocaleLowerCase()} you are claiming on!`,\n      });\n    }\n\n    if (!this.state.claimReason) {\n      return this.setFormError({\n        element: \"claim_reason\",\n        msg: `Please select the reason of your claim!`,\n      });\n    }\n\n    if (isEmptyOrSpaces(this.state.claimComment)) {\n      return this.setFormError({\n        element: \"claim_comment\",\n        msg: `Claim comment is required!`,\n      });\n    }\n\n    if (!this.props.auth.application_session) {\n      return this.setAlertError(`No active claiming session is available!`);\n    }\n\n    this.setLoadingForm(true);\n    let old_evaluator_email: string = \"info@system.com\";\n    let old_evaluator_name: string = \"System\";\n    let evaluator_email: string = \"\";\n    let evaluator_name: string = \"\";\n    let title: string = this.getClaimTitle(this.state.thisClaimType);\n    let institute_id: string = this.getClaimInstitute(this.state.thisClaimType);\n\n    if (\n      this.state.thisClaimType !== PlansTypeKeys.EXAMINATION &&\n      this.getValidation(this.state.claimFileId).old_evaluated_by !== \"system\"\n    ) {\n      await this.loadUserById(\n        this.getValidation(this.state.claimFileId).old_evaluated_by,\n        (data: UserInterface) => {\n          old_evaluator_email = data.email;\n          old_evaluator_name =\n            data.user_info.fname + \" \" + data.user_info.lname;\n        }\n      );\n    }\n\n    if (this.state.thisClaimType === PlansTypeKeys.EXAMINATION) {\n    }\n\n    try {\n      // console.log(\"====================================\");\n      // console.log({\n      //   claiming_on_id: this.state.claimFileId,\n      //   type_key: this.state.thisClaimType,\n      //   user: this.props.auth.user.user_id,\n      //   period_id: this.props.auth.application_session.session_plan_id,\n      //   default_claim_resaons: this.state.claimReason.id,\n      //   reason: this.state.claimComment,\n      //   old_reason:\n      //     this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n      //     this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n      //       ? \"System\"\n      //       : this.getValidation(this.state.claimFileId).old_reason,\n      //   old_status:\n      //     this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n      //     this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n      //       ? \"Failed\"\n      //       : this.getValidation(this.state.claimFileId).old_status,\n      //   old_evaluated_by:\n      //     this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n      //     this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n      //       ? \"\"\n      //       : this.getValidation(this.state.claimFileId).old_evaluated_by,\n      //   old_evaluator_email,\n      //   old_evaluator_name,\n      //   evaluator_email,\n      //   evaluator_name,\n      //   title,\n      // });\n      // console.log(\"====================================\");\n\n      setAxiosToken();\n      const res = await axios.post<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/create`,\n        {\n          claiming_on_id: this.state.claimFileId,\n          type_key: this.state.thisClaimType,\n          user: this.props.auth.user.user_id,\n          period_id: this.props.auth.application_session.session_plan_id,\n          default_claim_resaons: this.state.claimReason.id,\n          reason: this.state.claimComment,\n          old_reason:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"System\"\n              : this.getValidation(this.state.claimFileId).old_reason,\n          old_status:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"Failed\"\n              : this.getValidation(this.state.claimFileId).old_status,\n          old_evaluated_by:\n            this.state.thisClaimType === PlansTypeKeys.EXAMINATION ||\n            this.state.thisClaimType === PlansTypeKeys.PLACEMENT_TRANSFER\n              ? \"\"\n              : this.getValidation(this.state.claimFileId).old_evaluated_by,\n          old_evaluator_email,\n          old_evaluator_name,\n          evaluator_email,\n          evaluator_name,\n          title,\n          institute_id,\n        }\n      );\n      console.log({ createClaim: res });\n      if (res.status === 201 || res.status === 200) {\n        this.props.createClaim(res.data);\n        this.props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        this.cleanToClose(true);\n      }\n    } catch (error) {\n      console.error({ error });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setLoadingForm(false);\n  };\n\n  selectClaimType = (thisClaim: string) => {\n    this.setState({\n      thisClaimType: isEmptyOrSpaces(thisClaim)\n        ? null\n        : (thisClaim as PlansTypeKeys),\n    });\n\n    if ((thisClaim as PlansTypeKeys) === PlansTypeKeys.APPLICATION) {\n      if (this.props.claiming.candidateApplications === null) {\n        this.props.getMyRejectedApplications(\n          this.props.auth.user.user_id,\n          (\n            status: boolean,\n            msg: string,\n            data?: claimApplicationsInterface[]\n          ) => {\n            this.setLoading(status);\n            if (!status) {\n              if (msg.length > 0) {\n                this.props.PushPopupAlert({\n                  title: msg,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            }\n          }\n        );\n      }\n      if (\n        this.props.courses === null ||\n        (this.props.courses.length === 0 && this.state.loading)\n      ) {\n        this.props.loadCourses(this.setLoading);\n        this.setLoading(false);\n      } else {\n        this.setLoading(false);\n      }\n    } else if ((thisClaim as PlansTypeKeys) === PlansTypeKeys.EXAMINATION) {\n      if (\n        this.props.courses === null ||\n        (this.props.courses.length === 0 && this.state.loading)\n      ) {\n        this.props.loadCourses(this.setLoading);\n        this.setLoading(false);\n      } else {\n        this.setLoading(false);\n      }\n    } else if (\n      (thisClaim as PlansTypeKeys) === PlansTypeKeys.DOCUMENT_VALIDATION\n    ) {\n      if (this.props.claiming.candidateDocuments === null) {\n        this.props.getMyRejectedDocuments(\n          (status: boolean, msg: string, data?: DocumentClaimUser[]) => {\n            this.setLoading(status);\n            if (!status) {\n              if (msg.length > 0) {\n                this.props.PushPopupAlert({\n                  title: msg,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            }\n          }\n        );\n      }\n    } else if (\n      (thisClaim as PlansTypeKeys) === PlansTypeKeys.PLACEMENT_TRANSFER\n    ) {\n      if (this.props.claiming.myPlacement === null) {\n        this.props.getMyPlacement(\n          this.props.auth.user.user_id,\n          (\n            status: boolean,\n            msg: string,\n            data?: candidatePlacementInterface | null\n          ) => {\n            this.setLoading(status);\n            if (!status) {\n              if (msg.length > 0) {\n                this.props.PushPopupAlert({\n                  title: msg,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            }\n            if (data) {\n              this.setState({ myPlacement: data });\n            }\n          }\n        );\n      }\n    }\n  };\n\n  generateChooseFileTitle = (thisClaimType: PlansTypeKeys | null): string => {\n    let result: string = \"\";\n\n    switch (thisClaimType) {\n      case PlansTypeKeys.APPLICATION:\n        result = `Select application you are claiming on?`;\n        break;\n      case PlansTypeKeys.DOCUMENT_VALIDATION:\n        result = `Select document you are claiming on?`;\n        break;\n      case PlansTypeKeys.EXAMINATION:\n        result = `Select exam you are claiming on?`;\n        break;\n      case PlansTypeKeys.MARKS_PUBLICATION:\n        result = `Select marks publication you are claiming on?`;\n        break;\n      case PlansTypeKeys.PLACEMENT_TRANSFER:\n        result = `Select placement you are claiming on?`;\n        break;\n      default:\n        result = \"Select file you are claiming on?\";\n        break;\n    }\n\n    return result;\n  };\n\n  render() {\n    if (\n      this.props.auth.application_session === null ||\n      this.props.claiming.myClaims === null\n    ) {\n      return null;\n    }\n\n    return (\n      <div className=\"pb-3\">\n        {this.props.formState && (\n          <Modal\n            backDrop={true}\n            theme={Themes.default}\n            close={(): void => {\n              !this.state.loadingForm &&\n                this.state.viewThisFile.length <= 0 &&\n                this.cleanToClose();\n              !this.state.loadingForm &&\n                this.state.viewThisFile.length > 0 &&\n                this.setViewThisFile(\"\");\n            }}\n            displayClose={true}\n            backDropClose={false}\n            title={\n              <div className=\"text-gray-900 font-bold text-xl md:ml-1\">\n                {this.state.viewThisFile.length <= 0 && \"Claiming form\"}\n                {this.state.viewThisFile.length > 0 &&\n                  this.state.thisClaimType ===\n                    PlansTypeKeys.DOCUMENT_VALIDATION &&\n                  \"Viewing document\"}\n                {this.state.viewThisFile.length > 0 &&\n                  this.state.thisClaimType === PlansTypeKeys.APPLICATION &&\n                  \"Viewing application\"}\n              </div>\n            }\n            widthSizeClass={\n              this.state.viewThisFile.length > 0\n                ? ModalSize.extraLarge\n                : ModalSize.medium\n            }\n            padding={{ title: true, body: false, footer: false }}\n          >\n            {/* CLAIM FORM ============================================== */}\n            {this.state.viewThisFile.length <= 0 && (\n              <form onSubmit={(e) => this.handleSubmit(e)}>\n                <div className=\"px-6 pb-3\">\n                  {this.state.alertError && (\n                    <div\n                      className=\"alert-warning cursor-pointer\"\n                      onClick={() => this.setAlertError(null)}\n                    >\n                      {this.state.alertError}\n                    </div>\n                  )}\n                  <div className=\"text-base text-gray-700 sm:text-lg\">\n                    {/* SELECT CLAIM TYPE ============================================== */}\n                    <div className=\"flex flex-col mb-2\">\n                      <label>Claim type</label>\n                      <select\n                        className={`rounded px-2 py-2 w-full bg-white focus:outline-none ${\n                          this.state.formType === \"PROPS\" &&\n                          \"cursor-not-allowed\"\n                        } ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_type\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        } border-2`}\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.selectClaimType(e.target.value);\n                          this.setClaimFileId(\"\");\n                          this.state.formError &&\n                            this.state.formError.element === \"claim_type\" &&\n                            this.setFormError(null);\n                        }}\n                        value={\n                          this.state.thisClaimType\n                            ? this.state.thisClaimType\n                            : \"\"\n                        }\n                        disabled={\n                          this.state.loadingForm ||\n                          this.state.formType === \"PROPS\"\n                        }\n                      >\n                        <option value=\"\">Choose claim type</option>\n                        {Object.values(PlansTypeKeys).map((item, index) => (\n                          <option\n                            value={item}\n                            key={index + item}\n                            className={`${\n                              item === PlansTypeKeys.MARKS_PUBLICATION ||\n                              item === PlansTypeKeys.PLACEMENT_TRANSFER\n                                ? \"hidden\"\n                                : \"block\"\n                            }`}\n                          >\n                            {capitalizeFirstLetter(\n                              item.toLocaleLowerCase().replace(/_/g, \" \")\n                            )}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_type\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END SELECT CLAIM TYPE ============================================== */}\n\n                    {/* SELECT FILE TO CLAIM ON ============================================== */}\n                    <div className=\"flex flex-col mb-2\">\n                      <label>\n                        {this.generateChooseFileTitle(this.state.thisClaimType)}\n                      </label>\n                      <div\n                        className={`text-left bg-white border-2 ${\n                          this.state.formType !== \"PROPS\"\n                            ? \"border-gray-700\"\n                            : \"border-gray-400 text-gray-500\"\n                        } rounded w-full ${\n                          this.state.chooseClaimFile ? \"h-64\" : \"h-10\"\n                        } ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_file\"\n                            ? \"border-red-500\"\n                            : \"\"\n                        } border-2 ${\n                          this.state.loading\n                            ? \"cursor-waiting\"\n                            : this.state.thisClaimType &&\n                              !this.state.chooseClaimFile &&\n                              this.state.formType !== \"PROPS\"\n                            ? \"cursor-pointer\"\n                            : !this.state.chooseClaimFile &&\n                              \"cursor-not-allowed\"\n                        }`}\n                        title={\n                          !this.state.thisClaimType\n                            ? \"Choose claim type first!\"\n                            : \"\"\n                        }\n                        onClick={() => {\n                          !this.state.loading &&\n                            this.state.formType === \"DEFAULT\" &&\n                            this.state.thisClaimType &&\n                            !this.state.chooseClaimFile &&\n                            this.setChooseClaimFile(true);\n                          !this.state.loading &&\n                            this.state.formError &&\n                            this.state.formError.element === \"claim_file\" &&\n                            this.setFormError(null);\n                        }}\n                      >\n                        {/* DISPLAYING FILTERED SELECTING FILE ============================ */}\n                        {this.state.claimFileId.length > 0 &&\n                        this.state.thisClaimType &&\n                        !this.state.chooseClaimFile ? (\n                          <p className=\"my-1 mx-2\">\n                            {this.getClaimTitle(this.state.thisClaimType)}\n                          </p>\n                        ) : (\n                          !this.state.chooseClaimFile && (\n                            <p className=\"my-1 mx-2\">\n                              Select Claim{\" \"}\n                              {this.state.thisClaimType &&\n                                this.state.thisClaimType\n                                  .toLocaleLowerCase()\n                                  .replace(/_/g, \" \")}\n                            </p>\n                          )\n                        )}\n                        {/* END DISPLAYING FILTERED SELECTING FILE ============================ */}\n\n                        {/* LISTING OF REJECTED DOCUMENTS ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.DOCUMENT_VALIDATION &&\n                          this.props.claiming.candidateDocuments &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormDocumentList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              candidateDocuments={\n                                this.props.claiming.candidateDocuments\n                              }\n                              documentCategories={this.props.documentReducer}\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                            />\n                          )}\n                        {/* END LISTING OF REJECTED DOCUMENTS ============================ */}\n                        {/* ---------------------------------------------------------- */}\n                        {/* LISTING OF REJECTED APPLICATION ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.APPLICATION &&\n                          this.props.claiming.candidateApplications &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormApplicationList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              candidateApplications={\n                                this.props.claiming.candidateApplications\n                              }\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                            />\n                          )}\n                        {/* END LISTING OF REJECTED APPLICATION ============================ */}\n                        {/* ---------------------------------------------------------- */}\n                        {/* LISTING OF FAILED EXAM ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.EXAMINATION &&\n                          this.props.claiming.myAnswer &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormExamList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              candidateAnswers={this.props.claiming.myAnswer}\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                            />\n                          )}\n                        {/* END LISTING OF FAILED EXAM ============================ */}\n                        {/* ---------------------------------------------------------- */}\n                        {/* PENDING PLACEMENT ============================ */}\n                        {this.state.chooseClaimFile &&\n                          this.state.thisClaimType ===\n                            PlansTypeKeys.PLACEMENT_TRANSFER &&\n                          this.props.claiming.myClaims &&\n                          this.props.auth.application_session && (\n                            <FormPlacementList\n                              setChooseClaimFile={this.setChooseClaimFile}\n                              setClaimFileId={this.setClaimFileId}\n                              setViewThisFile={this.setViewThisFile}\n                              claimFileId={this.state.claimFileId}\n                              viewThisFile={this.state.viewThisFile}\n                              myClaims={this.props.claiming.myClaims}\n                              activeSession={\n                                this.props.auth.application_session\n                              }\n                              myPlacement={this.state.myPlacement}\n                            />\n                          )}\n                        {/* END LISTING OF FAILED Placement ============================ */}\n                      </div>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_file\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END SELECT FILE TO CLAIM ON ============================================== */}\n\n                    {/* CLAIM REASONS ========================================== */}\n                    <div className=\"flex flex-col mb-2\">\n                      <label>Choose reason of your claim</label>\n                      <div\n                        className={`text-left bg-white border-2 border-gray-700 rounded w-full ${\n                          this.state.chooseClaimReason ? \"h-64\" : \"h-auto\"\n                        } ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_reason\"\n                            ? \"border-red-500\"\n                            : \"\"\n                        } border-2 ${\n                          this.props.claiming.claimReasons === null\n                            ? \"cursor-wait\"\n                            : \"cursor-pointer\"\n                        }`}\n                        title=\"Choose the reason for your claim!\"\n                        onClick={() => {\n                          !this.state.chooseClaimReason &&\n                            this.setState({ chooseClaimReason: true });\n                          this.state.formError &&\n                            this.state.formError.element === \"claim_reason\" &&\n                            this.setFormError(null);\n                        }}\n                      >\n                        {/* DISPLAYING SELECTED REASON ============================ */}\n                        {this.state.claimReason &&\n                        !this.state.chooseClaimReason ? (\n                          <p className=\"my-1 mx-2\">\n                            {this.state.claimReason.reason}\n                          </p>\n                        ) : (\n                          !this.state.chooseClaimReason && (\n                            <p className=\"my-1 mx-2\">Select reason</p>\n                          )\n                        )}\n                        {/* END DISPLAYING SELECTED REASON ============================ */}\n\n                        {/* LISTING OF CLAIM REASONS ============================ */}\n                        {this.state.chooseClaimReason &&\n                          this.props.claiming.claimReasons && (\n                            <ChooseReason\n                              setChooseClaimReason={this.setChooseClaimReason}\n                              setClaimReason={this.setClaimReason}\n                              claimReason={this.state.claimReason}\n                              allClaimReasons={this.props.claiming.claimReasons}\n                            />\n                          )}\n                        {/* END LISTING OF CLAIM REASONS ============================ */}\n                      </div>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_reason\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END CLAIM REASONS ========================================== */}\n\n                    {/* CLAIM COMMENT ============================================== */}\n                    <div className=\"flex flex-col\">\n                      <label>Comment</label>\n                      <textarea\n                        className={`text-left input-white w-20 inline-block ${\n                          this.state.formError &&\n                          this.state.formError.element === \"claim_comment\"\n                            ? \"border-red-500\"\n                            : \"border-gray-500\"\n                        } border-2`}\n                        placeholder={`Claim comment`}\n                        style={{ resize: \"none\" }}\n                        value={this.state.claimComment}\n                        onChange={(e) => {\n                          this.setClaimComment(e.target.value);\n                          this.state.formError &&\n                            this.state.formError.element === \"claim_comment\" &&\n                            this.setFormError(null);\n                        }}\n                        rows={3}\n                        disabled={this.state.loadingForm}\n                      ></textarea>\n                      {this.state.formError &&\n                        this.state.formError.element === \"claim_comment\" && (\n                          <span className=\"text-red-500\">\n                            {this.state.formError.msg}\n                          </span>\n                        )}\n                    </div>\n                    {/* END CLAIM COMMENT ============================================== */}\n                  </div>\n\n                  <div className=\"pt-3 flex justify-between\">\n                    <button\n                      onClick={() => this.cleanToClose()}\n                      className={`btn bg-gray-400 text-white hover:bg-gray-600 focus:outline-none ${\n                        this.state.loadingForm && \"cursor-not-allowed\"\n                      }`}\n                      type=\"button\"\n                      disabled={this.state.loadingForm || this.state.loading}\n                    >\n                      Exit\n                    </button>\n                    <button\n                      className={`btn bg-primary text-white hover:bg-blue-600 focus:outline-none ${\n                        this.state.loadingForm && \"cursor-wait\"\n                      }`}\n                      type=\"submit\"\n                      disabled={this.state.loadingForm || this.state.loading}\n                    >\n                      {this.state.loadingForm ? \"Loading...\" : \"Claim\"}\n                    </button>\n                  </div>\n                </div>\n              </form>\n            )}\n            {/* END CLAIM FORM ============================================== */}\n\n            {/* CLAIM DOCUMENT VIEW ============================================== */}\n            {this.state.viewThisFile.length > 0 &&\n              this.props.claiming.candidateDocuments &&\n              this.state.thisClaimType ===\n                PlansTypeKeys.DOCUMENT_VALIDATION && (\n                <DocFormView\n                  thisDoc={this.getDocumentById(\n                    this.props.claiming.candidateDocuments,\n                    this.state.viewThisFile\n                  )}\n                  setViewThisFile={this.setViewThisFile}\n                  documentCategories={this.props.documentReducer}\n                  setChooseClaimFile={this.setChooseClaimFile}\n                  setClaimFileId={this.setClaimFileId}\n                />\n              )}\n            {/* END CLAIM DOCUMENT VIEW ============================================== */}\n            {/* ------------------------------------------------------------------------- */}\n            {/* CLAIM APPLICATION VIEW ============================================== */}\n            {this.state.viewThisFile.length > 0 &&\n              this.props.claiming.candidateApplications &&\n              this.state.thisClaimType === PlansTypeKeys.APPLICATION && (\n                <ApplicationFormView\n                  thisApplication={this.getApplicationById(\n                    this.props.claiming.candidateApplications,\n                    this.state.viewThisFile\n                  )}\n                  documentCategories={this.props.documentReducer}\n                  setChooseClaimFile={this.setChooseClaimFile}\n                  setClaimFileId={this.setClaimFileId}\n                  setViewThisFile={this.setViewThisFile}\n                />\n              )}\n            {/* END CLAIM APPLICATION VIEW ============================================== */}\n            {/* ------------------------------------------------------------------------- */}\n            {/* CLAIM EXAMINATION VIEW ============================================== */}\n            {this.state.viewThisFile.length > 0 &&\n              this.props.claiming.myAnswer &&\n              this.state.thisClaimType === PlansTypeKeys.EXAMINATION &&\n              this.getExamById(\n                this.props.claiming.myAnswer,\n                this.state.viewThisFile\n              ) && (\n                <ExaminationFormView\n                  thisAnswerSheet={\n                    this.getExamById(\n                      this.props.claiming.myAnswer,\n                      this.state.viewThisFile\n                    )!\n                  }\n                  setChooseClaimFile={this.setChooseClaimFile}\n                  setClaimFileId={this.setClaimFileId}\n                  setViewThisFile={this.setViewThisFile}\n                  // thisAnswerSheet={undefined}\n                  // setViewThisFile={undefined}\n                  // setChooseClaimFile={undefined}\n                  // setClaimFileId={undefined}\n                />\n              )}\n            {/* END CLAIM EXAMINATION VIEW ============================================== */}\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  document,\n  claiming,\n  course,\n}: StoreState): {\n  auth: Auth;\n  documentReducer: DocumentReducerInterface;\n  claiming: ClaimingReducerType;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    documentReducer: document,\n    claiming,\n    courses: course.courses,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadCourses,\n  getMyClaims,\n  getClaimReasons,\n  getMyAnswers,\n  getMyPlacement,\n  createClaim,\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(ClaimForm);\n","import React from \"react\";\nimport Table from \"../../components/Table/Table\";\nimport { isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { PositionRequirementTableInterface } from \"./ViewPosition\";\n\ninterface RequirementProps {\n  requirements: PositionRequirementTableInterface[];\n}\n\nconst ViewRequirements: React.FC<RequirementProps> = (props) => {\n  const tableData = (): JSX.Element[] => {\n    let data: PositionRequirementTableInterface[] = props.requirements;\n    // let data: PositionSubcategoryData[] =\n    //   props.position_requirement.position_requirement;\n    if (data.length === 0) {\n      return [\n        <tr key={153} className=\"border-b border-gray-200 hover:bg-gray-100\">\n          <td className=\"p-3 text-center\" colSpan={3}>\n            No Data Found\n          </td>\n        </tr>,\n      ];\n    }\n\n    return data.map((item, index) => (\n      <tr\n        key={index + item.field_id}\n        className=\"border-b border-gray-200 hover:bg-gray-100\"\n      >\n        <td className=\"p-3 text-left whitespace-nowrap\">{index + 1}</td>\n        <td className=\"p-3 text-left\">\n          <span>{item.subcategory_title}</span>\n        </td>\n        <td className=\"p-3 text-left\">\n          <span>\n            {isEmptyOrSpaces(item.field_id) ? \"Any document\" : item.field_title}\n          </span>\n        </td>\n        <td className=\"p-3 text-left text-lg italic\">\n          {isEmptyOrSpaces(item.field_id) ? (\n            item.subcategory_required ? (\n              <span className=\"text-yellow-800\">Required</span>\n            ) : (\n              \"Optional\"\n            )\n          ) : item.required ? (\n            <span className=\"text-yellow-800\">Required</span>\n          ) : (\n            \"Optional\"\n          )}\n        </td>\n      </tr>\n    ));\n  };\n\n  return (\n    <div>\n      <Table\n        columns={[\n          { columnTitle: \"#\", alignText: \"left\", padding: \"p-3\" },\n          { columnTitle: \"Qualification\", alignText: \"left\", padding: \"p-3\" },\n          // {\n          //   columnTitle: \"Qualification Status\",\n          //   alignText: \"left\",\n          //   padding: \"p-3\",\n          // },\n          { columnTitle: \"Document\", alignText: \"left\", padding: \"p-3\" },\n          { columnTitle: \"Status\", alignText: \"left\", padding: \"p-3\" },\n          // { columnTitle: \"\", alignText: \"left\", padding: \"p-3\" },\n        ]}\n        rows={tableData}\n        pagination={false}\n        search={false}\n        thColor=\"gray\"\n      />\n    </div>\n  );\n};\n\nexport default ViewRequirements;\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { ApplicationSession } from \"../../../actions\";\nimport {\n  course,\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimExamResultsDetails,\n} from \"../../../interfaces\";\nimport { StoreState } from \"../../../reducers\";\nimport { search } from \"../../../utils/functions\";\nimport { isClaimAllowed } from \"./ClaimForm\";\n\nconst getFailedExam = (\n  allData: ClaimExamResultsDetails[],\n  allCourses: course[]\n): ClaimExamResultsDetails[] => {\n  let result: ClaimExamResultsDetails[] = [];\n  allData.forEach((element) => {\n    if (element.total_marks < 100) {\n      let data = element;\n      data.course_name = getCourseById(allCourses, element.course)\n        ? getCourseById(allCourses, element.course)!.course_name\n        : \"Unknown exam\";\n      result.push(data);\n    }\n  });\n\n  return result;\n};\n\nexport const getCourseById = (courses: course[], course_id: string) => {\n  return courses.find((item) => item.course_id === course_id);\n};\n\nexport const getCourseIdBySheetId = (\n  allData: ClaimExamResultsDetails[],\n  sheet_id: string\n) => {\n  return allData.find((item) => item.answer_sheet_id === sheet_id);\n};\n\nexport const searchApplication = (\n  objList: claimApplicationsInterface[],\n  text: any\n): claimApplicationsInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (prop === \"position\") {\n        flag =\n          product.position.position_title\n            .toString()\n            .toLowerCase()\n            .indexOf(text.toLowerCase()) > -1;\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n  // return objList.filter((product) =>\n  //   product.position.position_title.includes(text)\n  // );\n};\n\ntype FormExamListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  candidateAnswers: ClaimExamResultsDetails[];\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n\n  // REDUX //////////////////////\n  courses: course[] | null;\n};\n\nconst FormExamList: React.FC<FormExamListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            !props.courses ||\n            getFailedExam(props.candidateAnswers, props.courses).filter(\n              (item) =>\n                isClaimAllowed(\n                  props.myClaims,\n                  props.activeSession.session_plan_id,\n                  item.answer_sheet_id\n                )\n            ).length > 0\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}{\" \"}\n      {/* searchData(props.candidateAnswers, searchInput) */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {props.courses &&\n        getFailedExam(props.candidateAnswers, props.courses).filter((item) =>\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            item.answer_sheet_id\n          )\n        ).length > 0 ? (\n          search(\n            getFailedExam(props.candidateAnswers, props.courses).filter(\n              (item) =>\n                isClaimAllowed(\n                  props.myClaims,\n                  props.activeSession.session_plan_id,\n                  item.answer_sheet_id\n                )\n            ),\n            searchInput\n          ).map((item: ClaimExamResultsDetails, index: number) => (\n            <div\n              className={`group flex items-center justify-between my-1 hover:bg-gray-100 ${\n                props.claimFileId === item.answer_sheet_id &&\n                \"bg-blue-50 border-l-4 border-blue-500\"\n              }`}\n              key={index + item.answer_sheet_id}\n            >\n              <div\n                className=\"p-1 w-full mr-2 cursor-pointer\"\n                onClick={() => {\n                  props.setChooseClaimFile(false);\n                  props.setClaimFileId(item.answer_sheet_id);\n                }}\n              >\n                <p className=\"text-base font-medium text-black\">\n                  {item.course_name}\n                </p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                onClick={() => {\n                  props.setViewThisFile(item.answer_sheet_id);\n                }}\n              >\n                View\n              </button>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No failed exam available\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  course,\n}: StoreState): {\n  courses: course[] | null;\n} => {\n  return {\n    courses: course.courses,\n  };\n};\nexport default connect(mapStateToProps, {})(FormExamList);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim, DocumentClaimUser } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { ClaimGetDocTitle } from \"./Candidate/ClaimForm\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisDoc: DocumentClaimUser;\n  // setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewImage: boolean;\n  setViewImage: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Title:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n              </span>\n            </div>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewImage(!props.viewImage)}\n            >\n              {props.viewImage ? \"Hide\" : \"View\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisDoc.validation_status === \"rejected\"\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n\n          {/* DISPLAY IMAGE ==================================================== */}\n          {props.viewImage && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn\">\n              <img\n                src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n                alt=\"doc file\"\n                className={`w-full animate__animated animate__fadeIn`}\n              />\n            </div>\n          )}\n          {/* END DISPLAY IMAGE ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import React from \"react\";\nimport { MdTurnedIn } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../../actions\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  claimApplicationsInterface,\n  claimApplicationsPositionInterface,\n} from \"../../../interfaces\";\nimport { ApplicationStates } from \"../../../interfaces/application\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { UserInterface } from \"../../../shared/interfaces\";\nimport { DATE } from \"../../../utils/functions\";\nimport { PositionRequirementTableInterface } from \"../../Positions/ViewPosition\";\nimport ViewRequirements from \"../../Positions/ViewRequirements\";\n\nexport const FC_ApplicationPositionDistinctCategory = (\n  thisPosition: claimApplicationsPositionInterface,\n  documentCategories: DocumentReducerInterface\n): {\n  PositionsTemp: PositionRequirementTableInterface[];\n  DistinctCategoriesTemp: PositionRequirementTableInterface[];\n  DistinctSubCategoriesTemp: PositionRequirementTableInterface[];\n} => {\n  let PositionsTemp: PositionRequirementTableInterface[] = [];\n  let DistinctCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctCategoriesIds: string[] = [];\n  let DistinctSubCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctSubCategoriesIds: string[] = [];\n  // GET REQUIREMENTS OF THE CURRENT POSITION ====================\n  let requirements = thisPosition.requirements;\n  // LOOP THROUGH CURRENT POSITION REQUIREMENTS ==========================\n  for (let req in requirements) {\n    let thisRequirements = requirements[req];\n    // GET DOC CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisCategory = documentCategories.documentCategory\n      ? documentCategories.documentCategory.find(\n          (item) =>\n            item.user_detail_category_id ===\n            thisRequirements.user_detail_category_id\n        ) && {\n          title: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.user_detail_category_id\n          )!.title,\n          user_detail_category_id: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.user_detail_category_id\n          )!.user_detail_category_id,\n        }\n      : {\n          title: \"\",\n          user_detail_category_id: thisRequirements.user_detail_category_id,\n        };\n    // GET DOC SUB CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisSubCategory = documentCategories.documentSubCategory\n      ? documentCategories.documentSubCategory.find(\n          (item) =>\n            item.user_detail_subcategory_id ===\n            thisRequirements.user_detail_subcategory_id\n        )\n        ? {\n            title: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.user_detail_subcategory_id\n            )!.title,\n            user_detail_subcategory_id:\n              documentCategories.documentSubCategory.find(\n                (item) =>\n                  item.user_detail_subcategory_id ===\n                  thisRequirements.user_detail_subcategory_id\n              )!.user_detail_subcategory_id,\n            category_id: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.user_detail_subcategory_id\n            )!.category_id,\n          }\n        : {\n            title: \"\",\n            user_detail_subcategory_id:\n              thisRequirements.user_detail_subcategory_id,\n            category_id: \"\",\n          }\n      : {\n          title: \"\",\n          user_detail_subcategory_id:\n            thisRequirements.user_detail_subcategory_id,\n          category_id: \"\",\n        };\n    // LOOP THROUGH FIELDS OF THE CURRENT POSITION REQUIREMENTS ==========================\n    if (thisCategory) {\n      for (let field in thisRequirements.position_requirement) {\n        // GET FIELDS OF THE CURRENT POSITION REQUIREMENTS ====================\n        let thisField = documentCategories.documentFields\n          ? documentCategories.documentFields.find(\n              (item) =>\n                item._id ===\n                thisRequirements.position_requirement[field]\n                  .category_subcategory_data_id\n            )\n            ? {\n                title: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]\n                      .category_subcategory_data_id\n                )!.title,\n                _id: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]\n                      .category_subcategory_data_id\n                )!._id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n            : {\n                title: \"\",\n                _id: thisRequirements.user_detail_subcategory_id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n          : {\n              title: \"\",\n              _id: thisRequirements.user_detail_subcategory_id,\n              required: thisRequirements.position_requirement[field].required,\n            };\n        // ADD CURRENT CATEGORY, SUB CATEGORY & FIELDS OF THE CURRENT POSITION REQUIREMENTS IN POSITIONS TEMP ====================\n        PositionsTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: thisField.title,\n          field_id: thisField._id,\n          required: thisField.required,\n        });\n      }\n\n      // ADD CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctCategoriesIds.includes(thisCategory.user_detail_category_id)\n      ) {\n        DistinctCategoriesIds.push(thisCategory.user_detail_category_id);\n        DistinctCategoriesTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: \"\",\n          subcategory_title: \"\",\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n\n      // ADD SUB CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctSubCategoriesIds.includes(\n          thisSubCategory.user_detail_subcategory_id\n        )\n      ) {\n        DistinctSubCategoriesIds.push(\n          thisSubCategory.user_detail_subcategory_id\n        );\n        DistinctSubCategoriesTemp.push({\n          category_id: thisSubCategory.category_id,\n          category_title: \"\",\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n    }\n  }\n  // DistinctCategoriesIds.;\n\n  return { PositionsTemp, DistinctCategoriesTemp, DistinctSubCategoriesTemp };\n};\n\nexport const showEvaluator = (\n  userList: UserInterface[],\n  user_id: string\n): string => {\n  let result: string = \"\";\n  if (user_id === \"system\") {\n    result = \"System\";\n  } else {\n    // let user = getUserDocuments(userList, user_id);\n    // let user = undefined;\n    // if (user) {\n    //   result = user.user.user_info.fname + \" \" + user.user.user_info.lname;\n    // }\n  }\n  return result;\n};\n\ntype ApplicationFormViewProps = {\n  thisApplication: claimApplicationsInterface;\n  setViewThisFile: (value: string) => void;\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n  PushPopupAlert: Function;\n};\n\nconst ApplicationFormView: React.FC<ApplicationFormViewProps> = (props) => {\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-gray-100 px-4 py-1 animate__animated animate__fadeIn\">\n        <div className=\"flex flex-col mb-2\">\n          {/* APPLICATION TITLE ========== */}\n          <section className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"btn btn-blue\"\n              onClick={() => {\n                props.setChooseClaimFile(false);\n                props.setClaimFileId(props.thisApplication.application_id);\n                props.setViewThisFile(\"\");\n              }}\n            >\n              Choose\n            </button>\n          </section>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisApplication.application_status ===\n                ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } py-1`}\n            >\n              {capitalizeFirstLetter(props.thisApplication.application_status)}\n            </span>\n          </div>\n          {/* <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {props.thisApplication.}\n            </span>\n          </div> */}\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-semibold text-gray-900\">\n              {props.thisApplication.override_by.comment}\n            </span>\n          </div>\n        </div>\n        <div className=\"bg-white w-full rounded p-2 mb-2\">\n          <div className=\"text-gray-800 text-2xl font-bold my-2\">\n            Position Details\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>Desc:</span>\n            <span className=\"font-semibold\">\n              {props.thisApplication.position.description}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>School level:</span>\n            <span className=\"font-semibold\">\n              {props.thisApplication.position.school_level_id.school_level_name}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>Institute:</span>\n            <span className=\"font-semibold\">\n              {\n                props.thisApplication.position.education_institute_id\n                  .education_category_title\n              }\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-base text-gray-600\">\n            <span className={`italic`}>Courses:</span>\n            <span className=\"flex items-center gap-2\">\n              {props.thisApplication.position.courses.map((item, index) => (\n                <div\n                  key={index + item.course_id}\n                  className=\"flex items-center gap-1\"\n                >\n                  <span className=\"font-semibold\">{item.course_name}</span>\n                  <span className=\"text-gray-600\">({item.course_code})</span>\n                  {index !==\n                    props.thisApplication.position.courses.length - 1 && \",\"}\n                </div>\n              ))}\n            </span>\n          </div>\n\n          <div className=\"text-gray-800 text-2xl font-bold my-2\">\n            Position Requirements\n          </div>\n          {props.thisApplication.position.requirements.length > 0 ? (\n            FC_ApplicationPositionDistinctCategory(\n              props.thisApplication.position,\n              props.documentCategories\n            ).DistinctCategoriesTemp.map((item, index) => (\n              <div\n                className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                key={index + item.category_id}\n              >\n                <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                  <MdTurnedIn />\n                  <span>{item.category_title}</span>\n                </div>\n                <div className=\"border bg-white mt-1\">\n                  <ViewRequirements\n                    requirements={FC_ApplicationPositionDistinctCategory(\n                      props.thisApplication.position,\n                      props.documentCategories\n                    ).PositionsTemp.filter(\n                      (req) => req.category_id === item.category_id\n                    )}\n                  />\n                </div>\n              </div>\n            ))\n          ) : (\n            <NoResult\n              theme={NoResultThemes.Dark}\n              value={\"No requirements\"}\n            ></NoResult>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default connect(null, { PushPopupAlert })(ApplicationFormView);\n","import React from \"react\";\nimport { AnswersDetails } from \"../../../components/AnswersDetails/AnswersDetails\";\nimport {\n  claimApplicationsPositionInterface,\n  ClaimExamResultsDetails,\n} from \"../../../interfaces\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { UserInterface } from \"../../../shared/interfaces\";\nimport { DATE } from \"../../../utils/functions\";\nimport { ExamDoneDetailsAnswers } from \"../../CandidateExams/CandidateExams\";\nimport { PositionRequirementTableInterface } from \"../../Positions/ViewPosition\";\n\nexport const FC_ApplicationPositionDistinctCategory = (\n  thisPosition: claimApplicationsPositionInterface,\n  documentCategories: DocumentReducerInterface\n): {\n  PositionsTemp: PositionRequirementTableInterface[];\n  DistinctCategoriesTemp: PositionRequirementTableInterface[];\n  DistinctSubCategoriesTemp: PositionRequirementTableInterface[];\n} => {\n  let PositionsTemp: PositionRequirementTableInterface[] = [];\n  let DistinctCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctCategoriesIds: string[] = [];\n  let DistinctSubCategoriesTemp: PositionRequirementTableInterface[] = [],\n    DistinctSubCategoriesIds: string[] = [];\n  // GET REQUIREMENTS OF THE CURRENT POSITION ====================\n  let requirements = thisPosition.requirements;\n  // LOOP THROUGH CURRENT POSITION REQUIREMENTS ==========================\n  for (let req in requirements) {\n    let thisRequirements = requirements[req];\n    // GET DOC CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisCategory = documentCategories.documentCategory\n      ? documentCategories.documentCategory.find(\n          (item) =>\n            item.user_detail_category_id ===\n            thisRequirements.user_detail_category_id\n        ) && {\n          title: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.user_detail_category_id\n          )!.title,\n          user_detail_category_id: documentCategories.documentCategory.find(\n            (item) =>\n              item.user_detail_category_id ===\n              thisRequirements.user_detail_category_id\n          )!.user_detail_category_id,\n        }\n      : {\n          title: \"\",\n          user_detail_category_id: thisRequirements.user_detail_category_id,\n        };\n    // GET DOC SUB CATEGORY OF THE CURRENT POSITION REQUIREMENTS ====================\n    let thisSubCategory = documentCategories.documentSubCategory\n      ? documentCategories.documentSubCategory.find(\n          (item) =>\n            item.user_detail_subcategory_id ===\n            thisRequirements.user_detail_subcategory_id\n        )\n        ? {\n            title: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.user_detail_subcategory_id\n            )!.title,\n            user_detail_subcategory_id:\n              documentCategories.documentSubCategory.find(\n                (item) =>\n                  item.user_detail_subcategory_id ===\n                  thisRequirements.user_detail_subcategory_id\n              )!.user_detail_subcategory_id,\n            category_id: documentCategories.documentSubCategory.find(\n              (item) =>\n                item.user_detail_subcategory_id ===\n                thisRequirements.user_detail_subcategory_id\n            )!.category_id,\n          }\n        : {\n            title: \"\",\n            user_detail_subcategory_id:\n              thisRequirements.user_detail_subcategory_id,\n            category_id: \"\",\n          }\n      : {\n          title: \"\",\n          user_detail_subcategory_id:\n            thisRequirements.user_detail_subcategory_id,\n          category_id: \"\",\n        };\n    // LOOP THROUGH FIELDS OF THE CURRENT POSITION REQUIREMENTS ==========================\n    if (thisCategory) {\n      for (let field in thisRequirements.position_requirement) {\n        // GET FIELDS OF THE CURRENT POSITION REQUIREMENTS ====================\n        let thisField = documentCategories.documentFields\n          ? documentCategories.documentFields.find(\n              (item) =>\n                item._id ===\n                thisRequirements.position_requirement[field]\n                  .category_subcategory_data_id\n            )\n            ? {\n                title: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]\n                      .category_subcategory_data_id\n                )!.title,\n                _id: documentCategories.documentFields.find(\n                  (item) =>\n                    item._id ===\n                    thisRequirements.position_requirement[field]\n                      .category_subcategory_data_id\n                )!._id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n            : {\n                title: \"\",\n                _id: thisRequirements.user_detail_subcategory_id,\n                required: thisRequirements.position_requirement[field].required,\n              }\n          : {\n              title: \"\",\n              _id: thisRequirements.user_detail_subcategory_id,\n              required: thisRequirements.position_requirement[field].required,\n            };\n        // ADD CURRENT CATEGORY, SUB CATEGORY & FIELDS OF THE CURRENT POSITION REQUIREMENTS IN POSITIONS TEMP ====================\n        PositionsTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: thisField.title,\n          field_id: thisField._id,\n          required: thisField.required,\n        });\n      }\n\n      // ADD CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctCategoriesIds.includes(thisCategory.user_detail_category_id)\n      ) {\n        DistinctCategoriesIds.push(thisCategory.user_detail_category_id);\n        DistinctCategoriesTemp.push({\n          category_id: thisCategory.user_detail_category_id,\n          category_title: thisCategory.title,\n          subcategory_id: \"\",\n          subcategory_title: \"\",\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n\n      // ADD SUB CATEOGRY OF THE CURRENT POSITION REQUIREMENTS TO ARRAY ====================\n      if (\n        !DistinctSubCategoriesIds.includes(\n          thisSubCategory.user_detail_subcategory_id\n        )\n      ) {\n        DistinctSubCategoriesIds.push(\n          thisSubCategory.user_detail_subcategory_id\n        );\n        DistinctSubCategoriesTemp.push({\n          category_id: thisSubCategory.category_id,\n          category_title: \"\",\n          subcategory_id: thisSubCategory.user_detail_subcategory_id,\n          subcategory_title: thisSubCategory.title,\n          subcategory_required: thisRequirements.required,\n          field_title: \"\",\n          field_id: \"\",\n          required: false,\n        });\n      }\n    }\n  }\n  // DistinctCategoriesIds.;\n\n  return { PositionsTemp, DistinctCategoriesTemp, DistinctSubCategoriesTemp };\n};\n\nexport const showEvaluator = (\n  userList: UserInterface[],\n  user_id: string\n): string => {\n  let result: string = \"\";\n  if (user_id === \"system\") {\n    result = \"System\";\n  } else {\n    // let user = getUserDocuments(userList, user_id);\n    // let user = undefined;\n    // if (user) {\n    //   result = user.user.user_info.fname + \" \" + user.user.user_info.lname;\n    // }\n  }\n  return result;\n};\n\nexport const claimShowAnswer = (\n  answer: ClaimExamResultsDetails,\n  course_name: string\n): ExamDoneDetailsAnswers => {\n  const result: ExamDoneDetailsAnswers = {\n    course: answer.course,\n    course_name: course_name,\n    discription: answer.discription,\n    termes: answer.termes,\n    rules: {\n      right_click_enabled: false,\n      copy_enabled: false,\n      paste_enabled: false,\n      stop_candidate_when_comeback: false,\n      allow_to_leave_browser: false,\n    },\n    period: answer.period,\n    exam_date: answer.exam_date,\n  };\n  return result;\n};\n\ntype ExaminationFormViewProps = {\n  thisAnswerSheet: ClaimExamResultsDetails;\n  setViewThisFile: (value: string) => void;\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n};\n\nconst ExaminationFormView: React.FC<ExaminationFormViewProps> = (props) => {\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-gray-100 px-4 py-1 animate__animated animate__fadeIn\">\n        <div className=\"flex flex-col mb-2\">\n          {/* APPLICATION TITLE ========== */}\n          <section className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisAnswerSheet.course_name}\n            </span>\n            <button\n              type=\"button\"\n              className=\"btn btn-blue\"\n              onClick={() => {\n                props.setChooseClaimFile(false);\n                props.setClaimFileId(props.thisAnswerSheet.answer_sheet_id);\n                props.setViewThisFile(\"\");\n              }}\n            >\n              Choose\n            </button>\n          </section>\n\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisAnswerSheet.createdAt)}\n            </span>\n          </div>\n        </div>\n        {/* QUESTIONS ----------------------------- */}\n        <AnswersDetails\n          showAnswers={false}\n          exam_id={claimShowAnswer(\n            props.thisAnswerSheet,\n            props.thisAnswerSheet.course_name\n          )}\n        />\n        {/* END QUESTIONS ----------------------------- */}\n      </div>\n    </section>\n  );\n};\n\nexport default ExaminationFormView;\n","import moment from \"moment\";\nimport React from \"react\";\nimport {\n  compareWithToday,\n  ExamDoneDetailsAnswers,\n} from \"../../containers/CandidateExams/CandidateExams\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { DATE } from \"../../utils/functions\";\nimport { AnswersDetails } from \"./AnswersDetails\";\n\ninterface CandidateAnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n}\n\nconst CandidateAnswersDetails = (props: CandidateAnswersDetailsProps) => {\n  const today = moment().tz(TimeZone);\n  let tomorrow = new Date();\n  tomorrow.setDate(today.date() + 1);\n  return (\n    <div>\n      {/* Check if period is open for claims */}\n      {compareWithToday(today, props.exam_id.exam_date) === false ? (\n        <div className=\"bg-yellow-100 text-yellow-800 font-extrabold text-center flex flex-col items-center justify-center text-lg px-2 py-6\">\n          <div className=\"mb-5 text-3xl\">\n            Please wait, the exam details will be visible soon!\n          </div>\n          <div className=\"text-gray-600\">Exam details will be visible from</div>\n          <div className=\"bg-white rounded-full px-3 py-1 text-gray-700\">\n            {DATE(tomorrow.toString())}\n          </div>\n        </div>\n      ) : (\n        <AnswersDetails\n          exam_id={props.exam_id}\n          showAnswers={props.showAnswers}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CandidateAnswersDetails;\n","import React, { Component } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { claimReasonInterface } from \"../../../interfaces\";\nimport search from \"../../../utils/search\";\n\nexport const claimReasonsData = [\n  { key: 1, reason: \"Not placed (Sinahawe umwanya)\" },\n  {\n    key: 2,\n    reason:\n      \"Not placed with higher marks (Sinahawe umwanya kandi hari abo ndusha twakoze bimwe bawuhawe)\",\n  },\n  {\n    key: 3,\n    reason:\n      \"Want to change district of placement (Nifuza guhindurirwa akarere nahawemo umwanya)\",\n  },\n  {\n    key: 4,\n    reason: \"Rejected offer by mistake (Nibeshye nanga umwanya nahawe)\",\n  },\n  {\n    key: 0,\n    reason: \"None of the above (nta na kimwe muri ibyo byavuzwe haruguru)\",\n  },\n];\n\ntype ChooseReasonProps = {\n  claimReason: claimReasonInterface | null;\n  setClaimReason: (value: claimReasonInterface | null) => void;\n  setChooseClaimReason: (value: boolean) => void;\n  allClaimReasons: claimReasonInterface[];\n};\n\ntype ChooseReasonState = {\n  searchInput: string;\n};\n\nclass ChooseReason extends Component<ChooseReasonProps, ChooseReasonState> {\n  constructor(props: ChooseReasonProps) {\n    super(props);\n\n    this.state = {\n      searchInput: \"\",\n    };\n  }\n\n  setSearchInput = (value: string) => {\n    this.setState({ searchInput: value });\n  };\n\n  render() {\n    return (\n      <div>\n        {/* SEARCH PART */}\n        <div className=\"flex items-center w-full my-1\">\n          <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n            onChange={(e) => this.setSearchInput(e.target.value)}\n            value={this.state.searchInput}\n          />\n          <button\n            className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n            type=\"button\"\n            onClick={() => this.props.setChooseClaimReason(false)}\n          >\n            Close\n          </button>\n        </div>\n        {/* END SEARCH PART ///////////////// */}\n\n        <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n          {search(this.props.allClaimReasons, this.state.searchInput).map(\n            (item: claimReasonInterface, index) => (\n              <section key={index.toString() + item.id}>\n                <div\n                  className={`py-1 w-full px-2 hover:bg-gray-100 cursor-pointer ${\n                    this.props.claimReason &&\n                    this.props.claimReason.id === item.id\n                      ? \"border-l-4 border-blue-500 bg-blue-50\"\n                      : \"my-1\"\n                  }`}\n                  onClick={() => {\n                    this.props.setChooseClaimReason(false);\n                    this.props.setClaimReason(item);\n                  }}\n                >\n                  <p className=\"text-base text-black\">{item.reason}</p>\n                </div>\n              </section>\n            )\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChooseReason;\n","import React from \"react\";\nimport { DocumentClaimUser } from \"../../../actions/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { API } from \"../../../utils/api\";\nimport { ClaimGetDocTitle } from \"./ClaimForm\";\n\ntype DocFormViewProps = {\n  thisDoc: DocumentClaimUser;\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  documentCategories: DocumentReducerInterface;\n};\n\nconst DocFormView: React.FC<DocFormViewProps> = (props) => {\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-gray-100 px-4 py-1 animate__animated animate__fadeIn\">\n        <div className=\"flex flex-col mb-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-xl\">\n              {ClaimGetDocTitle(props.documentCategories, props.thisDoc).main}\n            </span>\n            <button\n              type=\"button\"\n              className=\"btn btn-blue\"\n              onClick={() => {\n                props.setChooseClaimFile(false);\n                props.setClaimFileId(props.thisDoc.doc_id);\n                props.setViewThisFile(\"\");\n              }}\n            >\n              Choose\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span className=\"font-bold text-yellow-900 rounded px-3 py-1\">\n              {capitalizeFirstLetter(props.thisDoc.validation_status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              ################\n              {/* {loadingUsers ? (\n                <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n              ) : getUserDocuments(\n                  props.userList,\n                  props.thisDoc.validated_by.user_id\n                ) ? (\n                getUserDocuments(\n                  props.userList,\n                  props.thisDoc.validated_by.user_id\n                )!.user.user_info.fname +\n                \" \" +\n                getUserDocuments(\n                  props.userList,\n                  props.thisDoc.validated_by.user_id\n                )!.user.user_info.lname\n              ) : (\n                \"-\"\n              )} */}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisDoc.validated_by.comment}\n            </span>\n          </div>\n          <div className=\"w-full my-1\">\n            <img\n              src={`${API.AUTH_FILES}/${props.thisDoc.files}`}\n              alt=\"doc file\"\n              className={`w-full`}\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default DocFormView;\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { ApplicationSession } from \"../../../actions\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n} from \"../../../interfaces\";\nimport { ApplicationStates } from \"../../../interfaces/application\";\nimport { isClaimAllowed } from \"./ClaimForm\";\n\nconst getRejectedApplicants = (\n  applicationData: claimApplicationsInterface[]\n): claimApplicationsInterface[] => {\n  return applicationData.filter(\n    (item) => item.application_status === ApplicationStates.Rejected\n  );\n};\n\nexport const searchApplication = (\n  objList: claimApplicationsInterface[],\n  text: any\n): claimApplicationsInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (prop === \"position\") {\n        flag =\n          product.position.position_title\n            .toString()\n            .toLowerCase()\n            .indexOf(text.toLowerCase()) > -1;\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n  // return objList.filter((product) =>\n  //   product.position.position_title.includes(text)\n  // );\n};\n\ntype FormApplicationListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  candidateApplications: claimApplicationsInterface[];\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n};\n\nconst FormApplicationList: React.FC<FormApplicationListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            getRejectedApplicants(props.candidateApplications).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.application_id\n              )\n            ).length > 0\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}{\" \"}\n      {/* searchData(props.candidateApplications, searchInput) */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {getRejectedApplicants(props.candidateApplications).filter((item) =>\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            item.application_id\n          )\n        ).length > 0 ? (\n          searchApplication(\n            getRejectedApplicants(props.candidateApplications).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.application_id\n              )\n            ),\n            searchInput\n          ).map((item, index) => (\n            <div\n              className={`group flex items-center justify-between my-1 hover:bg-gray-100 ${\n                props.claimFileId === item.application_id &&\n                \"bg-blue-50 border-l-4 border-blue-500\"\n              }`}\n              key={index + item.application_id}\n            >\n              <div\n                className=\"p-1 w-full mr-2 cursor-pointer\"\n                onClick={() => {\n                  props.setChooseClaimFile(false);\n                  props.setClaimFileId(item.application_id);\n                }}\n              >\n                <p className=\"text-base font-medium text-black\">\n                  {item.position.position_title}\n                </p>\n              </div>\n              <button\n                type=\"button\"\n                className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                onClick={() => {\n                  props.setViewThisFile(item.application_id);\n                }}\n              >\n                View\n              </button>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No Rejected document available\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default FormApplicationList;\n","import React, { useState } from \"react\";\nimport { MdSearch } from \"react-icons/md\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { ClaimGetDocTitle, isClaimAllowed } from \"./ClaimForm\";\nimport { DocumentClaimUser } from \"../../../actions/claiming\";\nimport { CategorySubcategoryData } from \"../../../interfaces/candidatesInterfaces\";\nimport { CandidateClaimInterface } from \"../../../interfaces\";\nimport { ApplicationSession } from \"../../../actions\";\n\nexport interface DocumentTitleInterface {\n  category_id: string;\n  company: string;\n  description: string;\n  email: string;\n  end_year: string;\n  files: string;\n  names: string;\n  phone_number: string;\n  school: {\n    school_name: string;\n    _id: string;\n    status: boolean;\n    education_category_id?: {\n      education_category_title: string;\n      _id: string;\n    };\n    district_id?: {\n      district_name: string;\n      _id: string;\n    };\n  } | null;\n  school_id: string;\n  start_year: string;\n  sub_category_id: string;\n  title: string;\n  year: string;\n  validation_status: string;\n  validated_by: {\n    user_id: string;\n    comment: string;\n    validation_status: string;\n    date: string;\n  };\n  doc_id: string;\n  doc_title: string;\n  category_subcategory_data: CategorySubcategoryData | null;\n}\n\nexport const DocumentTitleData = (\n  documentData: DocumentClaimUser[],\n  documentCategories: DocumentReducerInterface\n): DocumentTitleInterface[] | [] => {\n  let documentTemp: DocumentTitleInterface[] = [];\n  for (let i in documentData) {\n    documentTemp.push({\n      category_id: documentData[i].category_id,\n      company: documentData[i].company,\n      description: documentData[i].description,\n      email: documentData[i].email,\n      end_year: documentData[i].end_year,\n      files: documentData[i].files,\n      names: documentData[i].names,\n      phone_number: documentData[i].phone_number,\n      school: documentData[i].school,\n      school_id: documentData[i].school_id,\n      start_year: documentData[i].start_year,\n      sub_category_id: documentData[i].sub_category_id,\n      title: documentData[i].title,\n      year: documentData[i].year,\n      validation_status: documentData[i].validation_status,\n      validated_by: documentData[i].validated_by,\n      doc_id: documentData[i].doc_id,\n      doc_title: ClaimGetDocTitle(documentCategories, documentData[i]).main,\n      category_subcategory_data: documentData[i].category_subcategory_data,\n    });\n  }\n  return documentTemp;\n};\n\nconst getRejectedDocuments = (\n  documentData: DocumentClaimUser[]\n): DocumentClaimUser[] => {\n  console.log({\n    rejected: documentData.filter(\n      (item) => item.validation_status === \"rejected\"\n    ),\n  });\n  return documentData.filter((item) => item.validation_status === \"rejected\");\n};\n\nexport const searchDocuments = (\n  objList: DocumentTitleInterface[],\n  text: any\n): DocumentTitleInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter(\n    (product) =>\n      product.doc_title.toString().toLowerCase().indexOf(text.toLowerCase()) >\n      -1\n  );\n};\n\ntype FormDocumentListProps = {\n  setChooseClaimFile: (value: boolean) => void;\n  setClaimFileId: (value: string) => void;\n  setViewThisFile: (value: string) => void;\n  claimFileId: string;\n  viewThisFile: string;\n  candidateDocuments: DocumentClaimUser[];\n  documentCategories: DocumentReducerInterface;\n  myClaims: CandidateClaimInterface[];\n  activeSession: ApplicationSession;\n};\n\nconst FormDocumentList: React.FC<FormDocumentListProps> = (props) => {\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  return (\n    <section>\n      {/* SEARCH PART */}\n      <div className=\"flex items-center w-full my-1\">\n        <MdSearch className=\"w-6 h-6 absolute ml-2\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"focus:border-2 h-7 ml-1 pl-9 mr-2 bg-gray-100 focus:border-gray-700 w-full rounded\"\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n          disabled={\n            DocumentTitleData(\n              getRejectedDocuments(props.candidateDocuments),\n              props.documentCategories\n            ).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.doc_id\n              )\n            ).length > 0\n              ? false\n              : true\n          }\n        />\n        <button\n          className=\"bg-red-200 text-red-700 py-1 px-2 mr-1 rounded text-sm focus:outline-none\"\n          type=\"button\"\n          onClick={() => {\n            props.setChooseClaimFile(false);\n            props.setViewThisFile(\"\");\n          }}\n        >\n          Close\n        </button>\n      </div>\n      {/* END SEARCH PART ///////////////// */}\n      <div className=\"w-full h-52 mt-2 overflow-y-auto divide-y divide-gray-300\">\n        {props.candidateDocuments.filter((item) =>\n          isClaimAllowed(\n            props.myClaims,\n            props.activeSession.session_plan_id,\n            item.doc_id\n          )\n        ).length > 0 ? (\n          searchDocuments(\n            DocumentTitleData(\n              getRejectedDocuments(props.candidateDocuments),\n              props.documentCategories\n            ).filter((item) =>\n              isClaimAllowed(\n                props.myClaims,\n                props.activeSession.session_plan_id,\n                item.doc_id\n              )\n            ),\n            searchInput\n          ).map((doc, index) => (\n            <section key={index + doc.doc_id}>\n              <div\n                className={`group flex items-center justify-between my-1 hover:bg-gray-100 ${\n                  props.claimFileId === doc.doc_id &&\n                  \"bg-blue-50 border-l-4 border-blue-500\"\n                }`}\n              >\n                <div\n                  className=\"p-1 w-full mr-2 cursor-pointer\"\n                  onClick={() => {\n                    props.setChooseClaimFile(false);\n                    props.setClaimFileId(doc.doc_id);\n                  }}\n                >\n                  <p className=\"text-base font-medium text-black\">\n                    {ClaimGetDocTitle(props.documentCategories, doc).main}\n                  </p>\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n                  onClick={() => {\n                    props.viewThisFile === doc.doc_id\n                      ? props.setViewThisFile(\"\")\n                      : props.setViewThisFile(doc.doc_id);\n                  }}\n                >\n                  {props.viewThisFile === doc.doc_id ? \"Close\" : \"View\"}\n                </button>\n              </div>\n            </section>\n          ))\n        ) : (\n          <div className=\"text-center p-3\">\n            <p className=\"text-base font-medium text-black\">\n              No Rejected document available\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default FormDocumentList;\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { VscLoading } from \"react-icons/vsc\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../../actions\";\nimport { updateSessionPlan } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport {\n  allPlanTypes,\n  PlansInterface,\n  PlansTypeInterface,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  SessionPlanTypeStatus,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { API } from \"../../../utils/api\";\nimport { DATE, errorToText } from \"../../../utils/functions\";\n\nexport const isActivationAllowed = (thisPlans: PlansInterface): boolean => {\n  let today: Date = new Date(),\n    end_date = new Date(thisPlans.end_date);\n  if (end_date.getTime() >= today.getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport const getPlanTypeByKey = (\n  type_key: PlansTypeKeys\n): PlansTypeInterface | undefined => {\n  return allPlanTypes.find((item) => item.type_key === type_key);\n};\n\nexport const isPlanActive = (\n  viewThisSession: SessionPlanInterface,\n  thisPlan: PlansInterface\n): \"OPEN\" | \"CLOSED\" | \"WAITING\" => {\n  if (viewThisSession.is_active) {\n    let today = new Date(),\n      planEndDate = new Date(thisPlan.end_date),\n      planStartDate = new Date(thisPlan.start_date);\n    if (\n      planEndDate.getTime() >= today.getTime() &&\n      planStartDate.getTime() <= today.getTime() &&\n      thisPlan.type_status !== SessionPlanTypeStatus.CLOSED\n    ) {\n      return \"OPEN\";\n    } else if (\n      planStartDate.getTime() > today.getTime() &&\n      thisPlan.type_status !== SessionPlanTypeStatus.CLOSED\n    ) {\n      return \"WAITING\";\n    }\n  }\n  return \"CLOSED\";\n};\n\ntype SessionDetailsProps = {\n  viewThisSession: SessionPlanInterface;\n  setViewThisSession: (data: SessionPlanInterface) => void;\n\n  // REDUX ----------------\n  updateSessionPlan: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype SessionDetailsState = {\n  loadingRequest: string;\n};\n\nexport class SessionDetails extends Component<\n  SessionDetailsProps,\n  SessionDetailsState\n> {\n  constructor(props: SessionDetailsProps) {\n    super(props);\n\n    this.state = {\n      loadingRequest: \"\",\n    };\n  }\n\n  handlePlanActivation = async (\n    session: SessionPlanInterface,\n    thisPlan: PlansInterface\n  ) => {\n    const newState: \"open\" | \"close\" = session.is_active ? \"close\" : \"open\";\n\n    if (!window.confirm(`Are you sure you want to ${newState} this plan?`)) {\n      return true;\n    }\n\n    if (!isActivationAllowed(thisPlan)) {\n      this.props.PushPopupAlert({\n        title: `Opening/Closing plan which has been expired is not allowed!`,\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    let newData: SessionPlanInterface = {\n      session_plan_name: session.session_plan_name,\n      period: session.period,\n      is_active: session.is_active,\n      plans: [],\n      createdAt: session.createdAt,\n      updatedAt: session.updatedAt,\n      session_plan_id: session.session_plan_id,\n    };\n    for (const key in session.plans) {\n      if (Object.prototype.hasOwnProperty.call(session.plans, key)) {\n        const element = session.plans[key];\n        if (thisPlan.type_key === element.type_key) {\n          if (thisPlan.type_status === SessionPlanTypeStatus.OPEN) {\n            newData.plans.push({\n              type_id: thisPlan.type_id,\n              type_title: thisPlan.type_title,\n              type_key: thisPlan.type_key,\n              type_status: SessionPlanTypeStatus.CLOSED,\n              start_date: thisPlan.start_date,\n              end_date: thisPlan.end_date,\n              allowed_claim_level: thisPlan.allowed_claim_level,\n              _id: thisPlan._id,\n              history: thisPlan.history,\n            });\n          } else {\n            newData.plans.push({\n              type_id: thisPlan.type_id,\n              type_title: thisPlan.type_title,\n              type_key: thisPlan.type_key,\n              type_status: SessionPlanTypeStatus.OPEN,\n              start_date: thisPlan.start_date,\n              end_date: thisPlan.end_date,\n              allowed_claim_level: thisPlan.allowed_claim_level,\n              _id: thisPlan._id,\n              history: thisPlan.history,\n            });\n          }\n        } else {\n          newData.plans.push(element);\n        }\n      }\n    }\n\n    console.log(\"====================================\");\n    console.log({ newData });\n    console.log(\"====================================\");\n\n    this.setState({ loadingRequest: thisPlan.type_key });\n    try {\n      const res = await axios.put<SessionPlanInterface>(\n        `${API.CLAIMING}/session/${session.session_plan_id}`,\n        newData\n      );\n      this.props.updateSessionPlan(res.data);\n      this.props.setViewThisSession(res.data);\n      this.props.PushPopupAlert({\n        title: `Session ${newState}d successfully`,\n        theme: PopupAlertTheme.info,\n      });\n      this.setState({ loadingRequest: \"\" });\n      console.log(\"updateSessionPlan: \", res);\n    } catch (error) {\n      console.error({ error: errorToText(error) });\n      this.props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.warning,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <table className=\"w-full bg-white shadow p-5\" id=\"session_content\">\n        <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n          <tr>\n            <td className=\"p-2\">#</td>\n            <td className=\"p-2\">Plan Type</td>\n            <td className=\"p-2\">Start Date</td>\n            <td className=\"p-2\">End date</td>\n            {this.props.viewThisSession.is_active && (\n              <td className=\"p-2\" colSpan={2}>\n                Status\n              </td>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {/* WHILE DATA FOUND ====================== */}\n          {this.props.viewThisSession.plans.map((item, index) => (\n            <tr\n              key={index + item._id}\n              className={`border-b border-gray-200 hover:bg-gray-100`}\n            >\n              <td className=\"p-2 text-left whitespace-nowrap\">{index + 1}</td>\n              <td className=\"p-2 text-left\">\n                <span className=\"text-lg\">\n                  {getPlanTypeByKey(item.type_key) &&\n                    capitalizeFirstLetter(\n                      getPlanTypeByKey(item.type_key)!.type_title\n                    )}\n                </span>\n              </td>\n              <td className=\"p-2 text-left\">{DATE(item.start_date)}</td>\n              <td className=\"p-2 text-left\">{DATE(item.end_date)}</td>\n              {this.props.viewThisSession.is_active && (\n                <td>\n                  {isPlanActive(this.props.viewThisSession, item) === \"OPEN\" ? (\n                    <span className={`px-2 py-1 font-semibold text-green-700`}>\n                      Open\n                    </span>\n                  ) : isPlanActive(this.props.viewThisSession, item) ===\n                    \"WAITING\" ? (\n                    <span className={`px-2 py-1 font-semibold text-gray-700`}>\n                      Waiting\n                    </span>\n                  ) : (\n                    <span className={`px-2 py-1 font-semibold text-red-700`}>\n                      Closed\n                    </span>\n                  )}\n                </td>\n              )}\n              {this.props.viewThisSession.is_active && (\n                <td>\n                  {isActivationAllowed(item) && (\n                    <div className=\"flex items-center justify-center gap-1\">\n                      <div\n                        className={`relative ${\n                          this.state.loadingRequest.length > 0\n                            ? \"cursor-not-allowed\"\n                            : \"cursor-pointer\"\n                        }`}\n                        title={\n                          item.type_status === SessionPlanTypeStatus.OPEN\n                            ? \"Deactivating session\"\n                            : \"Activating session\"\n                        }\n                        onClick={() =>\n                          this.state.loadingRequest.length <= 0 &&\n                          this.handlePlanActivation(\n                            this.props.viewThisSession,\n                            item\n                          )\n                        }\n                      >\n                        <span className=\"block w-14 h-8 bg-gray-100 rounded-full shadow-inner\"></span>\n                        <span\n                          className={`absolute block w-6 h-6 mt-1 ml-1 rounded-full shadow inset-y-0 left-0 focus-within:shadow-outline transition-transform duration-500 ease-in-out ${\n                            item.type_status === SessionPlanTypeStatus.CLOSED\n                              ? \"bg-red-500\"\n                              : \"bg-green-500 transform translate-x-full\"\n                          }`}\n                        ></span>\n                      </div>\n                      {this.state.loadingRequest === item.type_key && (\n                        <VscLoading className=\"animate__animated animate__rotateIn animate__infinite\" />\n                      )}\n                    </div>\n                  )}\n                </td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default connect(null, {\n  updateSessionPlan,\n  PushPopupAlert,\n})(SessionDetails);\n","import React, { Component, Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI, PositionAPICourse } from \"../../interfaces\";\nimport {\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\nimport { MdClose } from \"react-icons/md\";\nimport ChooseExamCenter, {\n  LocationTableInterface,\n} from \"../Application/ExamCenter/ChooseExamCenter\";\nimport { sentExamInterface } from \"../Application/ExamCenter/ExamCenter\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\n\nexport const compareWithToday = (tooday: moment.Moment, date: string) => {\n  const myDate = DATE(date, \"MM/DD/YYYY\");\n  let todayConverted =\n    (tooday.get(\"month\") < 9 ? \"0\" : \"\") +\n    (tooday.get(\"month\") + 1).toString() +\n    \"/\" +\n    tooday.get(\"date\") +\n    \"/\" +\n    tooday.get(\"year\");\n  if (new Date(myDate).getTime() < new Date(todayConverted).getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport interface ExamDoneDetailsAnswers {\n  course: string;\n  course_name: string;\n  discription: string;\n  termes: string;\n  rules: {\n    right_click_enabled: boolean;\n    copy_enabled: boolean;\n    paste_enabled: boolean;\n    stop_candidate_when_comeback: boolean;\n    allow_to_leave_browser: boolean;\n  };\n  period: string;\n  exam_date: string;\n}\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface changeLocProps {\n  changeLocation: () => void;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (exam_id: string) => void;\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\n\nconst ChangeLocationComponent = (props: changeLocProps): JSX.Element => {\n  const [display, setDisplay] = useState<boolean>(true);\n  if (display === false) {\n    return <div></div>;\n  }\n  return (\n    <div className=\"absolute right-2 left-2 md:right-1/4 md:left-1/4 lg:left-1/2 lg:right-auto bg-yellow-50 shadow-xl rounded py-1 px-1 flex flex-row justify-between items-center gap-2 text-yellow-800 -mt-5 lg:-mt-8\">\n      <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-1\">\n        <span className=\"font-bold\">You are advised to change location</span>\n        <div\n          onClick={props.changeLocation}\n          className=\"px-2 py-1 rounded bg-blue-100 text-blue-600 w-max cursor-pointer\"\n        >\n          Change\n        </div>\n      </div>\n      <div\n        onClick={() => setDisplay(false)}\n        className=\"bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center p-1 h-8 w-8 cursor-pointer\"\n      >\n        <MdClose className=\"text-4xl\" />\n      </div>\n    </div>\n  );\n};\n\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  loadingExamsDone: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n  selectedCourse: course | null;\n  centersModal: boolean;\n  maxExamModal: boolean;\n  selectedPosition: string;\n  successMessage: string;\n  selectedExam: ExamDoneDetailsAnswers | null;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingExamsDone: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n      selectedCourse: null,\n      centersModal: false,\n      maxExamModal: false,\n      selectedPosition: \"\",\n      successMessage: \"\",\n      selectedExam: null,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setloadingExamsDone = (status: boolean) => {\n    this.setState({ loadingExamsDone: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      // console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  InitializationFn = (application: GetApplicationsAPI) => {\n    if (this.props.candidateExam.user_exams_done.length === 0) {\n      this.props.loadExamsDone(\n        application.application_session.session_plan_id,\n        this.props.auth.user.user_id,\n        this.setloadingExamsDone\n      );\n    }\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          this.props.InitializeExamDetails(\n            application.application_session.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            application.position.position_id,\n            this.setLoading\n          );\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.setLoading(true);\n    try {\n      const res = await axios.get<GetApplicationsAPI[]>(\n        `${API.APPLICATION}/application/${this.props.auth.user.user_id}`\n      );\n      if (res.status === 200) {\n        this.setState({ candidateApplications: res.data });\n        for (let application of res.data) {\n          this.InitializationFn(application);\n        }\n        if (\n          this.props.candidateApplications.candidate_applications === null ||\n          this.props.candidateApplications.candidate_applications.length === 0\n        ) {\n          for (let application of res.data) {\n            this.props.AddUserApplication(application);\n          }\n        }\n      }\n    } catch (error: any) {\n      console.log(\"Appl ex Err: \", { ...error });\n    }\n    this.setLoading(false);\n  };\n  findLocation = (position_id: string, course_id: string) => {\n    if (this.state.candidateApplications !== null) {\n      const test = this.state.candidateApplications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.exams.filter((itm) => itm.course_id === course_id)\n      );\n      if (test !== undefined) {\n        let course = test.exams.find((itm) => itm.course_id === course_id);\n        if (course !== undefined) {\n          return course;\n        }\n      }\n    }\n    return null;\n  };\n  updateLocation = async (\n    application_id: string,\n    exams: sentExamInterface[]\n  ) => {\n    this.setState({ loading: true });\n    for (let i in exams) {\n      try {\n        const res = await axios.post(\n          `${API.APPLICATION}/application/updatemissed`,\n          {\n            application_id: application_id,\n            exams: exams[i],\n          }\n        );\n        if (res.status === 200) {\n          this.setState({\n            selectedCourse: null,\n            centersModal: false,\n            maxExamModal: false,\n            selectedPosition: \"\",\n            successMessage: \"Location updated successfully!\",\n          });\n          this.loadUserApplications();\n        }\n      } catch (error: any) {\n        console.log(\"Update loc err: \", { ...error });\n      }\n    }\n  };\n  updateLocationFunction = (exams: sentExamInterface[]) => {\n    if (this.state.candidateApplications !== null) {\n      let application = this.state.candidateApplications.find(\n        (item) => item.position.position_id === this.state.selectedPosition\n      );\n      if (application !== undefined) {\n        this.updateLocation(application.application_id, exams);\n      } else {\n        alert(\"Invalid application\");\n      }\n    } else {\n      alert(\"Missing application\");\n    }\n  };\n  addLocation = (\n    course_id: string,\n    course_name: string,\n    course_code: string,\n    location: LocationTableInterface,\n    exam_id: string\n  ) => {\n    return this.updateLocationFunction([\n      {\n        course_id: course_id,\n        proctoring_type: \"Center\",\n        center_id: location.center_id,\n        district_id: location.district_id,\n      },\n    ]);\n  };\n  componentDidMount = () => {\n    this.props.loadApplicationPeriods(this.setLoading);\n\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    this.loadUserApplications();\n    if (this.props.auth.application_session !== null) {\n      this.loadCandidateExams(\n        this.props.auth.user.user_id,\n        this.props.auth.application_session.session_plan_id\n      );\n    }\n    if (this.props.auth.application_session !== null) {\n      this.props.loadExamsDone(\n        this.props.auth.application_session.session_plan_id,\n        this.props.auth.user.user_id,\n        this.setloadingExamsDone\n      );\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    if (this.state.candidateApplications !== null) {\n      for (let item of exams) {\n        if (\n          this.state.candidateApplications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm._id === item._id) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    if (this.state.candidateApplications !== null) {\n      for (let item of exams) {\n        if (\n          this.state.candidateApplications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm.course === item.course) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string\n  ): GetApplicationsAPI | null => {\n    if (applications !== null) {\n      let temp = applications.find(\n        (item) => item.position.position_id === position_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  setMaxExamModal = (status: boolean) => {\n    this.setState({ maxExamModal: status });\n  };\n\n  changeLocation = (item: PositionAPICourse) => {\n    this.setState({ selectedCourse: item, centersModal: true });\n    this.setMaxExamModal(true);\n  };\n\n  closeModal = () => {\n    this.setState({ centersModal: false });\n    this.setMaxExamModal(false);\n  };\n\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (this.props.candidateExam.selected_exam_id !== null) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.selectedCourse === null ? (\n          <div className=\"mt-2 -ml-2 mr-3 pb-5\">\n            <div className=\"rounded mt-2\">\n              <div className=\"flex flex-row items-center gap-3\">\n                <Link\n                  to=\"/apps-page\"\n                  title=\"Back to menus\"\n                  className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n                >\n                  <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n                </Link>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-3xl\">My exams</span>\n                  <span className=\"text-gray-600 text-sm\">\n                    List of exams that are assigned to me\n                  </span>\n                </div>\n              </div>\n            </div>\n            {this.state.successMessage !== \"\" && (\n              <div\n                title=\"Click to close the message\"\n                onClick={() => this.setState({ successMessage: \"\" })}\n                className=\"animate__animated animate__zoomIn px-3 py-2 bg-green-500 text-white my-2 rounded cursor-pointer\"\n              >\n                {this.state.successMessage}\n              </div>\n            )}\n            {this.state.loading === true ||\n            this.state.loadingExamsDone === true ||\n            this.state.candidateExams === null ||\n            this.state.candidateApplications == null ? (\n              <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n                <Loading />\n              </div>\n            ) : this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).length === 0 ? (\n              <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n                No exams found\n              </div>\n            ) : (\n              this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).map((item, i) => (\n                <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div>\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                          <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                            Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-gray-100 underline text-gray-500  font-bold rounded-full px-2\">\n                            Start time: {item.start_time}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-blue-100 text-blue-900  font-bold rounded-full px-2\">\n                            Status: {item.user_status}\n                          </div>\n                        </div>\n                        {this.findLocation(item.position, item.course) !==\n                          null && (\n                          <div className=\"flex flex-row items-center gap-2 mt-2\">\n                            <div>\n                              Exam center:{\" \"}\n                              <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                {\n                                  this.findLocation(item.position, item.course)\n                                    ?.center_name\n                                }\n                              </span>\n                            </div>\n                            <div className=\"w-max flex flex-col md:flex-row\">\n                              Room number:{\" \"}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 ? (\n                                <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                  Waiting room\n                                </span>\n                              ) : (\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.room_number\n                                  }\n                                </span>\n                              )}\n                              {/* Change loc */}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 &&\n                                validateExamDate(\n                                  item.exam_date,\n                                  item.start_time,\n                                  item.end_time\n                                ) !== ExamTimeStatus.Expired && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"lg:w-full flex flex-row items-center justify-end\">\n                      {this.state.activeExams.find(\n                        (itm) => itm === item._id\n                      ) !== undefined ||\n                      item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Paused ? (\n                        validateExamDate(\n                          item.exam_date,\n                          item.start_time,\n                          item.end_time\n                        ) !== ExamTimeStatus.Expired ? (\n                          this.selectApplication(\n                            this.state.candidateApplications,\n                            item.position,\n                            item.course\n                          )?.application_status !==\n                          ApplicationStates.Shortlisted ? (\n                            <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                              Not shortlisted\n                            </div>\n                          ) : (\n                            <div\n                              onClick={() => {\n                                let application = this.selectApplication(\n                                  this.state.candidateApplications,\n                                  item.position,\n                                  item.course\n                                );\n                                if (application !== null) {\n                                  if (\n                                    application.application_status ===\n                                    ApplicationStates.Shortlisted\n                                  ) {\n                                    // Select exam\n                                    this.props.setSelectedPosition(\n                                      application.position\n                                    );\n                                    this.props.setSelectedCourse(\n                                      application.position.courses.find(\n                                        (itm) => itm.course_id === item.course\n                                      )!\n                                    );\n                                    this.props.setSelectedCandidateExam(\n                                      item._id\n                                    );\n                                  } else {\n                                    alert(\n                                      \"Corresponding application is not shortlisted!\"\n                                    );\n                                  }\n                                } else {\n                                  alert(\"Invalid exam!\");\n                                }\n                              }}\n                              className={`${\n                                item.user_status === UserExamStatus.Editing ||\n                                item.user_status === UserExamStatus.Paused\n                                  ? \"bg-green-600 group-hover:bg-green-800\"\n                                  : \"bg-blue-600 group-hover:bg-blue-800\"\n                              } btn  text-white cursor-pointer w-max`}\n                            >\n                              {item.user_status === UserExamStatus.Editing\n                                ? \"Back to Exam\"\n                                : item.user_status === UserExamStatus.Paused\n                                ? \"Paused, back to exam\"\n                                : \"Start Exam\"}\n                            </div>\n                          )\n                        ) : item.user_status === UserExamStatus.Editing ||\n                          item.user_status === UserExamStatus.Done ||\n                          item.user_status === UserExamStatus.Paused ||\n                          item.user_status === UserExamStatus.Removed ? (\n                          <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                            <span>Marks</span>\n                            <span className=\"text-2xl font-extrabold -mt-2\">\n                              {item.user_marks.toFixed(2)}%\n                            </span>\n                            <div\n                              onClick={() =>\n                                this.setState({\n                                  selectedExam: {\n                                    course: item.course,\n                                    course_name: item.course_name,\n                                    discription: item.discription,\n                                    termes: item.termes,\n                                    rules: item.rules,\n                                    period: item.period,\n                                    exam_date: item.exam_date,\n                                  },\n                                })\n                              }\n                              className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                            >\n                              Check details\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                            Expired\n                          </div>\n                        )\n                      ) : item.found === false ? (\n                        <div\n                          title=\"Please wait for the exam time\"\n                          className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                        >\n                          <CountDown\n                            start_time={new Date(today.toString()).toString()}\n                            duration_min={getMinutesFromTwoDates(\n                              new Date(today.toString()),\n                              new Date(\n                                DATE(item.exam_date, \"MM/DD/YYYY\") +\n                                  \" \" +\n                                  item.start_time\n                              )\n                            )}\n                            timeout={() => this.setTimeOut(item._id)}\n                            returnString={true}\n                            labels={true}\n                            days\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                          <span>Marks</span>\n                          <span className=\"text-2xl font-extrabold -mt-2\">\n                            {item.user_marks.toFixed(2)}%\n                          </span>\n                          <div\n                            onClick={() =>\n                              this.setState({\n                                selectedExam: {\n                                  course: item.course,\n                                  course_name: item.course_name,\n                                  discription: item.discription,\n                                  termes: item.termes,\n                                  rules: item.rules,\n                                  period: item.period,\n                                  exam_date: item.exam_date,\n                                },\n                              })\n                            }\n                            className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                          >\n                            Check details\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {/* Not prepared exams */}\n            {this.state.candidateExams !== null &&\n              this.state.loading !== true &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).length > 0 &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).map((item, i) => (\n                <div\n                  key={i + 1}\n                  className=\"my-2 rounded bg-white p-2 py-3 group\"\n                >\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div className=\"\">\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-base text-gray-600 font-bold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                          {this.findLocation(item.position, item.course) !==\n                            null && (\n                            <div className=\"flex flex-row items-center gap-2 mt-2\">\n                              <div className=\"flex flex-col md:flex-row md:items-center\">\n                                Exam center:{\" \"}\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.center_name\n                                  }\n                                </span>\n                              </div>\n                              <div className=\"w-max flex flex-col md:flex-row md:items-center\">\n                                Room number:{\" \"}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 ? (\n                                  <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                    Waiting room\n                                  </span>\n                                ) : (\n                                  <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                    {\n                                      this.findLocation(\n                                        item.position,\n                                        item.course\n                                      )?.room_number\n                                    }\n                                  </span>\n                                )}\n                                {/* Change loc */}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                      Not prepared\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : this.state.loading === true ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : (\n          <div className=\"animate__animated animate__fadeInUp animate__faster mt-2 mr-1 -ml-3 rounded-t-md bg-white shadow-md pb-5\">\n            <div className=\"flex flex-row gap-4 items-center justify-between bg-blue-100 py-2 px-2 mb-2\">\n              <div className=\"flex flex-col w-full\">\n                <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-2\">\n                  <span className=\"font-bold text-xl text-gray-800\">\n                    Change exam location\n                  </span>\n                  <div className=\"bg-white hover:text-yellow-700 hover:bg-white rounded-full p-1 h-10 w-10 border-2 border-white hover:border-yellow-600 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => {\n                        this.setState({\n                          centersModal: false,\n                          selectedCourse: null,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ChooseExamCenter\n              positionCourses={this.state.selectedCourse}\n              addLocation={this.addLocation}\n              closeModal={this.closeModal}\n            />\n          </div>\n        )}\n        {this.state.selectedExam !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600 px-2\">\n                Exam result details\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectedExam: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <CandidateAnswersDetails\n              exam_id={this.state.selectedExam}\n              showAnswers={false}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    periods: periods,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  getAllClaims,\n  GetClaimingTypes,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\nexport const filterClaimsByClaimType = (\n  claimList: CandidateClaimInterface[],\n  claimType: PlansTypeKeys | \"all\"\n): CandidateClaimInterface[] => {\n  if (claimType === \"all\") {\n    return claimList;\n  }\n\n  return claimList.filter((item) => item.type_key === claimType);\n};\n\ntype AdminFilterByTypeProps = {\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getAllClaims: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst AdminFilterByType: React.FC<AdminFilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n          setLoading(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n      setLoading(false);\n    }\n  }, [loadingClaimTypes, props]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.allClaims && thisType === \"all\") {\n      result = claiming.allClaims.filter(\n        (item) => item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n    if (claiming.allClaims && thisType !== \"all\") {\n      result = claiming.allClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status === ClaimStatus.PENDING\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && props.claiming.claimTypes && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default connect(mapStateToProps, {\n  GetClaimingTypes,\n  setSelectedClaimType,\n  getAllClaims,\n  PushPopupAlert,\n})(AdminFilterByType);\n","import React from \"react\";\nimport { AiFillDashboard } from \"react-icons/ai\";\nimport { SessionPlanInterface } from \"../../interfaces\";\n\ntype ClaimHeaderTitleProps = {\n  headerTitle: string;\n  loading: boolean;\n  loadingSession: boolean;\n  periodChanged: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  setThisPeriod: (state: SessionPlanInterface | null) => void;\n  setLoadingSession: (state: boolean) => void;\n  application_sessions: SessionPlanInterface[];\n  onPeriodChange: (period_id: string) => void;\n};\n\nconst selectPeriod = (\n  sessions: SessionPlanInterface[],\n  period_id: string,\n  setThisPeriod: (state: SessionPlanInterface | null) => void\n) => {\n  setThisPeriod(\n    sessions.filter((item) => item.session_plan_id === period_id)[0]\n  );\n};\n\nconst ClaimHeaderTitle: React.FC<ClaimHeaderTitleProps> = (props) => {\n  const isLoading = (): boolean => {\n    if (props.loading || props.loadingSession || props.periodChanged) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"mt-3 rounded flex flex-col md:flex-row md:justify-between items-start\">\n      <div className=\"flex flex-row items-center gap-3 mb-2\">\n        <AiFillDashboard className=\"text-6xl text-blue-600 hidden md:block\" />\n        <div className=\"flex flex-col\">\n          <span className=\"text-blue-600 text-3xl font-bold\">\n            {props.headerTitle}\n          </span>\n        </div>\n      </div>\n\n      {/* FILTER SECTION PERIOD && EDUCATION */}\n      <section className=\"w-full md:w-auto my-2 md:my-0\">\n        <div>\n          <select\n            className={`bg-white text-gray-600 border border-gray-400 rounded p-2 focus:outline-none ${\n              isLoading() ? \"cursor-wait\" : \"cursor-default\"\n            }`}\n            value={props.thisPeriod ? props.thisPeriod.session_plan_id : \"\"}\n            disabled={isLoading()}\n            onChange={(e) => {\n              selectPeriod(\n                props.application_sessions,\n                e.target.value,\n                props.setThisPeriod\n              );\n              props.setLoadingSession(true);\n              props.onPeriodChange(e.target.value);\n            }}\n          >\n            {props.application_sessions.map((session, item) => (\n              <option\n                key={session.session_plan_id + item}\n                value={session.session_plan_id}\n              >\n                {session.session_plan_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </section>\n      {/* END FILTER SECTION PERIOD && EDUCATION */}\n    </div>\n  );\n};\n\nexport default ClaimHeaderTitle;\n","import React, { Component } from \"react\";\nimport { MdAdd, MdArrowBack, MdDelete, MdInfoOutline } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport { Auth, loadCourses, PushPopupAlert } from \"../../../actions\";\nimport {\n  DocumentClaimUser,\n  getClaimReasons,\n  getMyAnswers,\n  getMyClaims,\n  getMyPlacement,\n} from \"../../../actions/claiming\";\nimport {\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n} from \"../../../actions/document\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { SideNavigation } from \"../../../components/Navigation/SideNavigation\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimStatus,\n  PlansTypeKeys,\n  SessionPlanInterface,\n  course,\n} from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport { capitalizeFirstLetter } from \"../../../shared/dataTest\";\nimport { filterClaimsByClaimType } from \"../Admin/AdminFilterByType\";\nimport ClaimApplView from \"../ClaimApplView\";\nimport ClaimDocView, { isClaimEvaluated } from \"../ClaimDocView\";\nimport ClaimExamView from \"../ClaimExamView\";\nimport ClaimHeaderTitle from \"../ClaimHeaderTitle\";\nimport ClaimPlacementView from \"../ClaimPlacementView\";\nimport ClaimForm, { ClaimGetDocTitle } from \"./ClaimForm\";\nimport FilterByType from \"./FilterByType\";\nimport { getCourseById, getCourseIdBySheetId } from \"./FormExamList\";\n\nexport enum ClaimTypesEnum {\n  application = \"application\",\n  document = \"document\",\n  exam = \"exam\",\n  marks_publication = \"marks publication\",\n  placement = \"placement\",\n}\n\nexport const getDocumentById = (\n  candidateDocuments: DocumentClaimUser[],\n  document_id: string\n): DocumentClaimUser | null => {\n  let result: DocumentClaimUser | undefined = candidateDocuments.find(\n    (item) => item.doc_id === document_id\n  );\n  return result ? result : null;\n};\n\nexport const whichClaimType = (\n  thisClaim: CandidateClaimInterface\n): ClaimTypesEnum | undefined => {\n  if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n    return ClaimTypesEnum.application;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    return ClaimTypesEnum.document;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.EXAMINATION) {\n    return ClaimTypesEnum.exam;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.MARKS_PUBLICATION) {\n    return ClaimTypesEnum.marks_publication;\n  }\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    return ClaimTypesEnum.placement;\n  }\n};\n\nexport const whichClaimStatus = (\n  thisClaim: CandidateClaimInterface\n): {\n  classes: string;\n  status: string;\n} => {\n  let classes: string, status: string;\n  switch (thisClaim.last_claim_status) {\n    case ClaimStatus.COMPLETED:\n      classes = \"text-blue-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.COMPLETED.toLocaleLowerCase());\n      break;\n    case ClaimStatus.EVALUATED:\n      classes = \"text-green-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.EVALUATED.toLocaleLowerCase());\n      break;\n\n    case ClaimStatus.DELETED:\n      classes = \"text-red-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.DELETED.toLocaleLowerCase());\n      break;\n\n    default:\n      classes = \"text-yellow-700 italic font-semiblod\";\n      status = capitalizeFirstLetter(ClaimStatus.PENDING.toLocaleLowerCase());\n      break;\n  }\n\n  return { classes, status };\n};\n\nexport const getClaimById = (\n  claimList: CandidateClaimInterface[],\n  claim_id: string\n): CandidateClaimInterface | null => {\n  console.log(\"====================================\");\n  console.log({ claimList, claim_id });\n  console.log(\"====================================\");\n  let result: CandidateClaimInterface | undefined = claimList.find(\n    (item) => item._id === claim_id\n  );\n  return result ? result : null;\n};\n\nexport const getApplicationById = (\n  candidateApplications: claimApplicationsInterface[],\n  application_id: string\n): claimApplicationsInterface | null => {\n  let result: claimApplicationsInterface | undefined =\n    candidateApplications.find(\n      (item) => item.application_id === application_id\n    );\n  return result ? result : null;\n};\n\nexport const displayDocClaimTitle = (\n  documentCategories: DocumentReducerInterface,\n  candidateDocuments: DocumentClaimUser[],\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = \"\";\n\n  // CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n    let thisDoc = getDocumentById(candidateDocuments, thisClaim.claiming_on_id);\n    result = thisDoc\n      ? ClaimGetDocTitle(documentCategories, thisDoc).main\n      : \"Document not found\";\n  }\n  // END CHECK IF CLAIM IS FOR DOCUMENTS ===============================================\n  return result;\n};\n\nexport const displayClaimTitle = (\n  claiming: ClaimingReducerType,\n  documentReducer: DocumentReducerInterface,\n  allCourse: course[] | null,\n  thisClaim: CandidateClaimInterface\n): string => {\n  let result: string = thisClaim.claiming_on_id;\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n    claiming.candidateDocuments\n  ) {\n    result = displayDocClaimTitle(\n      documentReducer,\n      claiming.candidateDocuments,\n      thisClaim\n    );\n  }\n  if (\n    thisClaim.type_key === PlansTypeKeys.APPLICATION &&\n    claiming.candidateApplications\n  ) {\n    let thisApplication = getApplicationById(\n      claiming.candidateApplications,\n      thisClaim.claiming_on_id\n    );\n    if (thisApplication) {\n      result = thisApplication.position.position_title;\n    } else {\n      result = \"Application not found\";\n    }\n  }\n\n  if (\n    thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n    allCourse &&\n    claiming.myAnswer\n  ) {\n    let thisAnswer = getCourseIdBySheetId(\n      claiming.myAnswer,\n      thisClaim.claiming_on_id\n    );\n    if (thisAnswer && getCourseById(allCourse, thisAnswer.course)) {\n      result = getCourseById(allCourse, thisAnswer.course)!.course_name;\n    } else {\n      result = \"Exam not found\";\n    }\n  }\n\n  if (thisClaim.type_key === PlansTypeKeys.PLACEMENT_TRANSFER) {\n    result = claiming.myPlacement\n      ? \"Placed on \" + claiming.myPlacement.placed.school.school_name\n      : \"Placement not found\";\n  }\n\n  return result;\n};\n\n// -------------------------------------------------------------------------\n\ntype AppProps = {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  courses: course[] | null;\n  documentReducer: DocumentReducerInterface;\n  getMyPlacement: Function;\n  getMyClaims: Function;\n  loadCourses: Function;\n  getMyAnswers: Function;\n  getClaimReasons: Function;\n  GetAllSessionPlans: Function;\n  getDocumentCategory: Function;\n  getDocumentSubCategory: Function;\n  getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\ntype AppState = {\n  loading: boolean;\n  loadingSession: boolean;\n  thisPeriod: SessionPlanInterface | null;\n  periodChanged: boolean;\n  viewClaim: boolean;\n  claimId: string | null;\n  claimForm: boolean;\n\n  // FOR FORM ================\n  viewImage: boolean;\n  loadingRequest: boolean;\n  reClaiming: boolean;\n  reClaimingMsg: string;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n};\n\nclass Index extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loadingSession: true,\n      thisPeriod: null,\n      periodChanged: false,\n      viewClaim: false,\n      claimId: null,\n      claimForm: false,\n\n      // FOR FORM ================\n      viewImage: false,\n      loadingRequest: false,\n      reClaiming: false,\n      reClaimingMsg: \"\",\n      formError: null,\n    };\n  }\n\n  setLoading = (value: boolean) => {\n    this.setState({ loading: value });\n  };\n\n  setLoadingSession = (value: boolean) => {\n    this.setState({ loadingSession: value });\n  };\n\n  setViewClaim = (value: boolean) => {\n    this.setState({ viewClaim: value });\n  };\n\n  setPeriodChanged = (value: boolean) => {\n    this.setState({ periodChanged: value });\n  };\n\n  setClaimForm = (value: boolean) => {\n    this.setState({ claimForm: value });\n  };\n\n  setViewImage = (value: boolean) => {\n    this.setState({ viewImage: value });\n  };\n\n  setLoadingRequest = (value: boolean) => {\n    this.setState({ loadingRequest: value });\n  };\n\n  setReClaiming = (value: boolean) => {\n    this.setState({ reClaiming: value });\n  };\n\n  setFormError = (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => {\n    this.setState({ formError: value });\n  };\n\n  setReClaimingMsg = (value: string) => {\n    this.setState({ reClaimingMsg: value });\n  };\n\n  setClaimId = (value: string | null) => {\n    this.setState({ claimId: value });\n  };\n\n  setThisPeriod = (value: SessionPlanInterface | null) => {\n    this.setState({ thisPeriod: value });\n  };\n\n  loadClaims = (thisPeriod: SessionPlanInterface) => {\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (this.props.claiming.myClaims === null && thisPeriod !== null) {\n      this.props.getMyClaims(\n        this.props.auth.user.user_id,\n        thisPeriod.session_plan_id,\n        (status: boolean, msg: string) => {\n          !status && this.setLoading(status);\n          if (status === false && msg.length) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      );\n    } else if (thisPeriod && this.state.loading) {\n      this.setLoading(false);\n    }\n  };\n\n  setSession = (sessions: SessionPlanInterface[]) => {\n    // SETTING ACTIVE SESSION ==========================\n    if (this.state.thisPeriod === null && sessions.length > 0) {\n      let thisSession = sessions.find((item) => item.is_active === true);\n      this.setThisPeriod(thisSession ? thisSession : sessions[0]);\n      this.loadClaims(thisSession ? thisSession : sessions[0]);\n      this.loadExamAnswers(\n        thisSession ? thisSession : sessions[0],\n        this.props.auth.user.user_id\n      );\n    }\n  };\n\n  loadExamAnswers = (\n    activeSessionPlan: SessionPlanInterface,\n    user_id: string\n  ) => {\n    this.props.getMyAnswers(\n      activeSessionPlan.session_plan_id,\n      user_id,\n      (status: boolean, msg: string, data: SessionPlanInterface | \"none\") => {\n        this.setLoading(status);\n        if (!status && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n        if (data) {\n          console.log(\"====================================\");\n          console.log({ loadExamAnswers: data });\n          console.log(\"====================================\");\n        }\n      }\n    );\n    if (this.props.claiming.claimReasons === null) {\n      this.props.getClaimReasons((status: boolean, msg: string) => {\n        this.setLoading(status);\n        if (!status) {\n          if (msg.length > 0) {\n            this.props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.courses === null ||\n      (this.props.courses.length === 0 && this.state.loading)\n    ) {\n      this.props.loadCourses(this.setLoading);\n      this.setLoading(false);\n    } else {\n      this.setLoading(false);\n    }\n\n    // LOADING APPLICATION SESSION ====================================\n    if (this.props.application_sessions === null) {\n      this.props.GetAllSessionPlans(\n        (status: boolean, msg: string, data?: SessionPlanInterface[]) => {\n          if (!status) {\n            this.setLoadingSession(false);\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            if (data && data.length > 0) {\n              // SETTING ACTIVE SESSION ==========================\n              if (this.state.thisPeriod === null) {\n                this.setSession(data);\n              }\n            }\n          }\n        }\n      );\n    } else {\n      this.setSession(this.props.application_sessions);\n      this.setLoadingSession(false);\n    }\n\n    if (!this.props.documentReducer.documentCategory) {\n      this.props.getDocumentCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n    if (!this.props.documentReducer.documentSubCategory && this.state.loading) {\n      this.props.getDocumentSubCategory();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (!this.props.documentReducer.documentFields && this.state.loading) {\n      this.props.getDocumentFields();\n      this.setLoading(false);\n    } else if (this.state.loading) {\n      this.setLoading(false);\n    }\n\n    if (this.props.claiming.myPlacement === null) {\n      this.props.getMyPlacement(\n        this.props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          this.setLoading(status);\n          if (!status) {\n            if (msg.length) {\n              this.props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          }\n        }\n      );\n    }\n  };\n\n  isDeleteAllowed = (thisCLaim: CandidateClaimInterface): boolean => {\n    if (!isClaimEvaluated(thisCLaim, 1)) {\n      return true;\n    }\n    return false;\n  };\n\n  onPeriodChange = (period_id: string) => {\n    this.setPeriodChanged(true);\n    this.props.getMyClaims(\n      this.props.auth.user.user_id,\n      period_id,\n      (status: boolean, msg: string) => {\n        this.setLoadingRequest(status);\n        !status && this.setPeriodChanged(false);\n        if (status === false && msg.length) {\n          this.props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      }\n    );\n  };\n\n  render() {\n    if (this.props.application_sessions === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    if (this.props.application_sessions.length === 0) {\n      return (\n        <div className=\"bg-yellow-100 rounded flex flex-col items-center justify-center p-6 my-8 text-yellow-900 border border-yellow-900\">\n          <MdInfoOutline className=\"text-6xl md:text-9xl\" />\n          <div className=\"text-center flex flex-col\">\n            <span className=\"text-2xl md:text-4xl font-extrabold\">\n              No active session\n            </span>\n            <span className=\"text-lg\">\n              Please Wait for the system to publish the sessions or contact the\n              administrator\n            </span>\n          </div>\n        </div>\n      );\n    }\n\n    if (this.props.claiming.myClaims === null) {\n      return (\n        <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n          Loading Data...\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* SIDE NAVIGATION */}\n        {!this.state.viewClaim && (\n          <SideNavigation>\n            <button\n              className=\"btn mb-3 border-2 border-blue-500 hover:bg-blue-500 hover:text-white flex items-center flex-1 font-bold w-full focus:outline-none\"\n              onClick={() => {\n                this.setClaimForm(true);\n                // alert(\"clicked\");\n              }}\n              disabled={\n                this.state.viewClaim ||\n                this.state.loading ||\n                this.state.loadingRequest\n              }\n            >\n              <MdAdd className=\"inline-block mr-1 text-xl font-bold\" />\n              <span>Claiming</span>\n            </button>\n\n            {/* FILTER SECTION */}\n            <FilterByType loadingClaims={this.state.loadingRequest} />\n            {/* END FILTER SECTION */}\n          </SideNavigation>\n        )}\n        {/* END SIDE NAVIGATION */}\n\n        {/* ------------------------------------------------------------------- */}\n\n        {/* CLAIM TITLE ===================================== */}\n        {!this.state.viewClaim && (\n          <ClaimHeaderTitle\n            headerTitle={`${\n              this.props.claiming.selectedClaimType === \"all\"\n                ? \"All\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n                ? \"Documents\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.APPLICATION\n                ? \"Applications\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.EXAMINATION\n                ? \"Exam\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.MARKS_PUBLICATION\n                ? \"Marks publication\"\n                : this.props.claiming.selectedClaimType ===\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                ? \"Placements\"\n                : \"\"\n            } Claiming`}\n            loading={this.state.loading}\n            loadingSession={this.state.loadingSession}\n            thisPeriod={this.state.thisPeriod}\n            setThisPeriod={this.setThisPeriod}\n            setLoadingSession={this.setLoadingSession}\n            application_sessions={this.props.application_sessions}\n            onPeriodChange={this.onPeriodChange}\n            periodChanged={this.state.periodChanged}\n          />\n        )}\n        {/* END CLAIM TITLE ===================================== */}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {!this.state.viewClaim && (\n          <section className=\"bg-white w-full p-1\">\n            <table className=\"w-full shadow\" id=\"report_content\">\n              <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n                <tr>\n                  <td className=\"px-2 py-2\">#</td>\n                  <td className=\"px-2 py-2\">Claim title</td>\n                  {this.props.claiming.selectedClaimType === \"all\" && (\n                    <td className=\"px-2 py-2\">Claim type</td>\n                  )}\n                  <td className=\"px-2 py-2\">Claim status</td>\n                  <td className=\"px-2 py-2\"></td>\n                </tr>\n              </thead>\n              <tbody>\n                {filterClaimsByClaimType(\n                  this.props.claiming.myClaims,\n                  this.props.claiming.selectedClaimType\n                ).length <= 0 ? (\n                  <tr\n                    className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                    key=\"key3201\"\n                  >\n                    <td className=\"px-3 py-1\" colSpan={4}>\n                      <NoResult\n                        theme={NoResultThemes.Light}\n                        value={\"No claim found!\"}\n                      />\n                    </td>\n                  </tr>\n                ) : (\n                  filterClaimsByClaimType(\n                    this.props.claiming.myClaims,\n                    this.props.claiming.selectedClaimType\n                  ).map((claim, index) => (\n                    <tr\n                      className=\"border-b border-gray-200 group hover:bg-gray-50 cursor-pointer\"\n                      key={index + claim._id}\n                      onClick={() => {\n                        this.setViewClaim(true);\n                        this.setClaimId(claim._id);\n                      }}\n                    >\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        {claim.title}\n                      </td>\n                      {this.props.claiming.selectedClaimType === \"all\" && (\n                        <td className=\"px-3 py-1 whitespace-nowrap\">\n                          {whichClaimType(claim)\n                            ? capitalizeFirstLetter(whichClaimType(claim)!)\n                            : \"-\"}\n                        </td>\n                      )}\n                      <td className=\"px-3 py-1 whitespace-nowrap\">\n                        <span\n                          className={`inline-block rounded-full duration-300 text-xs font-semibold px-3 py-1 ${\n                            whichClaimStatus(claim).classes\n                          }`}\n                        >\n                          {whichClaimStatus(claim).status}\n                        </span>\n                      </td>\n                      <td className=\"px-3 py-1 text-center whitespace-nowrap\">\n                        <button className=\"btn bg-blue-500 text-white group-hover:bg-blue-600\">\n                          View\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </section>\n        )}\n\n        {/* ----------------------------------------------------------------------- */}\n\n        {this.state.viewClaim &&\n          this.props.claiming.myClaims &&\n          this.state.claimId &&\n          getClaimById(this.props.claiming.myClaims, this.state.claimId) && (\n            <section className=\"bg-white w-full p-1 my-4\">\n              {/* VIEW CLAIM HEADER =============================== */}\n              <section className=\"flex items-center gap-2 py-2 border-b\">\n                <button\n                  className={`ml-3 bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                    this.state.loadingRequest\n                      ? \"cursor-not-allowed\"\n                      : \"cursor-pointer\"\n                  } animate__animated animate__fadeIn`}\n                  disabled={this.state.loadingRequest}\n                  onClick={() => {\n                    this.setViewClaim(false);\n                    this.setViewImage(false);\n                    this.setLoadingRequest(false);\n                    this.setFormError(null);\n                    this.setReClaiming(false);\n                    this.setReClaimingMsg(\"\");\n                  }}\n                >\n                  <MdArrowBack className=\"w-7 h-7\" />\n                </button>\n                {this.isDeleteAllowed(\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!\n                ) && (\n                  <button\n                    className={`bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 focus:outline-none ${\n                      this.state.loadingRequest\n                        ? \"cursor-not-allowed\"\n                        : \"cursor-pointer\"\n                    } animate__animated animate__fadeIn hidden`}\n                    disabled={this.state.loadingRequest}\n                    // onClick={() => {\n                    //   this.handleDelete();\n                    // }}\n                  >\n                    <MdDelete className=\"w-7 h-7\" />\n                  </button>\n                )}\n              </section>\n              {/* END VIEW CLAIM HEADER =============================== */}\n              <section className=\"my-2\">\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.DOCUMENT_VALIDATION &&\n                this.props.claiming.candidateDocuments &&\n                getDocumentById(\n                  this.props.claiming.candidateDocuments,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimDocView\n                    thisDoc={\n                      getDocumentById(\n                        this.props.claiming.candidateDocuments,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewImage={this.state.viewImage}\n                    setViewImage={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.DOCUMENT_VALIDATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Document not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n\n                {/* ############################################################### */}\n\n                {/* VIEWING CLAIM OF AN APPLICATION ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.APPLICATION &&\n                this.props.claiming.candidateApplications &&\n                getApplicationById(\n                  this.props.claiming.candidateApplications,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) ? (\n                  <ClaimApplView\n                    thisApplication={\n                      getApplicationById(\n                        this.props.claiming.candidateApplications,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    documentCategories={this.props.documentReducer}\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.APPLICATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Application not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN APPLICATION ===================== */}\n\n                {/* VIEWING CLAIM OF AN EXAM ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.EXAMINATION &&\n                this.props.claiming.myAnswer &&\n                this.props.courses &&\n                getCourseIdBySheetId(\n                  this.props.claiming.myAnswer,\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.claiming_on_id\n                ) &&\n                getCourseById(\n                  this.props.courses,\n                  getCourseIdBySheetId(\n                    this.props.claiming.myAnswer,\n                    getClaimById(\n                      this.props.claiming.myClaims,\n                      this.state.claimId\n                    )!.claiming_on_id\n                  )!.course\n                ) ? (\n                  <ClaimExamView\n                    thisExam={\n                      getCourseById(\n                        this.props.courses,\n                        getCourseIdBySheetId(\n                          this.props.claiming.myAnswer,\n                          getClaimById(\n                            this.props.claiming.myClaims,\n                            this.state.claimId\n                          )!.claiming_on_id\n                        )!.course\n                      )!\n                    }\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    viewPosition={this.state.viewImage}\n                    setViewPosition={this.setViewImage}\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    thisExamSheet={\n                      getCourseIdBySheetId(\n                        this.props.claiming.myAnswer,\n                        getClaimById(\n                          this.props.claiming.myClaims,\n                          this.state.claimId\n                        )!.claiming_on_id\n                      )!\n                    }\n                    claimReasons={this.props.claiming.claimReasons}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.EXAMINATION && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Exam not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF AN EXAM ===================== */}\n\n                {/* ----------------------------------------------------------- */}\n                {/* VIEWING CLAIM OF A DOCUMENT ===================== */}\n                {getClaimById(this.props.claiming.myClaims, this.state.claimId)!\n                  .type_key === PlansTypeKeys.PLACEMENT_TRANSFER &&\n                this.props.claiming.myPlacement ? (\n                  <ClaimPlacementView\n                    thisClaim={\n                      getClaimById(\n                        this.props.claiming.myClaims,\n                        this.state.claimId\n                      )!\n                    }\n                    loadingRequest={this.state.loadingRequest}\n                    setLoadingRequest={this.setLoadingRequest}\n                    reClaiming={this.state.reClaiming}\n                    setReClaiming={this.setReClaiming}\n                    reClaimingMsg={this.state.reClaimingMsg}\n                    setReClaimingMsg={this.setReClaimingMsg}\n                    formError={this.state.formError}\n                    setFormError={this.setFormError}\n                    myPlacement={this.props.claiming.myPlacement}\n                  />\n                ) : (\n                  getClaimById(\n                    this.props.claiming.myClaims,\n                    this.state.claimId\n                  )!.type_key === PlansTypeKeys.PLACEMENT_TRANSFER && (\n                    <NoResult\n                      theme={NoResultThemes.Dark}\n                      value={\"Placement not found\"}\n                    />\n                  )\n                )}\n                {/* END VIEWING CLAIM OF A DOCUMENT ===================== */}\n              </section>\n            </section>\n          )}\n        {/* end view claim */}\n\n        {/* ----------------------------------------------------------------------- */}\n        {/* CLAIM FORM  ################ */}\n        {this.state.claimForm && (\n          <ClaimForm\n            formState={this.state.claimForm}\n            setFormState={this.setClaimForm}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  course,\n}: StoreState): {\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  application_sessions: SessionPlanInterface[] | null;\n  documentReducer: DocumentReducerInterface;\n  courses: course[] | null;\n} => {\n  return {\n    auth: auth,\n    claiming,\n    application_sessions: sessionPlan.allSessionPlans,\n    documentReducer: document,\n    courses: course.courses,\n  };\n};\n\nexport const CandidateClaim = connect(mapStateToProps, {\n  getMyClaims,\n  GetAllSessionPlans,\n  getClaimReasons,\n  loadCourses,\n  getMyPlacement,\n  getMyAnswers,\n  getDocumentCategory,\n  getDocumentSubCategory,\n  getDocumentFields,\n  PushPopupAlert,\n})(Index);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline, MdTurnedIn } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport {\n  CandidateClaimInterface,\n  claimApplicationsInterface,\n  ClaimDecisionStatus,\n  claimReasonInterface,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { ApplicationStates } from \"../../interfaces/application\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { DocumentReducerInterface } from \"../../reducers/document\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { DATE, errorToText, showDate } from \"../../utils/functions\";\nimport ViewRequirements from \"../Positions/ViewRequirements\";\nimport { FC_ApplicationPositionDistinctCategory } from \"./Candidate/ApplicationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisApplication: claimApplicationsInterface;\n  documentCategories: DocumentReducerInterface;\n  claimReasons: claimReasonInterface[] | null;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              {props.thisApplication.position.position_title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Status:</span>\n            <span\n              className={`font-bold ${\n                props.thisClaim.previous.status === ApplicationStates.Rejected\n                  ? \"text-yellow-900\"\n                  : \"text-blue-600\"\n              } rounded px-3 py-1`}\n            >\n              {capitalizeFirstLetter(props.thisClaim.previous.status)}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Evaluated by:</span>\n            <span className=\"font-semibold\">\n              {props.thisClaim.previous.evaluater.name}\n            </span>\n          </div>\n          {false && (\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Session:</span>\n              <span className=\"font-bold text-gray-900 py-1\">\n                {\n                  props.thisApplication.application_session\n                    .application_session_name\n                }\n              </span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Date:</span>\n            <span className=\"font-bold text-gray-900 py-1\">\n              {DATE(props.thisApplication.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n            <span className={`italic`}>Reason:</span>\n            <span className=\"font-normal\">\n              {props.thisClaim.previous.reason}\n            </span>\n          </div>\n\n          {/* DISPLAY POSITION ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"w-full my-1 animate__animated animate__fadeIn rounded\">\n              <div className=\"bg-white w-full\">\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Details\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Desc:</span>\n                  <span className=\"font-semibold\">\n                    {props.thisApplication.position.description}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>School level:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.school_level_id\n                        .school_level_name\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Institute:</span>\n                  <span className=\"font-semibold\">\n                    {\n                      props.thisApplication.position.education_institute_id\n                        .education_category_title\n                    }\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                  <span className={`italic`}>Courses:</span>\n                  <span className=\"flex items-center gap-2\">\n                    {props.thisApplication.position.courses.map(\n                      (item, index) => (\n                        <div\n                          key={index + item.course_id}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <span className=\"font-semibold\">\n                            {item.course_name}\n                          </span>\n                          <span className=\"text-gray-600\">\n                            ({item.course_code})\n                          </span>\n                          {index !==\n                            props.thisApplication.position.courses.length - 1 &&\n                            \",\"}\n                        </div>\n                      )\n                    )}\n                  </span>\n                </div>\n\n                <div className=\"text-gray-800 text-2xl font-bold my-2\">\n                  Position Requirements\n                </div>\n                {props.thisApplication.position.requirements.length > 0 ? (\n                  FC_ApplicationPositionDistinctCategory(\n                    props.thisApplication.position,\n                    props.documentCategories\n                  ).DistinctCategoriesTemp.map((item, index) => (\n                    <div\n                      className=\"bg-gray-100props.thisApplication.position rounded p-2\"\n                      key={index + item.category_id}\n                    >\n                      <div className=\"flex items-center gap-2 text-2xl text-gray-500 font-bold\">\n                        <MdTurnedIn />\n                        <span>{item.category_title}</span>\n                      </div>\n                      <div className=\"border bg-white mt-1\">\n                        <ViewRequirements\n                          requirements={FC_ApplicationPositionDistinctCategory(\n                            props.thisApplication.position,\n                            props.documentCategories\n                          ).PositionsTemp.filter(\n                            (req) => req.category_id === item.category_id\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <NoResult\n                    theme={NoResultThemes.Dark}\n                    value={\"No requirements\"}\n                  ></NoResult>\n                )}\n              </div>\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport {\n  loadQuestionTypes,\n  PushPopupAlert,\n  questionTypesStoreInterface,\n} from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimExamResultsDetails,\n  claimReasonInterface,\n  ClaimStatus,\n  course,\n} from \"../../interfaces\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { StoreState } from \"../../reducers\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\nimport { claimShowAnswer } from \"./Candidate/ExaminationFormView\";\nimport { isClaimEvaluated } from \"./ClaimDocView\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ntype ClaimDocViewProps = {\n  thisExam: course;\n  thisExamSheet: ClaimExamResultsDetails;\n  thisClaim: CandidateClaimInterface;\n  viewPosition: boolean;\n  claimReasons: claimReasonInterface[] | null;\n  setViewPosition: (value: boolean) => void;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimDocView: React.FC<ClaimDocViewProps> = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      (props.questionTypes.questionTypes.length === 0 && loading)\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [loading, props]);\n\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim is required\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  const getReasonById = (\n    reason_id: string\n  ): claimReasonInterface | undefined => {\n    if (props.claimReasons) {\n      return props.claimReasons.find((item) => item.id === reason_id);\n    }\n    return undefined;\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-blue-600 font-bold text-2xl\">\n              Exam of {props.thisExam.course_name}{\" \"}\n            </span>\n            <button\n              type=\"button\"\n              className=\"bg-blue-200 hover:bg-blue-300 text-blue-700 group-hover:text-blue-800 py-1 px-2 mr-1 rounded text-sm\"\n              onClick={() => props.setViewPosition(!props.viewPosition)}\n            >\n              {props.viewPosition ? \"Hide\" : \"More\"}\n            </button>\n          </div>\n\n          {/* DISPLAY EXAM SHEET ==================================================== */}\n          {props.viewPosition && (\n            <div className=\"bg-white w-full rounded p-2 mb-2\">\n              <CandidateAnswersDetails\n                showAnswers={false}\n                exam_id={claimShowAnswer(\n                  props.thisExamSheet,\n                  props.thisExam.course_name\n                )}\n              />\n            </div>\n          )}\n          {/* END DISPLAY POSITION ==================================================== */}\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <div className=\"flex items-center gap-2 bg-blue-100 rounded py-1 px-2\">\n                  <MdInfoOutline />\n                  {getReasonById(props.thisClaim.default_claim_resaons)\n                    ? getReasonById(props.thisClaim.default_claim_resaons)!\n                        .reason\n                    : \"\"}\n                </div>\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {loading ? (\n                          <div className=\"w-24 h-3 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n                        ) : (\n                          props.thisClaim.userDetails.user_info.fname +\n                          \" \" +\n                          props.thisClaim.userDetails.user_info.lname\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nconst mapStateToProps = ({\n  questionTypes,\n}: StoreState): {\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return { questionTypes: questionTypes };\n};\n\nexport default connect(mapStateToProps, {\n  loadQuestionTypes,\n  createReClaim,\n  PushPopupAlert,\n})(ClaimDocView);\n","import axios from \"axios\";\nimport React from \"react\";\nimport { FaRegCheckCircle } from \"react-icons/fa\";\nimport { RiArrowGoBackFill } from \"react-icons/ri\";\nimport { connect } from \"react-redux\";\nimport { PushPopupAlert } from \"../../actions\";\nimport { createReClaim } from \"../../actions/claiming\";\nimport {\n  CandidateClaimInterface,\n  ClaimDecisionStatus,\n  ClaimStatus,\n} from \"../../interfaces\";\nimport { candidatePlacementInterface } from \"../../interfaces/placement\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport { capitalizeFirstLetter, isEmptyOrSpaces } from \"../../shared/dataTest\";\nimport { API } from \"../../utils/api\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { errorToText, showDate } from \"../../utils/functions\";\n\nconst isReclaimAllowed = (thisClaim: CandidateClaimInterface): boolean => {\n  if (thisClaim.claim_level === 1) {\n    const _thisClaim = thisClaim.claims.find((item) => item.level === 1);\n    if (_thisClaim) {\n      if (_thisClaim.decision_taken_status === ClaimDecisionStatus.REJECTED) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isClaimEvaluated = (\n  thisClaim: CandidateClaimInterface,\n  level: number\n): boolean => {\n  const _thisClaim = thisClaim.claims.find(\n    (item) =>\n      item.level === level && item.claim_status === ClaimStatus.EVALUATED\n  );\n  if (_thisClaim) {\n    return true;\n  }\n  return false;\n};\n\ntype ClaimPlacementViewProps = {\n  myPlacement: candidatePlacementInterface;\n  thisClaim: CandidateClaimInterface;\n  loadingRequest: boolean;\n  setLoadingRequest: (value: boolean) => void;\n  reClaiming: boolean;\n  setReClaiming: (value: boolean) => void;\n  reClaimingMsg: string;\n  setReClaimingMsg: (value: string) => void;\n  formError: {\n    element: string;\n    msg: string;\n  } | null;\n  setFormError: (\n    value: {\n      element: string;\n      msg: string;\n    } | null\n  ) => void;\n\n  // REDUX DATA =====================\n  createReClaim: Function;\n  PushPopupAlert: Function;\n};\n\nconst ClaimPlacementView: React.FC<ClaimPlacementViewProps> = (props) => {\n  const handleSubmit = async () => {\n    if (isEmptyOrSpaces(props.reClaimingMsg)) {\n      return props.setFormError({\n        element: \"comment\",\n        msg: \"Claim comment is required!\",\n      });\n    }\n    if (!props.thisClaim) {\n      return props.PushPopupAlert({\n        title: \"Claim sent successful\",\n        theme: PopupAlertTheme.warning,\n      });\n    }\n\n    props.setLoadingRequest(true);\n    try {\n      setAxiosToken();\n      const res = await axios.put<CandidateClaimInterface>(\n        `${API.CLAIMING}/user/reclaim/${props.thisClaim._id}`,\n        {\n          reason: props.reClaimingMsg,\n        }\n      );\n      console.log({ res: res.data });\n      if (res.status === 201 || res.status === 200) {\n        props.createReClaim(res.data);\n        props.PushPopupAlert({\n          title: \"Claim sent successful\",\n          theme: PopupAlertTheme.success,\n        });\n        props.setReClaimingMsg(\"\");\n        props.setReClaiming(false);\n      }\n    } catch (error) {\n      console.error({ error });\n      props.PushPopupAlert({\n        title: errorToText(error),\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    props.setLoadingRequest(false);\n  };\n\n  return (\n    <section className=\"\">\n      <div className=\"w-full bg-white px-4 py-1 divide-y-2 space-y-2\">\n        {/* DOCUMENT DETAILS ==================================================== */}\n        <section className=\"flex flex-col\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>School:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div>\n          {/* <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>Position:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.school_name}\n              </span>\n            </div>\n          </div> */}\n          <div className=\"flex items-center\">\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <span className={`italic`}>District:</span>\n              <span className=\"text-gray-800 font-bold text-xl\">\n                {props.myPlacement.placed.school.district_id.district_name}\n              </span>\n            </div>\n          </div>\n        </section>\n        {/* END DOCUMENT DETAILS ==================================================== */}\n\n        {/* ################################################################################ */}\n\n        {/* CLAIM LEVELS DETAILS ==================================================== */}\n        {props.thisClaim.claims.length > 0 &&\n          props.thisClaim.claims.map((claim, index) => (\n            <section className=\"flex flex-col px-2 pt-3\" key={index + claim.id}>\n              {/* CLAIM COMMENT ==>> LEVEL 1 ==================================================== */}\n              <div className=\"flex flex-col items-start gap-2\">\n                <p>{claim.reason}</p>\n                <span className=\"text-gray-500 text-xs\">\n                  {showDate(claim.createdAt)}\n                </span>\n              </div>\n\n              {/* RESPONSE OF LEVELS ======================================= */}\n              {isClaimEvaluated(props.thisClaim, claim.level) && (\n                <section className=\"mt-4\">\n                  <span className=\"text-gray-500 italic font-semibold\">\n                    Response (level {index + 1})\n                  </span>\n                  <div className=\"border-t-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Status:</span>\n                      <span\n                        className={`font-bold ${\n                          claim.decision_taken_status ===\n                          ClaimDecisionStatus.REJECTED\n                            ? \"text-yellow-900\"\n                            : \"text-blue-600\"\n                        } rounded px-3 py-1`}\n                      >\n                        {capitalizeFirstLetter(\n                          claim.decision_taken_status.toLocaleLowerCase()\n                        )}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Evaluated by:</span>\n                      <span className=\"font-semibold\">\n                        {claim.evaluater.name}\n                      </span>\n                    </div>\n                    <div className=\"flex items-start gap-2 text-sm text-gray-600\">\n                      <span className={`italic`}>Reason:</span>\n                      <span className=\"font-normal\">\n                        {claim.evaluation_comment}\n                      </span>\n                    </div>\n                  </div>\n                </section>\n              )}\n              {/* CLAIM COMMENT ==>> LEVELS ==================================================== */}\n            </section>\n          ))}\n        {/* END CLAIM LEVELS DETAILS ==================================================== */}\n      </div>\n      <section>\n        {!props.reClaiming && (\n          <div className=\"mx-4 mb-5 mt-3 flex items-center justify-between\">\n            <span\n              className={`${\n                props.thisClaim.last_claim_status === ClaimStatus.PENDING\n                  ? \"text-yellow-700\"\n                  : props.thisClaim.last_claim_status === ClaimStatus.DELETED\n                  ? \"text-red-700\"\n                  : \"text-green-700\"\n              } italic font-semibold`}\n            >\n              {capitalizeFirstLetter(\n                props.thisClaim.last_claim_status.toLocaleLowerCase()\n              )}\n            </span>\n\n            {isReclaimAllowed(props.thisClaim) && (\n              <button\n                className=\"btn btn-blue\"\n                onClick={() => props.setReClaiming(true)}\n                disabled={props.loadingRequest}\n              >\n                Reclaim\n              </button>\n            )}\n          </div>\n        )}\n        {/* right part */}\n        {props.reClaiming && (\n          <div className=\"flex flex-col md:flex-row items-end md:items-start gap-1 w-full\">\n            <div className=\"w-full px-2\">\n              <textarea\n                placeholder={`Reason of your reclaim...`}\n                cols={50}\n                rows={3}\n                className={`border border-${\n                  props.formError && props.formError.element === \"comment\"\n                    ? \"red\"\n                    : \"gray\"\n                }-400 rounded px-3 py-1 w-full focus:outline-none`}\n                style={{ resize: \"none\" }}\n                value={props.reClaimingMsg}\n                onChange={(e) => {\n                  props.setReClaimingMsg(e.target.value);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              ></textarea>\n              {props.formError && props.formError.element === \"comment\" && (\n                <p className=\"text-red-800\">{props.formError.msg}</p>\n              )}\n            </div>\n            <div className=\"flex flex-row md:flex-col gap-1 max-w-full px-2\">\n              <button\n                className=\"bg-gray-700 hover:bg-gray-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                onClick={() => {\n                  props.setReClaimingMsg(\"\");\n                  props.setReClaiming(false);\n                  props.setFormError(null);\n                }}\n                disabled={props.loadingRequest}\n              >\n                <RiArrowGoBackFill className=\"w-5 h-5\" />\n                <span>Back</span>\n              </button>\n              <button\n                className=\"bg-blue-700 hover:bg-blue-800 px-4 py-2 font-semibold rounded text-white inline-flex items-center space-x-2 focus:outline-none\"\n                disabled={props.loadingRequest}\n                onClick={() => handleSubmit()}\n              >\n                {props.loadingRequest ? (\n                  <div className=\"\">Loading...</div>\n                ) : (\n                  <div className=\"inline-flex items-center space-x-2 gap-1\">\n                    <FaRegCheckCircle className=\"w-5 h-5\" />\n                    <span>Confirm</span>\n                  </div>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n        {/* end right part */}\n      </section>\n    </section>\n  );\n};\n\nexport default connect(null, {\n  createReClaim,\n  PushPopupAlert,\n})(ClaimPlacementView);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, PushPopupAlert } from \"../../../actions\";\nimport {\n  GetClaimingTypes,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  setSelectedClaimType,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { MainItem } from \"../../../components/Navigation/SideNavigation\";\nimport { ClaimStatus, PlansTypeKeys } from \"../../../interfaces\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\n\ntype FilterByTypeProps = {\n  // thisClaimType: ClaimTypesInterface | \"ALL\";\n  // setThisClaimType: React.Dispatch<\n  //   React.SetStateAction<ClaimTypesInterface | \"ALL\">\n  // >;\n  loadingClaims: boolean;\n  FC_CountByType?: Function;\n\n  // REDUX PROPS =======================================\n  auth: Auth;\n  claiming: ClaimingReducerType;\n  GetClaimingTypes: Function;\n  setSelectedClaimType: Function;\n  getMyRejectedApplications: Function;\n  getMyRejectedDocuments: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst FilterByType: React.FC<FilterByTypeProps> = (props) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingRejectedApplications, setLoadingRejectedApplications] =\n    useState<boolean>(true);\n  const [loadingRejectedDocuments, setLoadingRejectedDocuments] =\n    useState<boolean>(true);\n  const [loadingClaimTypes, setLoadingClaimTypes] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (props.claiming.candidateApplications === null) {\n      props.getMyRejectedApplications(\n        props.auth.user.user_id,\n        (status: boolean, msg: string) => {\n          if (status === false) {\n            if (msg.length > 0) {\n              props.PushPopupAlert({\n                title: msg,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n            setLoadingRejectedApplications(false);\n          }\n        }\n      );\n    } else if (loadingRejectedApplications) {\n      setLoadingRejectedApplications(false);\n    }\n\n    if (props.claiming.candidateDocuments === null) {\n      console.log(\"filterrrrrrrrrrrrrrrrrrrr loadingRejectedDocuments\");\n      props.getMyRejectedDocuments((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingRejectedDocuments(false);\n        }\n      });\n    } else if (loadingRejectedDocuments) {\n      setLoadingRejectedDocuments(false);\n    }\n\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n          setLoadingClaimTypes(false);\n        }\n      });\n    } else if (loadingClaimTypes) {\n      setLoadingClaimTypes(false);\n    }\n\n    if (\n      !loadingRejectedApplications &&\n      !loadingRejectedDocuments &&\n      !loadingClaimTypes &&\n      loading\n    ) {\n      setLoading(false);\n    }\n  }, [\n    loading,\n    loadingClaimTypes,\n    loadingRejectedApplications,\n    loadingRejectedDocuments,\n    props,\n  ]);\n\n  const countClaims = (\n    claiming: ClaimingReducerType,\n    thisType: PlansTypeKeys | \"all\"\n  ): number => {\n    let result: number = 0;\n\n    if (claiming.myClaims && thisType === \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n    if (claiming.myClaims && thisType !== \"all\") {\n      result = claiming.myClaims.filter(\n        (item) =>\n          item.type_key === thisType &&\n          item.last_claim_status !== ClaimStatus.DELETED &&\n          item.last_claim_status !== ClaimStatus.COMPLETED\n      ).length;\n    }\n\n    return result;\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"mt-2 text-sm\">Filter by claim type</span>\n      {/* WHILE LOADING DATA ================================== */}\n      {(loading || props.loadingClaims) && (\n        <section className=\"space-y-2\">\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n          <div className=\"w-full h-7 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </section>\n      )}\n      {/* END WHILE LOADING DATA ================================== */}\n\n      {/* AFTER LOADING DATA ================================== */}\n      {!loading && !props.loadingClaims && (\n        <section>\n          {/* ALL ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(\"ALL\");\n              props.setSelectedClaimType(\"all\");\n            }}\n          >\n            <MainItem\n              title=\"All\"\n              active={props.claiming.selectedClaimType === \"all\"}\n              count={countClaims(props.claiming, \"all\")}\n            />\n          </div>\n          {/* APPLICATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              // props.setThisClaimType(ClaimTypesInterface.DOCUMENT);\n              props.setSelectedClaimType(PlansTypeKeys.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={\"Application\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.APPLICATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.APPLICATION)}\n            />\n          </div>\n          {/* DOCUMENT ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.DOCUMENT_VALIDATION);\n            }}\n          >\n            <MainItem\n              title={\"Document\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType ===\n                  PlansTypeKeys.DOCUMENT_VALIDATION\n              }\n              count={countClaims(\n                props.claiming,\n                PlansTypeKeys.DOCUMENT_VALIDATION\n              )}\n            />\n          </div>\n          {/* EXAMINATION ================================= */}\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setSelectedClaimType(PlansTypeKeys.EXAMINATION);\n            }}\n          >\n            <MainItem\n              title={\"Exam\"}\n              active={\n                props.claiming.selectedClaimType !== \"all\" &&\n                props.claiming.selectedClaimType === PlansTypeKeys.EXAMINATION\n              }\n              count={countClaims(props.claiming, PlansTypeKeys.EXAMINATION)}\n            />\n          </div>\n          {/* PLACEMENT TRANSFER ================================= */}\n          {false && (\n            <div\n              className=\"mt-2\"\n              onClick={() => {\n                props.setSelectedClaimType(PlansTypeKeys.PLACEMENT_TRANSFER);\n              }}\n            >\n              <MainItem\n                title={\"Placement\"}\n                active={\n                  props.claiming.selectedClaimType !== \"all\" &&\n                  props.claiming.selectedClaimType ===\n                    PlansTypeKeys.PLACEMENT_TRANSFER\n                }\n                count={countClaims(\n                  props.claiming,\n                  PlansTypeKeys.PLACEMENT_TRANSFER\n                )}\n              />\n            </div>\n          )}\n          {/* <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.APPLICATION);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.APPLICATION)}\n              active={props.thisClaimType === ClaimTypesInterface.APPLICATION}\n              count={countClaims(props.claiming).applications}\n            />\n          </div>\n          <div\n            className=\"mt-2\"\n            onClick={() => {\n              props.setThisClaimType(ClaimTypesInterface.PLACEMENT);\n            }}\n          >\n            <MainItem\n              title={capitalizeFirstLetter(ClaimTypesInterface.PLACEMENT)}\n              active={props.thisClaimType === ClaimTypesInterface.PLACEMENT}\n              count={countClaims(props.claiming).placement}\n            />\n          </div> */}\n        </section>\n      )}\n      {/* END AFTER LOADING DATA ================================== */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  claiming,\n}: StoreState): { auth: Auth; claiming: ClaimingReducerType } => {\n  return { auth, claiming };\n};\n\nexport default connect(mapStateToProps, {\n  GetClaimingTypes,\n  setSelectedClaimType,\n  getMyRejectedApplications,\n  getMyRejectedDocuments,\n  PushPopupAlert,\n})(FilterByType);\n"],"sourceRoot":""}