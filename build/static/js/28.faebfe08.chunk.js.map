{"version":3,"sources":["utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","components/Courses/Courses.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","components/QuestionPreview/QuestionPreview.tsx","containers/QuestionBank/AddQuestion/ChooseMethod/ChooseMethod.tsx","containers/QuestionBank/QuestionsList/QuestionsList.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","toMultipleChoice","answers","answer","value","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","_UploadQuestion","props","setLoading","setState","loading","setSearchLevel","educationCategory","schoolLevel","searchLevel","setSelectedEducationCategory","setSelectedSchoolLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","item","period","periods","filteredCourses","searched","filtered","school_levels","itm1","school_level_id","item2","setUploadingStatus","uploadingStatus","componentDidMount","loadCourses","state","searchCourseInput","className","this","education_category_title","school_level_name","onChange","e","target","placeholder","onClick","schoolLevels","education_categories","loadEducationCategories","loadSchoolLevels","style","minHeight","searchData","map","setSelectedCourse","selected_course_id","course_name","course_code","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","educationCategories","Component","UploadQuestion","connect","auth","questionBank","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","Matching","MatchingAnswers","selectedQuestionItem","selectedKey","QuestionAnswer","data","wholeQuestion","language","selectedLanguage","editMatchingValue","dangerouslySetInnerHTML","__html","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","useState","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","marks","setSelectedKey","QuestionLanguages","lang","checkAns","uuidv4","alert","selectedQL","addAnswerMatchingQuestion","AddAnswer","console","log","selectedQuestionType","questionTypeElementsType","updateAnswerSingleMultiple","MultipleChoice","checkCalculateType","CalculatedMultipleChoice","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","push","handleStatus","addAnswerSingleMultiple","SingleMultiple","RunTest","numberOfTests","SimpleCalculate","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","ShortAnswer","updateShortAnswer","handleTextChange","rows","EditSimpleCalculate","Numeric","updateAnswerNumerical","TrueFalse","editTrueFalseStatus","EditTrueFalse","HandleInput","Title","languages","questionItems","handleUpdateQuestionDetails","_id","description","Description","QuestionChapters","selectedCourse","chapters","setAddChapter","addedChapters","name","ChangeLanguage","visible","setVisible","languagesList","setSelectedLanguage","_EditQuestion","QuestionLang","question","actionStatus","PushPopupAlert","PopupAlertTheme","success","danger","updatedQuestion","current","editedAnswerIndex","editedAnswer","questionTypes","answer_id","newEditedAnswer","newFiltered","removed","window","confirm","ans","chapter_id","submitEditedQuestion","a","addedQuestion","question_id","customNumber","UpdateQuestion","addExamQuestion","unSelectQuestion","loadQuestionTypes","showQuestionChapters","setSelectedLang","selectedQuestion","questionLangs","testing","Loading","LoadingType","white","onSubmit","Modal","large","Courses","selected_course","EditQuestion","system","prepareExam","setUploadedQuestions","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","checkAnswer","available_answers","selectedQuestionAnswer","x","addAnswerItemFn","newAnswers","answerQuestionFn","useEffect","oldAnswers","temp","t","addAnswer","SimpleCalculated","answeredValue","getRandomArbitrary","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","checkIfSelected","displayWindow","setDisplayWindow","setSelectedAnswer","selectedQuestionId","selectedLang","selectedExam","questions","testLang","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","QuestionPreview","doExam","setSelectedExamQuestion","setQuestionLanguage","selectLang","setSelectLang","filterLanguages","langs","langItem","testLangQ","l","width","findQuestionType","question_answers","candidate_exam","Shuffle","ChooseMethod","to","_QuestionsList","setAddQuestion","addQuestion","chooseCourse","loadQuestionBank","selectCourse","removeSelectedQuestion","removeQuestion","successMessage","errorMessage","setEditQuestion","setSelectedQuestion","editQuestion","filterQuestions","questionType","searchKeyword","keywordsToSearch","testResponse","SearchData","last","lst","searchQuestionInput","preview","searchByTpe","displaySearch","colSpan","NoResultThemes","Dark","component","dark","questionsList","extraLarge","questionAnswers","submitQuestionAnswer","QuestionsList"],"mappings":"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","file":"static/js/28.faebfe08.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport {\n  questionType,\n  questionTypeElements,\n  questionTypeElementsType,\n} from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import { CalculatedMultipleChoiceQuestionAnswerInterface, MatchingQuestionAnswerInterface, MultipleChoiceQuestionAnswerInterface, NumericalQuestionAnswerInterface, ShortAnswerQuestionAnswerInterface, SimpleCalculatedQuestionAnswerInterface, TrueFalseQuestionAnswerInterface } from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (answers: any[]): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toTrueFalse = (answers: any[]): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toMatching = (answers: any[]): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toSimpleCalculated = (answers: any[]): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toShortAnswer = (answers: any[]): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toNumerical = (answers: any[]): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}\n\nexport const toCalculatedMultipleChoice = (answers: any[]): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [...res, {\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    }]\n  }\n  return res;\n}","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answer: QuestionAnswerInterface[];\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answer: this.props.selectedQuestion.answer,\n      selectedLanguage: QuestionLanguages[0],\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n    };\n  }\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.id === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: res,\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: res,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: [editedAnswer],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: [editedAnswer],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [editedAnswer.value[0], question.answer[0].value[1]],\n          status: [\n            editedAnswer.value[0] - question.answer[0].value[1],\n            editedAnswer.value[0] + question.answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            answer: newEditedAnswer,\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            answer: newEditedAnswer,\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: [editedAnswer],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answer.filter((itm) => itm.status === true).length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: newFiltered,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerInterface\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerInterface[] = current.answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          answer: res,\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        answer: res,\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerInterface[] = [];\n        for (let answer = 0; answer < current.answer.length; answer++) {\n          if (\n            current.answer.find((itm) => itm.id === editedAnswerIndex) !==\n            undefined\n          ) {\n            if (current.answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          answer: res,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answer: this.state.answer,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({ selectedKey: selectedKey });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n          <ChangeLanguage\n            setSelectedLanguage={this.setSelectedLang}\n            selectedLanguage={this.state.selectedLanguage}\n            languagesList={questionLangs}\n          />\n        )}\n        {console.log(\"Langs: \", questionLangs)}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col\">\n                  <label className=\"text-gray-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-blue-600 flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() =>\n                      this.setState({ selectedKey: SelectedKeysEdit.Title })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-gray-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setState({ selectedKey: null })}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-blue-600 font-bold flex flex-row gap-2 items-center\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={QuestionLanguages}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setState({\n                        selectedKey: SelectedKeysEdit.Description,\n                      })\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course !== null && (\n              <QuestionChapters\n                selectedCourse={\n                  this.props.course.courses &&\n                  this.props.course.courses.find(\n                    (itm) => itm.course_id === this.state.course\n                  )\n                }\n                addedChapters={this.state.chapters}\n                setAddChapter={this.setAddChapter}\n              />\n            )}\n            <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n              <div className=\"\"></div>\n              <div\n                className=\"btn bg-blue-600 text-white cursor-pointer\"\n                onClick={() => this.setState({ showQuestionChapters: false })}\n              >\n                Done\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerInterface }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  questionTypeElementsType,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerInterface }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerInterface\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from 'react'\nimport { IoShieldCheckmarkSharp } from 'react-icons/io5';\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      numberOfTests: 2,\n    }\n  }\n  \n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\"\n      },\n      {\n        id: 2,\n        value: \"secondnumber\"\n      }\n    ]\n    let defaultNumberOfTests = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n    return (\n      <div className=\"mt-2\">\n        <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RunTest\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answer).map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <>\n              <div className=\"flex flex-col w-full\">\n                <div>Correct answer</div>\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    setEditQuestionAnswer(e.target.value);\n                    if (\n                      editQuestionAnswer !== \"\" &&\n                      !isNaN(parseFloat(editQuestionAnswer))\n                    ) {\n                      props.updateAnswerNumericalValue(check, item.id, {\n                        value: [parseFloat(e.target.value)],\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }\n                  }}\n                  value={`${editQuestionAnswer}`}\n                  type=\"text\"\n                  className=\"input-gray-lg w-full border-2 border-gray-500\"\n                />\n              </div>\n            </>\n          ) : (\n            <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n              <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              <span>Answer: </span>\n              <span>{item.value[0]}</span>\n            </div>\n          )}\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div\n              className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n            >\n              <div className=\"flex flex-col w-full\">\n                <div>Error on the answer</div>\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    setEditQuestionAnswerStatus(e.target.value);\n                    if (\n                      editQuestionAnswerStatus !== \"\" &&\n                      !isNaN(parseFloat(editQuestionAnswerStatus))\n                    ) {\n                      props.updateAnswerNumericalValue(check, item.id, {\n                        value: item.value,\n                        status: [parseFloat(e.target.value)],\n                        id: item.id,\n                      });\n                    }\n                  }}\n                  value={`${editQuestionAnswerStatus}`}\n                  type=\"text\"\n                  className=\"input-gray-lg w-full border-2 border-gray-500\"\n                />\n              </div>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n              <MdError className=\"text-2xl text-gray-500\" />\n              <span className=\"text-gray-500\">Error: </span>\n              <span className=\"text-gray-500\">{item.value[1]}</span>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, NumericalQuestionAnswerInterface, QuestionAnswerInterface, QuestionItemInterface, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport SimpleCalculate from '../AnswersQuestionTypes/SimpleCalculate';\nimport Numerical from '../AnswersQuestionTypes/Numerical';\nimport ShortAnswer from '../AnswersQuestionTypes/ShortAnswer';\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumerical: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateShortAnswer: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  updateAnswerNumericalValue: (question: QuestionItemInterface, answer_id: string, editedAnswer: NumericalQuestionAnswerInterface) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.SimpleCalculate && \n        <SimpleCalculate \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && \n        <Numerical \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n        />\n        }\n        {props.selectedQuestionType === questionTypeElementsType.ShortAnswer && \n        <ShortAnswer \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editSingleMultipleStatus={props.editSingleMultipleStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateShortAnswer={props.updateShortAnswer}\n        />\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default EditSimpleCalculate\n","import React from 'react'\nimport { RiCheckboxBlankCircleLine } from 'react-icons/ri';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { MdRadioButtonChecked } from 'react-icons/md';\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answer.map((item, i) => (\n      <div key={i + 1} className={`flex flex-row items-center justify-between mb-2 gap-3 ${props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"}`}>\n        <div \n          onClick={() => {\n            let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n            if (check === undefined) {\n              check = props.wholeQuestion[0];\n            }\n            props.editTrueFalseStatus(\n              item.id, !item.status\n            )\n          }}\n          className={`flex flex-row items-center gap-2 cursor-pointer ${item.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600 w-40`}>\n            {item.status === false ?\n            <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" /> :\n            <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n      </div>))}\n    </div>\n  )\n}\n\nexport default TrueFalse\n","import React, { useState } from 'react'\nimport { HiCheck } from 'react-icons/hi';\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im';\nimport { MdModeEdit } from 'react-icons/md';\nimport { LanguageInterface, QuestionAnswerInterface, QuestionItemInterface, QuestionLanguages, questionTypeElementsType } from '../../../../../../interfaces/question';\nimport { SelectedKeysEdit } from '../EditQuestion';\nimport { v4 as uuidv4 } from 'uuid';\nimport TrueFalse from '../AnswersQuestionTypes/TrueFalse';\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (question: QuestionItemInterface, editedAnswerIndex: string, editedAnswer: QuestionAnswerInterface) => void;\n  addAnswerSingleMultiple: (question: QuestionItemInterface, addedAnswer: QuestionAnswerInterface) => void;\n  removeAnswerSingleMultiple: (question: QuestionItemInterface[], removedAnswer: QuestionAnswerInterface) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<{lang: LanguageInterface; answer: QuestionAnswerInterface}[]>([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(itm => itm.language === answer.lang.key);\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  }\n  const handleAnswer = (lang: LanguageInterface, answer: QuestionAnswerInterface) => {\n    if (addedAnswer.find(itm => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([...addedAnswer.filter(itm => itm.lang.key !== lang.key), { lang: lang, answer: answer }]);\n    }\n  }\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: { value: itm.answer.value, status: status, id: itm.answer.id }\n        })\n      }\n      setAddedAnswer(backup);\n    }\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && \n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      }\n      \n      {showAddAnswerStatus === false ?\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer ?\n            \"Edit Question answer\" : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null && props.selectedKey === SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"flex flex-row items-center justify-end gap-2\">\n              <span className=\"font-bold text-gray-600\">Marks</span>\n              <input onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.updateMarks(parseInt(e.target.value))} type=\"number\" placeholder=\"Marks\" value={props.marks} className=\"input-gray-lg h-10\" />\n            </div>\n            <div onClick={() => props.setSelectedKey(null)} className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\">\n              <HiCheck className=\"text-3xl\" />\n            </div>\n            </>}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n            <>\n            <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">Marks: {props.marks}</div>\n            <div onClick={() => props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)} className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n              <MdModeEdit className=\"text-3xl\" />\n            </div>\n            </>}\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n        <div className=\"flex flex-col gap-2\">\n        {QuestionLanguages.map((item, i) => (\n          <div key={i + 1}className=\"flex flex-col gap-2\">\n            <span className=\"font-bold text-blue-600\">{item.value}</span>\n          <input \n            value={addedAnswer.length > 0 ? addedAnswer.find(itm => itm.lang.key === item.key)?.answer.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n              handleAnswer(\n                item, \n                { \n                  id: addedAnswer.length > 0 ? addedAnswer[0].answer.id : uuidv4(),\n                  value: e.target.value, \n                  status: addedAnswer.length > 0 ? addedAnswer[0].answer.status : false\n                })}\n            type=\"text\" className=\"input-gray-lg\" />\n          </div>\n        ))}\n        </div>\n        <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n        <div \n        onClick={() => handleStatus(addedAnswer.length > 0 ? !(addedAnswer[0].answer.status) : false)}\n        className={`flex flex-row items-center gap-2 cursor-pointer ${addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"text-blue-600\" : \"text-gray-600\"} hover:text-blue-600`}>\n          {addedAnswer.length > 0 && addedAnswer[0].answer.status === false ?\n          <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" /> :\n          <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />}\n          <span className=\"font-bold text-xl\">{addedAnswer.length > 0 && addedAnswer[0].answer.status === true ? \"True\" : \"False\"}</span>\n        </div>\n        <div onClick={() => AddAnswer()} className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\">Add</div>\n        <div onClick={() => setShowAddAnswer(false)} className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\">Cancel</div>\n      </div>\n      </div>}\n      {showAddAnswerStatus === false &&\n      <div className=\"rounded bg-white px-2 pb-2\">{console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType === questionTypeElementsType.TrueFalse && \n        <TrueFalse \n          selectedKey={props.selectedKey} \n          wholeQuestion={props.wholeQuestion} \n          selectedLanguage={props.selectedLanguage} \n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple} \n          editTrueFalseStatus={props.editTrueFalseStatus} \n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple} \n          selectedQuestionItem={props.selectedQuestionItem} \n        />\n        }\n      </div>}\n    </div>\n  )\n}\n\nexport default EditTrueFalse\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  questionTypeElementsType,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-row items-center animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-3\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(false);\n  // const [minimize, setMinimize] = useState<boolean>(true);\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n              {/* <AiOutlineMinusCircle onClick={() => setMinimize(false)} className=\"text-2xl\" /> */}\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n      if (props.type === questionTypeElementsType.SingleMultiple) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.type === questionTypeElementsType.SingleMultiple\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  TrueFalseQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (newAnswers: TrueFalseQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n\n  const addAnswer = (\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: TrueFalseQuestionAnswerInterface[] = [];\n      for (let t of oldAnswers.answer) {\n        temp = [\n          ...temp,\n          {\n            id: t.id,\n            value: t.value,\n            status: false,\n          },\n        ];\n      }\n      addAnswerItemFn(temp);\n      let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  SimpleCalculatedQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: [newAnswers[0].value],\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0].toString()\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  ShortAnswerQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: item.value,\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: \"\",\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"200px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.value[0] !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: [\n          {\n            id: newAnswers[0].id,\n            value: newAnswers[0].value,\n            status: newAnswers[0].status,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn([\n        {\n          id: oldAnswers.answer[0].id,\n          value: [item.value],\n          status: oldAnswers.answer[0].status,\n        },\n      ]);\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    return answer !== undefined\n      ? answer.answer.length !== 0 && answer.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: [\n            {\n              id: props.selectedQuestionAnswer.answers[0].id,\n              value: [\"\"],\n              status: props.selectedQuestionAnswer.answers[0].status,\n            },\n          ],\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status === true) {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[]\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of oldAnswers.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0 ? oldAnswers.answer : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: Function;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (newAnswers: MatchingQuestionAnswerInterface[]) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answer: newAnswers,\n      });\n    }\n  };\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let x = check.answer.find((itm) => itm.id === item.id);\n        if (x !== undefined && x.status !== \"\") {\n          res = true;\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let newAnswers: MatchingQuestionAnswerInterface[] = [];\n      for (let x of oldAnswers.answer) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status: item.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: true,\n          answer: newAnswers,\n        });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ans: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let testAnswerLang = testLang.answer.find(\n              (it) => it.status.toString() === ans.status\n            );\n            if (testAnswerLang !== undefined) {\n              return testAnswerLang.status.toString();\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let ans = temp.answer.find((itm) => itm.id === x);\n      if (ans !== undefined && ans.status !== \"\") {\n        if (props.selectedQuestionAnswer.question_id !== null) {\n          return checkAnswerStatus(\n            props.selectedQuestionAnswer.question_id,\n            props.selectedLanguage,\n            ans\n          );\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        for (let ans of item.answer) {\n          res = [\n            ...res,\n            {\n              id: ans.id,\n              lang: item.language,\n              status: ans.status.toString(),\n            },\n          ];\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionTypeElementsType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-80 md:pb-60\">\n          {/* <div\n            className={`h-8 ${\n              props.submitQuestionAnswer === true\n                ? \"animate__animated animate__fadeIn bg-yellow-50 text-yellow-700 animate-pulse\"\n                : \"text-blue-400 italic\"\n            } px-3 py-2 rounded  font-bold text-sm`}\n          >\n            {props.submitQuestionAnswer === true\n              ? \"Saving your answer ...\"\n              : \"\"}\n          </div> */}\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.title,\n                    }}\n                    className=\"text-sm text-gray-600\"\n                  ></div>\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.description,\n                    }}\n                    className=\"text-lg text-gray-800 font-bold\"\n                  ></div>\n                </div>\n              )}\n              <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                <div\n                  onClick={() => setSelectLang(!selectLang)}\n                  className=\"flex flex-row items-center gap-2\"\n                >\n                  <div className=\"rounded-l\">\n                    <BiWorld className=\"text-2xl my-2 ml-2\" />\n                  </div>\n                  <div className=\"flex flex-col\" style={{ width: \"97px\" }}>\n                    <span className=\"text-xs font-bold italic text-gray-700\">\n                      Language\n                    </span>\n                    <span\n                      title={\n                        filterLanguages().find(\n                          (itm) => itm.key === selectedLanguage\n                        )?.value\n                      }\n                      className=\"text-sm font-bold text-blue-600 truncate\"\n                      style={{ width: \"97px\" }}\n                    >\n                      {\n                        filterLanguages().find(\n                          (itm) => itm.key === selectedLanguage\n                        )?.value\n                      }\n                    </span>\n                  </div>\n                  <div\n                    className={`${\n                      selectLang === true\n                        ? \"bg-yellow-800 text-white\"\n                        : \"bg-gray-50 hover:bg-blue-600\"\n                    } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                  >\n                    {selectLang === true ? (\n                      <FaTimes className=\"text-xl my-2 mx-2\" />\n                    ) : (\n                      <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                    )}\n                  </div>\n                </div>\n                {selectLang === true && (\n                  <div\n                    className=\"relative rounded overflow-hidden\"\n                    style={{ width: \"182px\" }}\n                  >\n                    <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                      {filterLanguages().map((item, i) => (\n                        <span\n                          onClick={() => {\n                            props.setQuestionLanguage(item.key);\n                            setSelectLang(!selectLang);\n                            setSelectedLanguage(item.key);\n                          }}\n                          key={i + 1}\n                          className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                            selectedLanguage === item.key\n                              ? \"bg-blue-800 font-extrabold border-blue-800\"\n                              : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                          }`}\n                        >\n                          {selectedLanguage === item.key ? (\n                            <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                          ) : (\n                            <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                          )}{\" \"}\n                          {item.value}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"my-4 py-2 px-2 bg-white rounded\"\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answer\n                      )\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answer\n                    ),\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import React from \"react\";\n// import { FaEdit } from \"react-icons/fa\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\nimport { SiMicrosoftexcel } from \"react-icons/si\";\nimport { Link } from \"react-router-dom\";\n\ninterface ChooseMethodProps {\n  close?: (state: boolean) => void;\n}\n\nexport const ChooseMethod = (props: ChooseMethodProps) => {\n  return (\n    <div className=\"px-2 py-2\">\n      <div className=\"flex flex-row items-center gap-3\">\n        {props.close === undefined && (\n          <Link to=\"/question-bank\">\n            <IoMdArrowRoundBack\n              className={`text-blue-600 text-4xl rounded-full bg-gray-100 cursor-pointer animate__animated animate__lightSpeedInLeft`}\n            />\n          </Link>\n        )}\n        {props.close === undefined && (\n          <div className=\"flex flex-col\">\n            <span className=\"text-gray-800 text-3xl font-extrabold\">\n              Choose method\n            </span>\n            <span className=\"text-gray-600 text-sm\">\n              Prepare question bank by adding questions through two main methods\n            </span>\n          </div>\n        )}\n      </div>\n      <div\n        className={`${\n          props.close === undefined ? \"mt-6\" : \"-mt-6\"\n        } grid md:grid-cols-2 bg-white px-4 py-4 rounded`}\n      >\n        {/* <div className=\"col-span-1\">\n          <Link to=\"/add-question\">\n            <div\n              className={`bg-blue-50 hover:bg-blue-100 border border-white px-6 py-6 rounded text-2xl mr-2 flex flex-col justify-center items-center ${\n                props.close === undefined &&\n                \"animate__animated animate__zoomIn animate__fast\"\n              }`}\n            >\n              <FaEdit className=\"text-8xl text-primary\" />\n              <span className=\"text-primary font-bold\">Add manually</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                This option allows you to prepare one question at time using\n                system's interface\n              </span>\n            </div>\n          </Link>\n        </div> */}\n        <div className=\"col-span-1\">\n          <Link to=\"/upload-questions\">\n            <div\n              className={`bg-white hover:bg-gray-100 border border-blue-600 hover:border-gray-600 px-6 py-6 rounded text-2xl ml-2 flex flex-col justify-center items-center ${\n                props.close === undefined &&\n                \"animate__animated animate__zoomIn animate__fast\"\n              }`}\n            >\n              <SiMicrosoftexcel className=\"text-8xl text-gray-600\" />\n              <span className=\"text-gray-600 font-bold\">Upload excel</span>\n              <span className=\"text-xs text-center text-gray-600 mt-2\">\n                The option of uploading list of questions through excel file.\n                You can also upload the exam at time\n              </span>\n            </div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  QuestionAnswersStore,\n  removeQuestion,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport * as Interfaces from \"../../../interfaces/index\";\nimport {\n  course,\n  QuestionInterface,\n  QuestionItemInterface,\n} from \"../../../interfaces/index\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { getQuestionType } from \"../../../utils/question_bank\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport { ChooseMethod } from \"../AddQuestion/ChooseMethod/ChooseMethod\";\nimport EditQuestion from \"../AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { LoadingType } from \"../../../components/Loading/LoadingV2\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport SearchData from \"../../../utils/search\";\nimport QuestionPreview from \"../../../components/QuestionPreview/QuestionPreview\";\nimport { MdClose } from \"react-icons/md\";\n\ninterface QuestionsListProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  removeQuestion: (\n    question_id: string,\n    callback: (loading: boolean, status: boolean, msg: string) => void\n  ) => void;\n}\ninterface QuestionsListState {\n  loading: boolean;\n  searchQuestionInput: string;\n  selectCourse: boolean;\n  addQuestion: boolean;\n  editQuestion: QuestionInterface | null;\n  preview: QuestionInterface | null;\n  selectedQuestion: QuestionInterface | null;\n  successMessage: string;\n  errorMessage: string;\n  searchByTpe: string | null;\n  displaySearch: boolean;\n}\n\nclass _QuestionsList extends Component<QuestionsListProps, QuestionsListState> {\n  constructor(props: QuestionsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchQuestionInput: \"\",\n      selectCourse: false,\n      addQuestion: false,\n      editQuestion: null,\n      preview: null,\n      selectedQuestion: null,\n      successMessage: \"\",\n      errorMessage: \"\",\n      searchByTpe: null,\n      displaySearch: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setAddQuestion = (status: boolean) => {\n    this.setState({ addQuestion: status });\n  };\n\n  chooseCourse = (course: course | null) => {\n    this.props.setSelectedCourse(course);\n    if (course !== null) {\n      this.props.loadQuestionBank(course.course_id, this.setLoading);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  // setSelectedQuestion = (question: exam_question) => {};\n\n  removeSelectedQuestion = (question_id: string) => {\n    this.props.removeQuestion(\n      question_id,\n      (loading: boolean, status: boolean, msg: string) => {\n        this.setState({ loading: loading });\n        if (loading === false && msg !== \"\") {\n          if (status === true) {\n            this.setState({ successMessage: msg });\n          } else {\n            this.setState({ errorMessage: msg });\n          }\n        }\n      }\n    );\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true });\n    } else {\n      this.setState({ selectCourse: false });\n    }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n  };\n\n  setEditQuestion = (item: QuestionInterface) => {\n    this.props.setSelectedQuestion(item);\n    this.setState({ editQuestion: item });\n  };\n\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n\n  setSelectedQuestion = (question: QuestionInterface) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  filterQuestions = (\n    questions: QuestionInterface[],\n    questionType: string | null,\n    searchKeyword: string\n  ) => {\n    let response: QuestionInterface[] = questions;\n    if (questionType !== null) {\n      response = questions.filter((item) => item.type === questionType);\n    }\n    if (searchKeyword !== \"\") {\n      let keywordsToSearch: QuestionItemInterface[] = [];\n      for (let test of response) {\n        keywordsToSearch = [...keywordsToSearch, test.question[0]];\n      }\n      let testResponse = SearchData(\n        keywordsToSearch,\n        searchKeyword\n      ) as QuestionItemInterface[];\n      response = response.filter((last) =>\n        testResponse.find(\n          (itm) =>\n            itm._id === last.question.find((lst) => lst._id === itm._id)?._id\n        )\n      );\n    }\n    return response;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div className=\"-ml-1 mr-2\">\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-col px-1\">\n                  <span className=\"text-gray-600 text-3xl font-bold\">\n                    Question Bank\n                  </span>\n                  <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.props.course.selected_course !== null && (\n                    <div\n                      onClick={() => this.setState({ selectCourse: true })}\n                      className={`btn cursor-pointer ${\n                        this.props.course.selected_course === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100  text-yellow-700 border border-yellow-200\"\n                          : \"bg-blue-50 hover:bg-blue-100  text-blue-600\"\n                      } h-max flex items-center justify-center h-10`}\n                    >\n                      {this.props.course.selected_course === null\n                        ? \"Choose course\"\n                        : \"Change course\"}\n                    </div>\n                  )}\n                  <div\n                    onClick={() => this.setState({ addQuestion: true })}\n                    className=\"btn cursor-pointer bg-white hover:bg-blue-100 border border-blue-600 text-blue-600 h-max flex items-center justify-center h-10\"\n                  >\n                    Add questions\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center gap-3\">\n                <div\n                  onClick={() =>\n                    this.setState({ displaySearch: !this.state.displaySearch })\n                  }\n                  className=\"w-full border hover:bg-blue-50 border-gray-400 px-3 py-2 rounded\"\n                >\n                  <div className=\"flex flex-row items-center justify-between text-gray-600 cursor-pointer\">\n                    <span className=\"text-sm font-bold\">\n                      {this.state.searchByTpe === null ? (\n                        <span>Filter by question type</span>\n                      ) : (\n                        this.props.questionTypes.questionTypes && (\n                          <span className=\"text-blue-600 font-bold\">\n                            {getQuestionType(\n                              this.props.questionTypes.questionTypes,\n                              this.state.searchByTpe\n                            )}\n                          </span>\n                        )\n                      )}\n                    </span>\n                    {/* <BsCaretRightFill className=\"text-xl\" /> */}\n                  </div>\n                  {this.state.displaySearch === true && (\n                    <div className=\"absolute w-auto bg-white shadow-md border rounded z-40 animate__animated animate__zoomIn animate__faster\">\n                      <div className=\"flex flex-row items-center justify-between text-white cursor-pointer bg-blue-600  px-3 py-3 rounded-t\">\n                        <span>Select question type</span>\n                        <MdClose\n                          onClick={() =>\n                            this.setState({\n                              displaySearch: !this.state.displaySearch,\n                            })\n                          }\n                          className=\"text-2xl\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => this.setState({ searchByTpe: null })}\n                        className={`flex flex-col py-2 px-3 group hover:bg-blue-100 ${\n                          this.state.searchByTpe === null ? \"bg-blue-100\" : \"\"\n                        } cursor-pointer`}\n                      >\n                        <span className=\"text-base font-extrabold text-gray-800 group-hover:text-blue-600\">\n                          All question types\n                        </span>\n                        <span className=\"text-xs text-gray-500\">\n                          Choose this option to view all types of questions\n                        </span>\n                      </div>\n                      {this.props.questionTypes.questionTypes !== null &&\n                        this.props.questionTypes.questionTypes.map(\n                          (item, i) => (\n                            <div\n                              key={i + 1}\n                              onClick={() =>\n                                item.id &&\n                                this.setState({ searchByTpe: item.id })\n                              }\n                              className={`flex flex-col py-2 px-3 group hover:bg-blue-100 ${\n                                this.state.searchByTpe === item.id\n                                  ? \"bg-blue-100\"\n                                  : \"\"\n                              } cursor-pointer`}\n                            >\n                              <span className=\"text-base font-extrabold text-gray-800 group-hover:text-blue-600\">\n                                {item.title}\n                              </span>\n                              <span className=\"text-xs text-gray-500\">\n                                {item.description}\n                              </span>\n                            </div>\n                          )\n                        )}\n                    </div>\n                  )}\n                </div>\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setState({ searchQuestionInput: e.target.value })\n                  }\n                  type=\"text\"\n                  className=\"input-white border h-10 text-sm border-gray-400 w-full\"\n                  placeholder=\"Search question by title or description\"\n                />\n              </div>\n\n              {this.state.errorMessage !== \"\" && (\n                <div\n                  onClick={() => this.setState({ errorMessage: \"\" })}\n                  className=\"px-3 py-2 rounded bg-yellow-100 text-yellow-700 font-bold my-2\"\n                >\n                  {this.state.errorMessage}\n                </div>\n              )}\n              {this.state.successMessage !== \"\" && (\n                <div\n                  onClick={() => this.setState({ successMessage: \"\" })}\n                  className=\"px-3 py-2 rounded bg-green-100 text-green-700 font-bold my-2\"\n                >\n                  {this.state.successMessage}\n                </div>\n              )}\n            </div>\n            <div className=\"flex-col\">\n              <div className=\"flex my-2 flex-row justify-between items-center\">\n                <span className=\"text-xl font-bold text-blue-600\">\n                  List of questions\n                </span>\n                <div className=\"underline font-bold text-blue-700 bg-white rounded-full px-3 py-1\">\n                  {this.props.questionBank.questions &&\n                    this.props.questionBank.questions.length}{\" \"}\n                  questions\n                </div>\n              </div>\n              <div className=\"flex flex-col\">\n                <div className=\"bg-white flex rounded\">\n                  <table className=\"table-auto w-full\">\n                    <thead>\n                      <tr className=\"text-left bg-blue-50 border-b-2 border-blue-500 text-blue-600\">\n                        <th className=\"p-3 w-1/12 pl-10\">#</th>\n                        <th className=\"p-3\">Question</th>\n                        <th>Category</th>\n                        <th>Marks</th>\n                        <th></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.loading === true ? (\n                        <tr>\n                          <td colSpan={5} className=\"pt-6\">\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : this.props.course.selected_course === null ? (\n                        <tr>\n                          <td colSpan={5}>\n                            <div className=\"bg-gray-100 flex flex-col items-center text-center gap-3 rounded px-3 py-3\">\n                              <span className=\"text-xl font-bold\">\n                                No course selected!\n                              </span>\n                              <div\n                                onClick={() =>\n                                  this.setState({ selectCourse: true })\n                                }\n                                className=\"btn bg-yellow-50 text-yellow-800 cursor-pointer hover:bg-white border border-white shadow hover:shadow-none hover:border-yellow-600\"\n                              >\n                                Choose a course\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                      ) : this.props.questionBank.questions === null ? (\n                        <tr>\n                          <td colSpan={5} className=\"pt-6\">\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : this.filterQuestions(\n                          this.props.questionBank.questions,\n                          this.state.searchByTpe,\n                          this.state.searchQuestionInput\n                        ).length === 0 ? (\n                        <tr>\n                          <td colSpan={5}>\n                            <div className=\"flex flex-col items-cnter justify-center\">\n                              <NoResult\n                                theme={NoResultThemes.Dark}\n                                value={\"\"}\n                                component={\n                                  <span className=\"font-bold text-gray-600 text-2xl -mt-4\">\n                                    No questions available!\n                                  </span>\n                                }\n                              />\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        this.props.questionTypes.questionTypes !== null &&\n                        this.props.questionTypes.questionTypes.length > 0 &&\n                        this.filterQuestions(\n                          this.props.questionBank.questions,\n                          this.state.searchByTpe,\n                          this.state.searchQuestionInput\n                        ).map((item, i) => (\n                          <tr\n                            key={i + 1}\n                            className=\"shadow-sm cursor-pointer border-none\"\n                          >\n                            <td className=\"flex items-center justify-center\">\n                              <div className=\"py-1 rounded-full my-3\">\n                                <span className=\"text-xl italic text-blue-600\">\n                                  {i < 9 && 0}\n                                  {i + 1}\n                                </span>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"py-2 px-3 flex flex-col\">\n                                <span className=\"text-sm text-gray-600 font-bold w-96 truncate\">\n                                  {item.question[0].title}\n                                </span>\n                                <span className=\"text-xs text-gray-500 w-96 truncate\">\n                                  {item.question[0].description}\n                                </span>\n                              </div>\n                            </td>\n                            <td>\n                              <div className=\"text-xs font-bold text-gray-700 w-80 truncate\">\n                                {getQuestionType(\n                                  this.props.questionTypes.questionTypes,\n                                  item.type\n                                ) === null ? (\n                                  <span className=\"text-yellow-700\">\n                                    Invalid type\n                                  </span>\n                                ) : (\n                                  <span className=\"text-blue-600\">\n                                    {getQuestionType(\n                                      this.props.questionTypes.questionTypes,\n                                      item.type\n                                    )}\n                                  </span>\n                                )}\n                              </div>\n                            </td>\n                            <td>\n                              <span className=\"text-xs text-gray-500\">\n                                {item.marks}\n                              </span>\n                            </td>\n                            <td>\n                              <div className=\"flex justify-end pr-1\">\n                                <div\n                                  onClick={() => {\n                                    this.setState({ preview: item });\n                                    this.setState({ selectedQuestion: item });\n                                  }}\n                                  className=\"border border-gray-200 btn bg-gray-100 px-3 py-1 rounded text-gray-600 text-sm flex items-center\"\n                                >\n                                  <span>View</span>\n                                </div>\n                                <div\n                                  onClick={() => {\n                                    this.setEditQuestion(item);\n                                  }}\n                                  className=\"border border-blue-200 btn bg-blue-50 px-3 py-1 rounded text-blue-600 text-sm flex items-center ml-1\"\n                                >\n                                  <span>Edit</span>\n                                </div>\n                                <div\n                                  onClick={() => {\n                                    if (\n                                      window.confirm(\n                                        \"Are you sure do you want to delete this question?\"\n                                      ) === true\n                                    ) {\n                                      this.removeSelectedQuestion(\n                                        item.question_id\n                                      );\n                                    }\n                                  }}\n                                  className=\"border border-red-200 btn px-3 py-1 rounded bg-red-50 text-red-600 text-sm flex items-center ml-1\"\n                                >\n                                  <span>Delete</span>\n                                </div>\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {this.props.course.selected_course !== null && (\n              <div className=\"bg-white px-2 py-2 mt-4 flex flex-col rounded-t\">\n                <span className=\"text-sm text-gray-600 font-bold\">Course</span>\n                <span className=\"font-bold text-xl text-blue-600\">\n                  {this.props.course.selected_course.course_code} -{\" \"}\n                  {this.props.course.selected_course.course_name}\n                </span>\n              </div>\n            )}\n            {this.props.questionBank.questions === null ||\n            this.props.questionBank.selectedQuestion === null ? (\n              <div className=\"mt-4 px-4 py-4 rounded bg-white\">\n                <Loading type={LoadingType.dark} />\n              </div>\n            ) : (\n              <EditQuestion\n                selectedQuestion={this.state.editQuestion}\n                questionsList={this.props.questionBank.questions}\n                unSelectQuestion={this.unSelectQuestion}\n              />\n            )}\n          </div>\n        )}\n        {this.state.preview !== null && this.state.selectedQuestion !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600\">\n                Question preview\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ preview: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <QuestionPreview\n              questionAnswers={[]}\n              answerQuestionFn={this.answerQuestionFn}\n              selectedQuestion={this.state.selectedQuestion}\n              setSelectedQuestion={this.setSelectedQuestion}\n              preview={true}\n              submitQuestionAnswer={false}\n            />\n          </Modal>\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestion === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-col\">\n                <span className=\"text-gray-800 text-3xl font-extrabold\">\n                  Choose method\n                </span>\n                <span className=\"text-gray-600 text-sm\">\n                  Prepare question bank by adding questions through two main\n                  methods\n                </span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestion: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <ChooseMethod close={this.setAddQuestion} />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nexport const QuestionsList = connect(mapStateToProps, {\n  loadCourses,\n  setSelectedCourse,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  loadQuestionBank,\n  loadQuestionTypes,\n  setSelectedQuestion,\n  removeQuestion,\n})(_QuestionsList);\n"],"sourceRoot":""}