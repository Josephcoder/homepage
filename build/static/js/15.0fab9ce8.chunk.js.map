{"version":3,"sources":["assets/profile.png","containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","containers/DoExam/DoEamResults/DoExamResults.tsx","containers/DoExam/DoExam.tsx"],"names":["Footer","connect","auth","doExam","candidateExam","system","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","setSelectedExamQuestion","props","findIndex","question_id","candidate_exam","x","questions","length","id","selectedIndexPrevious","selected_question","selectedIndexNext","ConfirmSubmitAnswer","exam_id","undefined","find","item","questionAnswered","question_answers","findQuestionType","type","questionTypes","SubmitAnswer","className","console","log","onClick","setProfileWindowStatus","windowStatus","profile","style","position","top","right","questionsList","selected_exam_id","height","submitQuestionAnswer","Profile","proctoring","width","src","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","events","map","i","description","time","QuestionsReview","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","Loading","setSubmitModal","itm","submitExam","maxHeight","question","DoExamTitle","useState","submitModal","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","selectedExam","course_name","course_code","alignSelf","start_time","duration","Modal","title","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","maxWidth","displayClose","padding","marginTop","ModalMarginTop","small","loadQuestionTypes","DoExamResults","todos","fetchTodos","deleteTodo","fetchAuth","FC_GetTwoFactorAuth","FC_ChangeTwoFactorType","FC_Login","FC_LoginCheckCode","redirect","setRedirect","findExamResult","answeredQuestions","exam_answers","findResult","exam_questions","to","psychometric_questions_list","question_description","user_answers","answer","status","page","_DoEam","setLoading","setState","loading","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","answerQuestionFn","setExamQuestionAnswer","setCompletedTest","completedTest","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","examDetails","periods","selected_period","check","selected_exam_details","checkUserExam","exam","positions","selected_position","RequestUserExamDetails","user_id","position_id","setLoadExamResultMessage","BackToExamination","componentDidMount","course","courses","loadCourses","exam_questions_answers","testAnswers","setLoadExamResultNoMessage","msg","PushPopupAlert","PopupAlertTheme","danger","success","GetUserExamDetails","period","user_exams_done","CleanCandidateExam","SubmitExamQuestionAnswer","language","selected_language","userAnswer","a","submitWholeExam","axios","put","API","DO_EXAM","res","errorToText","startExam","display_exam","pauseExam","examStatus","loadUserExamErr","this","exam_room_details","user_exam_details","ProctoringCandidateOnline","restartExam","loadCandidateExam","stopExam","room_id","ExamId","application_session_id","period_id","removeClient","QuestionsList","selected_course","QuestionDetails","preview","setSelectedCandidateExam","large","DATE","exam_date","dangerouslySetInnerHTML","__html","termes","Component","DoExam","ChangeExamStatus","setSelectedPeriod"],"mappings":"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","file":"static/js/15.0fab9ce8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","import React from 'react'\nimport { BiChat } from 'react-icons/bi'\nimport { IoNotifications } from 'react-icons/io5'\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findQuestionType, questionAnswered } from '../utils/utils';\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface; \n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (let x: number = 0; x < props.candidateExam.candidate_exam.questions.length; x++) {\n        if (props.candidateExam.candidate_exam.questions[x].id === question_id) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  }\n\n  let selectedIndexPrevious: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 ? \n  findIndex(props.candidateExam.selected_question) : props.candidateExam.candidate_exam.questions.length : -1;\n\n  let selectedIndexNext: number = props.candidateExam.selected_question !== null && props.candidateExam.candidate_exam !== null ? \n  findIndex(props.candidateExam.selected_question) > 0 && findIndex(props.candidateExam.selected_question) < props.candidateExam.candidate_exam.questions.length-1 ? \n  findIndex(props.candidateExam.selected_question) : findIndex(props.candidateExam.selected_question) === 0 ? 0 : -1 : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(item => questionAnswered(props.candidateExam.question_answers, item.id, findQuestionType(item.type, props.questionTypes.questionTypes)!) === true);\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  }\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {console.log(\"Selected: \", selectedIndexNext)}\n      <div className=\"flex flex-row items-center\">\n        <div onClick={() => props.setProfileWindowStatus(!props.windowStatus.profile)} \n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}>\n          <div className=\"cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div className=\"bg-red-600 text-white text-xs font-bold p-1 w-max rounded-full flex justify-center items-center shadow-lg\" style={{position: 'relative', top: '-10px', right: '-12px'}}>02</div>\n            <IoNotifications className=\"text-2xl -mt-5\" />\n          </div>\n          {props.windowStatus.questionsList === true && \n          <div className=\"bg-gray-700 text-gray-300 px-1 py-1 rounded text-xs ml-1 font-bold\">New events <br/>are available</div>}\n        </div>\n\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexPrevious-1].id)}\n        className=\"btn btn-blue flex justify-center items-center\" style={{height: 'fit-content'}}><MdChevronLeft className=\"text-xl\" /> <span className=\"hidden md:block\">Previous</span></button>\n\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">Question {props.candidateExam.selected_question && findIndex(props.candidateExam.selected_question)+1}</span>\n          {props.submitQuestionAnswer === true ? \n          <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">Saving question answer...</span>:\n          <span className=\"text-xs\">Auto save is activated</span>}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div>\n        <button \n        onClick={() => props.candidateExam.candidate_exam && props.candidateExam.selected_exam_id && ConfirmSubmitAnswer(props.candidateExam.candidate_exam.id, props.candidateExam.candidate_exam.questions[selectedIndexNext+1].id)}\n        className=\"btn btn-blue flex items-center\"><span className=\"hidden md:block\">Next</span> <MdChevronRight className=\"text-xl\" /></button>\n      </div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth;  candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;","import React from 'react'\nimport { IoClose } from 'react-icons/io5';\nimport userImage from '../../../assets/profile.png'\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose onClick={() => props.setProfileWindowStatus(false)} className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\" />\n              </div>\n            </div>\n            <div className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\" style={{width: '200px', height: '200px'}}>\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">{props.auth.user.fname} {props.auth.user.lname}</span>\n            <span className=\"text-gray-400 text-xs\">ID: {props.auth.user.n_id}</span>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>23</span>\n          </div>\n          <div className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\" style={{paddingBottom: '550px', paddingTop: '10px'}}>\n            {props.proctoring.events.length === 0 ? <div className=\"text-white font-blod\">No events found!</div> : props.proctoring.events.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-row justify-between items-center text-red-300 my-1\">\n                <span>{i + 1}</span>\n                <span>{item.description}</span>\n                <span>{item.time}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring; } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {\n\n})(_Profile);\n\nexport default Profile;","import React from 'react'\nimport { MdCheckCircle, MdClose } from 'react-icons/md'\nimport { Auth } from '../../../actions/auth'\nimport { candidateExamStoreInterface } from '../../../actions/candidate_exam'\nimport { questionTypesStoreInterface } from '../../../actions/questionTypes'\nimport { System } from '../../../actions/system'\nimport Loading from '../../../components/Loading/Loading'\nimport { course } from '../../../interfaces/course'\nimport { QuestionInterface } from '../../../interfaces/question'\nimport { ExamAnsweredQuestions, ExamPendingQuestions } from '../utils/utils'\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam ? ExamPendingQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    )\n  }\n  return (\n    <div className={`pt-4 border-t border-gray-300 ${PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"}`}>\n      {props.candidateExam.candidate_exam && AnsweredQuest.length !== props.candidateExam.candidate_exam.questions.length && PendingQuest.length !== 0 ? \n      <div>\n        <div className=\"grid md:grid-cols-2 h-full\">\n          <div className=\"md:col-span-2 h-full\">\n            <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n              {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n              <div className=\"flex flex-col\">\n                <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">Submit incomplete questions</div>\n                <div className=\"text-gray-700 text-sm text-left pb-2\">Please, make sure to complete the following remaining questions which are not yet answered. Please, if you proceed anyway, for these questions, you will not be marked!</div>\n              </div>\n              <div className=\"mr-4\">\n              <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"md:col-span-2\">\n            <div className=\"\">\n              <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                <div className=\"text-center mb-5 text-gray-600 font-bold\">Pick a question number you want to answer directly</div>\n                <div className=\"flex justify-center items-center text-center\">\n                  <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                    {props.candidateExam.candidate_exam.questions.map((item, i) => (\n                      PendingQuest.find(itm => itm.id === item.id)?.id !== undefined &&\n                        <div onClick={() => { \n                          props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                            props.candidateExam.candidate_exam.id,\n                            item.id\n                          );\n                          props.setSubmitModal(false);\n                        }} key={i + 1} className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\">{i + 1}</div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                <div onClick={() => props.setSubmitModal(false)} className=\"bg-gray-100 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-200 text-base\">Back to edit</div>\n                <div onClick={() => props.submitExam()} className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\">Submit anyway</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      : \n      <div className=\"px-4 pb-2\">\n        <div className=\"flex flex-row items-center justify-between mb-4\">\n          <div className=\"text-blue-700 font-bold\">Hey <b><u>{props.auth.user.fname}</u></b>, All questions have been answered, are you sure do you want to submit the final answers?</div>\n          <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\"><MdClose className=\"cursor-pointer font-extrabold text-3xl\" onClick={() => props.setSubmitModal(false)} /></div>\n        </div>\n        <div className=\"flex flex-row items-center justify-between\">\n          <div onClick={() => props.setSubmitModal(false)} className=\"btn cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 flex flex-row gap-2\">\n            <span className=\"\">Back to edit</span>\n          </div>\n          <div onClick={() => { props.submitExam() }} className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\">\n            <MdCheckCircle className=\"text-3xl\" />\n            <span className=\"\">Submit exam</span>\n          </div>\n        </div>\n        \n        <div className=\"my-2\">\n          <div className=\"font-extrabold text-xl text-gray-700 my-2 mt-4\">Verify your answers</div>\n          <div className=\"flex flex-col gap-3 overflow-y-auto\" style={{maxHeight: '100%'}}>\n            {props.candidateExam.candidate_exam === null ? <Loading /> :\n            AnsweredQuest.length > 0 && AnsweredQuest.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{i + 1}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question[0].description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        Done\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-span-2 float-right flex items-center justify-end\">\n                    <div onClick={() => { \n                      props.candidateExam.candidate_exam && props.setSelectedExamQuestion(\n                        props.candidateExam.candidate_exam.id,\n                        item.id\n                      );\n                      props.setSubmitModal(false);\n                    }} className=\"bg-gray-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-gray-600 border border-gray-400 flex items-center justify-center h-max md:ml-3\">Edit</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\nexport default QuestionsReview\n","import React, { Fragment } from 'react'\nimport { useState } from 'react'\nimport { IoDocumentTextOutline } from 'react-icons/io5'\nimport { MdCheckCircle, } from 'react-icons/md'\nimport Modal, { Themes, ModalSize, ModalMarginTop } from '../../../components/Modal/Modal'\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from '../utils/utils'\nimport { course } from '../../../interfaces'\nimport QuestionsReview from './QuestionsReview'\n\ninterface TestTitleInterface { \n  windowStatus: {\n    profile: boolean,\n    questionsList: boolean,\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  const [submitModal, setSubmitModal] = useState(false);\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n  \n  const TotalAnswered: number = props.candidateExam.candidate_exam ? NumberOfAnsweredQuestions(props.candidateExam.question_answers, props.candidateExam.candidate_exam.questions, props.questionTypes) : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam ? (TotalAnswered*100)/props.candidateExam.candidate_exam.questions.length : 0;\n  return (\n    <Fragment>\n    <div className=\"bg-gray-800\">\n      <div className=\"grid grid-cols-6\">\n        <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n          <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n            <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n            <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n              <span className=\"font-bold text-lg truncate -mb-1\">{props.selectedExam?.course_name}</span>\n              <span className=\"text-gray-300 text-xs truncate\">Code: {props.selectedExam?.course_code}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-span-6 md:col-span-4 lg:col-span-4\" style={{alignSelf: \"center\"}}>\n          <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n            <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n              <div className=\"text-gray-200 text-sm w-full hidden lg:block\">Completed {TotalAnswered} of {props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.questions.length}</div>\n              <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                <div className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\" style={{width: `${answeredPercentage}%`}}></div>\n              </div>\n              <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                <div className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\" style={{width: `${answeredPercentage}%`}}>\n                  <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">{answeredPercentage}%</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-4 hidden lg:block h-full\">\n              <div className=\"flex flex-row justify-center items-center h-full\">\n                <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                  <div>Start time: <span className=\"font-bold text-gray-200\">{props.candidateExam.candidate_exam?.start_time}</span></div>\n                  <div>Duration: <span className=\"font-bold text-gray-200\">\n                    {props.candidateExam.candidate_exam && \n                    props.candidateExam.candidate_exam.duration/60 > 1 ?\n                    props.candidateExam.candidate_exam.duration/60 + \" hours\" : \n                    props.candidateExam.candidate_exam && props.candidateExam.candidate_exam.duration/60 + \" hour\"}\n                    {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.duration % 60 > 0 && \", \" + props.candidateExam.candidate_exam.duration % 60 + \" mins\" }\n                  </span></div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-span-5 bg-gray-800\">\n              <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                <div className=\"flex flex-col text-xs justify-start items-center text-gray-200 pl-2 md:pl-0\">\n                  <span>Counting down</span>\n                  <span className=\"text-lg lg:text-xl font-bold\">00:59:59</span>\n                </div>\n                {props.submitQuestionAnswer === true ? \n                <div className=\"btn bg-gray-600 text-white font-bold mr-2 mt-2 animate-pulse\">Saving...</div> : \n                <button onClick={() => {props.SubmitAnswer(); setSubmitModal(true)}} type=\"button\" className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\">\n                  <MdCheckCircle className=\"text-white text-xl\" />\n                  <span>Submit</span>\n                </button>}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {submitModal === true && \n    <Modal\n      title={\"\"}\n      backDrop={true}\n      theme={props.candidateExam.question_answers.length === 0 ? Themes.default : Themes.default}\n      close={() => setSubmitModal(false)}\n      backDropClose={true}\n      widthSizeClass={ModalSize.maxWidth}\n      displayClose={false}\n      padding={{title: false,}}\n      marginTop={ModalMarginTop.small} >\n        <QuestionsReview \n        auth={props.auth} \n        candidateExam={props.candidateExam} \n        system={props.system} \n        setSelectedExamQuestion={props.setSelectedExamQuestion} \n        submitQuestionAnswer={props.submitQuestionAnswer} \n        questionTypes={props.questionTypes} \n        loadQuestionTypes={props.loadQuestionTypes} \n        submitExam={props.submitExam} \n        selectedExam={props.selectedExam}\n        setSubmitModal={setSubmitModal} />\n    </Modal>}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): { auth: Auth; candidateExam: candidateExamStoreInterface; system: System; } => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React, { useState } from 'react'\nimport { newAnswer } from '../DoExam'\nimport { psychometric_questions_list } from '../QuestionsList/QuestionsList';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport {\n  Todo,\n  Auth,\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { findResult } from '../utils/utils';\n\ninterface DoExamResultsInterface { \n  // currentPosition: Interfaces.PositionAPI | null;\n  // setCurrentPosition: (position: Interfaces.PositionAPI | null) => void;\n  // setApplicationStep: (step: ApplicationStepsTypes) => void;\n  // windowStatus: {\n  //   profile: boolean,\n  //   questionsList: boolean,\n  // };\n  // setProfileWindowStatus: (status: boolean) => void;\n  // setQuestionsListWindowStatus: (status: boolean) => void;\n  testAnswers: number;\n  answeredQuestions: newAnswer[] | [] | undefined;\n  // setSelectedQuestion: (question: exam_question) => void;\n  doExam: examDataInterface;\n  auth: Auth;\n  SubmitExamAnswers: (user_id: string) => void;\n  page: string;\n}\n\nconst _DoExamResults = (props: DoExamResultsInterface) => {\n  const [redirect, setRedirect] = useState(false);\n  const findExamResult = () => {\n    let marks: number = 0;\n    if (props.answeredQuestions !== undefined) {\n      if (props.doExam.exam_answers) {\n        return findResult(props.doExam.exam_answers.exam_questions, props.answeredQuestions);\n      }\n    }\n    return marks; \n  }\n\n  if (redirect === true) {\n    return <Redirect to=\"/dashboard\" />\n  }\n  return (\n    <div className=\"\">\n      {props.answeredQuestions !== undefined &&\n      <div className=\"mt-5 bg-white rounded shadow px-3 py-3\">\n      <div className=\"text-4xl font-bold text-blue-600\">Exam results</div>\n      <div className=\"text-sm text-gray-500\"></div>\n        <div className=\"my-2\">\n          <div className=\"font-bold text-lg text-gray-700 my-2 mt-4\">Answers history</div>\n          <div className=\"flex flex-col gap-3\">\n            {psychometric_questions_list.map((item, i) => (\n              <div key={i + 1} className=\"bg-gray-200 px-2 py-2 rounded\">\n                <div className=\"grid md:grid-cols-12 w-full\">\n                  <div className=\"col-span-10 flex flex-row items-center gap-3\">\n                    <div key={i + 1} className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\">{item.question_id}</div>\n                    <div className=\"text-sm\">\n                      <div>{item.question_description}</div>\n                      <div className=\"text-blue-700 font-bold text-sm\">Answer:&nbsp;\n                        {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.answer}\n                      </div>\n                    </div>\n                  </div>\n                  {props.answeredQuestions !== undefined && props.answeredQuestions.find(itm => itm.question_id === item.question_id)?.user_answers?.status === true ? \n                  <div className=\"col-span-2 bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 flex items-center justify-center h-max md:ml-3\">\n                    Right\n                  </div> : \n                  <div className=\"col-span-2 bg-yellow-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-yellow-600 border border-yellow-400 flex items-center justify-center h-max md:ml-3\">\n                    Wrong\n                  </div>}\n                </div>\n              </div>\n            ))}\n\n            <div className={`border-2 ${findExamResult() >= 50 ? \"border-blue-400 bg-blue-100 text-blue-700\" : \"border-red-400 bg-red-100 text-gray-700\"} px-3 py-3 rounded flex flex-row justify-between items-center`}>\n              <div className=\"\">\n                <div className=\"text-left text-xl\">Total marks</div>\n                <div className=\"text-5xl\">{findExamResult()}%</div>\n              </div>\n              {\n              props.page !== \"doExam\" ? \"\" : findExamResult() >= 50 ?\n              <button onClick={() => { props.SubmitExamAnswers(props.auth.user.n_id); setRedirect(true)}} className=\"btn btn-blue\">Continue</button>\n              :\n              <Link className=\"btn border border-gray-400 bg-white\" to=\"/dashboard\">Back to home</Link>}\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  todos,\n  auth,\n  doExam,\n}: StoreState): { todos: Todo[]; auth: Auth; doExam: examDataInterface } => {\n  return { todos: todos, auth: auth, doExam: doExam };\n};\n\nconst DoExamResults = connect(mapStateToProps, {\n  fetchTodos,\n  deleteTodo,\n  fetchAuth,\n  FC_GetTwoFactorAuth,\n  FC_ChangeTwoFactorType,\n  FC_Login,\n  FC_LoginCheckCode,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers\n})(_DoExamResults);\n\nexport default DoExamResults;","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { question_answer } from \"../../interfaces/index\";\nimport DoExamResults from \"./DoEamResults/DoExamResults\";\nimport { CandidateExam, CandidateExamQuestionAnswer, ExamInterface, ExamResultsDetails, examStatus, userExamDetails } from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdInfoOutline } from \"react-icons/md\";\n\ninterface DoExamProps {\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (exam_id: string | null) => void;\n  loadCandidateExam: (exam_id: string, CheckUserExam: (candidateExam: CandidateExam) => void, callback: (loading: boolean) => void) => void;\n  setSelectedExamQuestion: (exam_id: string, question_id: string | null) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (userExamDetails: userExamDetails, callback: (loading: boolean) => void, setLoadExamResultMessage: (msg: string, status: boolean) => void, BackToExamination: (exam: ExamResultsDetails) => void) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (answer: CandidateExamQuestionAnswer, callback: (loading: boolean) => void, actionStatus: (msg: string, status: boolean) => void) => void;\n  GetUserExamDetails: (request: RequestUserExamDetailsInterface, callback: (loading: boolean) => void) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  }\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    this.props.setExamQuestionAnswer(answer);\n    console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n  \n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check\n      }\n    }\n    return null;\n  }\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (this.props.positions.selected_position !== null && this.props.candidateExam.selected_exam_details !== null) {\n      this.props.RequestUserExamDetails({\n        user: this.props.auth.user.user_id,\n        position: this.props.positions.selected_position.position_id,\n        exam: exam,\n      }, this.setLoading, this.setLoadExamResultMessage, this.props.BackToExamination)\n    }\n  }\n\n  componentDidMount = () => {\n    if (this.props.course.courses === null || this.props.course.courses.length === 0) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (this.props.questionTypes.questionTypes === null || this.props.questionTypes.questionTypes.length === 0) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  }\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      this.props.GetUserExamDetails({\n        period: this.props.candidateExam.candidate_exam.period,\n        course: this.props.candidateExam.candidate_exam.course,\n        user: this.props.auth.user.user_id\n      }, this.setLoading);\n      let test = this.props.candidateExam.user_exams_done.find(itm => itm.id === this.props.candidateExam.candidate_exam?.id);\n      if (test === undefined) {\n        this.props.CleanCandidateExam(this.props.candidateExam.candidate_exam.id);\n      }\n    }\n  }\n\n  SubmitAnswer = () => {\n    if (this.props.candidateExam.candidate_exam !== null && this.props.candidateExam.question_answers.length > 0) {\n      for (let answer of this.props.candidateExam.question_answers) {\n        if (answer.status === false) { //Means updated need to be submitted!\n          this.props.SubmitExamQuestionAnswer({\n            exam: this.props.candidateExam.candidate_exam.id,\n            question: answer.question_id,\n            language: this.props.candidateExam.selected_language,\n            userAnswer: answer.answer\n          }, this.setSubmitQuestionAnswer, this.setLoadExamResultNoMessage)\n        }\n      }\n    }\n  }\n\n  submitExam = async () => {\n    if (this.props.candidateExam.candidate_exam !== null) {\n      let exam_id = this.props.candidateExam.candidate_exam.id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(`${API.DO_EXAM}/user/submit/${exam_id}`);\n        if (res) {\n          console.log(\"Put: \", res);\n          this.props.CleanCandidateExam(exam_id);\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success\n          });\n        }\n      } catch (error: any) {\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  }\n\n  startExam = () => {\n    this.setState({ display_exam: true });\n  }\n  pauseExam = () => {\n    this.setState({ display_exam: false });\n  }\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/applications\" />\n    }\n\n    if (this.state.loading === true || this.props.candidateExam.exam_room_details === null) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">Loading, Please wait...</div>\n            <Loading />\n          </div>\n        </div>\n      )\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">Submitting your exam, Please wait...</div>\n            <Loading />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50\">\n        <Fragment>\n        {this.props.candidateExam.user_exam_details === null ?\n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n              <div className=\"text-gray-600 text-lg px-4 mb-4\">Loading questions, Please wait...</div>\n              <Loading />\n            </div>\n          </div> :\n        <ProctoringCandidateOnline\n          startExam={() => {\n            this.startExam()\n          }}\n          restartExam={() => {\n            this.props.candidateExam.selected_exam_id !== null && this.props.loadCandidateExam(this.props.candidateExam.selected_exam_id, this.checkUserExam, this.setLoading)\n          }}\n          stopExam={() => {\n            console.log(\"Pause\");\n            // this.pauseExam()\n          }}\n          room_id={this.props.candidateExam.exam_room_details.room_id}\n          exam_id={this.props.candidateExam.user_exam_details.ExamId.exam_id}\n          position_id={this.props.candidateExam.exam_room_details.position_id}\n          application_session_id={this.props.candidateExam.exam_room_details.period_id}\n          removeClient={() => this.submitExam()}\n        >\n          {this.state.display_exam === false ? \n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n              <MdInfoOutline className=\"text-9xl text-blue-600\" />\n              <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">Please wait for the supervisor</div>\n              <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">The supervisor will allow you to start your exam, please wait or contact him/her when forgot to let you start exam!</div>\n              <Loading />\n            </div>\n          </div> :\n          this.props.candidateExam.candidate_exam === null || this.props.candidateExam.user_exam_details === null ? \n          <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n            <div className=\"bg-white rounded mx-4 my-2 px-4 py-4 w-full h-full\">\n              <div className=\"text-gray-500 text-lg px-4 mb-4\">Waiting for loading exam...</div>\n              <Loading />\n            </div>\n          </div> :\n          <div>\n            {this.state.completedTest === true &&\n            this.props.doExam.exam_answers?.exam_questions_answers\n              ?.questionAnswers !== null ? (\n              <div className=\"max-w-7xl mx-auto px-2 md:px-4 lg:px-24\">\n                <DoExamResults\n                  page=\"doExam\"\n                  answeredQuestions={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers\n                  }\n                  testAnswers={\n                    this.props.doExam.exam_answers?.exam_questions_answers\n                      ?.questionAnswers.length === undefined\n                      ? 0\n                      : this.props.doExam.exam_answers?.exam_questions_answers\n                          ?.questionAnswers.length\n                  }\n                />\n              </div>\n            ) : (\n              <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                <div className=\"grid md:grid-cols-12 h-full\">\n                  {this.state.windowStatus.profile === true && (\n                    <div\n                      className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                    >\n                      <Profile\n                        setProfileWindowStatus={this.setProfileWindowStatus}\n                      />\n                    </div>\n                  )}\n                  <div\n                    className={`col-span-${\n                      this.state.windowStatus.profile === false ? \"12\" : \"10\"\n                    } bg-gray-800 shadow-lg h-full`}\n                  >\n                    <div className=\"flex flex-row h-screen bg-gray-800\">\n                      <div className=\"h-full\">\n                        {/* Questions list */}\n                        <div className={`h-full`}>\n                          <QuestionsList\n                            windowStatus={this.state.windowStatus}\n                            setProfileWindowStatus={this.setProfileWindowStatus}\n                            setQuestionsListWindowStatus={\n                              this.setQuestionsListWindowStatus\n                            }\n                            questionTypes={this.props.questionTypes}\n                            loadQuestionTypes={this.props.loadQuestionTypes}\n                            SubmitAnswer={this.SubmitAnswer}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"w-full h-full\">\n                        {/* Do exam test title */}\n                        <DoExamTitle\n                          setCompletedTest={this.setCompletedTest}\n                          windowStatus={this.state.windowStatus}\n                          setProfileWindowStatus={this.setProfileWindowStatus}\n                          setQuestionsListWindowStatus={\n                            this.setQuestionsListWindowStatus\n                          }\n                          questionTypes={this.props.questionTypes}\n                          loadQuestionTypes={this.props.loadQuestionTypes}\n                          submitQuestionAnswer={this.state.submitQuestionAnswer}\n                          submitExam={this.submitExam}\n                          selectedExam={this.props.course.selected_course}\n                          SubmitAnswer={this.SubmitAnswer}\n                        />\n                        {/* Question details */}\n                        <QuestionDetails\n                          questionAnswers={\n                            this.props.doExam.exam_answers?.exam_questions_answers\n                              ?.questionAnswers\n                          }\n                          answerQuestionFn={this.answerQuestionFn}\n                          selectedQuestion={this.state.selectedQuestion}\n                          setSelectedQuestion={this.setSelectedQuestion}\n                          preview={false}\n                          submitQuestionAnswer={this.state.submitQuestionAnswer}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <Footer\n                  windowStatus={this.state.windowStatus}\n                  setProfileWindowStatus={this.setProfileWindowStatus}\n                  setQuestionsListWindowStatus={this.setQuestionsListWindowStatus}\n                  questionTypes={this.props.questionTypes}\n                  loadQuestionTypes={this.props.loadQuestionTypes}\n                  SubmitAnswer={this.SubmitAnswer}\n                  submitQuestionAnswer={this.state.submitQuestionAnswer}\n                />\n              </div>\n            )}\n          </div>}\n        </ProctoringCandidateOnline>}\n        {this.props.candidateExam.candidate_exam === null &&\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.large}\n              displayClose={false}\n              padding={{title: false,}} >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? <Loading /> :\n                  <div>\n                    <div className=\"flex flex-row items-center gap-2\">\n                      {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                      <div className=\"my-2 w-full\">\n                        <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                          {this.props.course.selected_course && \n                          <div>\n                            <span>{this.props.course.selected_course.course_code}-</span>\n                            <span>{this.props.course.selected_course.course_name}</span>\n                          </div>}\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">Exam date:</span>\n                          <span className=\"text-blue-600 font-bold\">{DATE(this.examDetails()!.exam_date, \"DD/MM/YYYY\")}</span>\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">Start time:</span>\n                          <span className=\"text-blue-600 font-bold\">{this.examDetails()?.start_time}</span>\n                        </div>\n                        <div className=\"flex flex-row gap-3 text-sm\">\n                          <span className=\"text-gray-600 font-normal\">Exam duration:</span>\n                          {this.examDetails() !== null && <span className=\"text-blue-600 font-bold\">{this.examDetails()!.duration / 60 >= 1 && this.examDetails()!.duration / 60 + \" hrs\"} {this.examDetails()!.duration % 60 > 0 && <span>{this.examDetails()!.duration % 60} mins</span>}</span>}\n                        </div>\n                      </div>\n                    </div>\n                    {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                    <div className=\"flex flex-row justify-center items-center\">\n                      {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                    </div>\n                    <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                      <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                      <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">Examination rules</div>\n                        {this.examDetails() !== null && <div dangerouslySetInnerHTML={{__html: this.examDetails()!.termes}}></div>}\n                      </div>\n                      <span className=\"text-blue-700\">If you are ready, start click to start the exam now, The system will start to count your time!</span>\n                    </div>\n                    <div className=\"flex flex-row items-center justify-between mt-2\">\n                      <button onClick={() => this.props.setSelectedCandidateExam(null)} className=\"btn bg-gray-50 text-gray-600 border\">Go Back</button>\n                      <button onClick={() => this.props.candidateExam.selected_exam_id !== null && this.props.loadCandidateExam(this.props.candidateExam.selected_exam_id, this.checkUserExam, this.setLoading)} className=\"btn bg-blue-600 text-white\">I accept, Start exam</button>\n                    </div>\n                  </div>}\n                </div>\n            </Modal>}\n          </Fragment>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n}: StoreState): { auth: Auth; doExam: examDataInterface; candidateExam: candidateExamStoreInterface; system: System; course: courseStoreInterface; periods: applicationPeriodsStoreInterface; questionTypes: questionTypesStoreInterface; positions: positionsStoreInterface; } => {\n  return { auth: auth, doExam: doExam, candidateExam: candidateExam, system: system, course: course, periods: periods, questionTypes: questionTypes, positions: positions, };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n})(_DoEam);\n"],"sourceRoot":""}