{"version":3,"sources":["utils/question_bank.ts","components/AnswersDetails/CandidateAnswersDetails.tsx","containers/CandidateExams/CandidateExams.tsx"],"names":["ExamTimeStatus","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","type","check","find","itm","id","undefined","check_type","questionTypeElements","key","element","findTotalMarks","courses","results","sum","course","test","course_id","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","length","status","msg","el","filter","nextCharacter","i","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","validateExamDate","exam_date","start_time","end_time","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","Waiting","getTime","Online","InitializeExamsDone","selected_period","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","session_plan_id","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","CandidateAnswersDetails","props","tomorrow","setDate","date","compareWithToday","exam_id","className","DATE","showAnswers","tooday","myDate","todayConverted","get","ChangeLocationComponent","useState","display","setDisplay","onClick","changeLocation","_CandidateExams","setLoading","setState","loading","setloadingExamsDone","loadingExamsDone","loadCandidateExams","user","period","a","setAxiosToken","axios","API","QBank","candidateExams","data","console","log","alert","errorToText","loadUserProfileDetails","FC_GetProfileDetails","auth","InitializationFn","application","user_exams_done","application_session","position","exams","loadUserApplications","APPLICATION","candidateApplications","candidate_applications","AddUserApplication","findLocation","state","item","updateLocation","application_id","post","selectedCourse","centersModal","maxExamModal","successMessage","updateLocationFunction","addLocation","course_name","course_code","location","proctoring_type","componentDidMount","loadApplicationPeriods","sex","removeDuplicatesExams","temp","_id","removeDuplicatesNotPreparedExams","setTimeOut","temps","activeExams","selectApplication","applications","setMaxExamModal","closeModal","selectedExam","FC_Access","this","UserAccessList","MY_APPLICATION","view","selected_exam_id","to","title","preparedExam","map","user_status","center_name","room_number","description","school_levels","UserExamStatus","Editing","Paused","application_status","ApplicationStates","Shortlisted","setSelectedPosition","setSelectedCourse","setSelectedCandidateExam","Done","Removed","user_marks","discription","termes","rules","found","duration_min","getMinutesFromTwoDates","timeout","returnString","labels","days","notPreparedExam","positionCourses","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","Component","CandidateExams","connect","periods","LoadCandidateApplications"],"mappings":"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","file":"static/js/60.a7deb6b7.chunk.js","sourcesContent":["import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import moment from \"moment\";\nimport React from \"react\";\nimport {\n  compareWithToday,\n  ExamDoneDetailsAnswers,\n} from \"../../containers/CandidateExams/CandidateExams\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { DATE } from \"../../utils/functions\";\nimport { AnswersDetails } from \"./AnswersDetails\";\n\ninterface CandidateAnswersDetailsProps {\n  exam_id: ExamDoneDetailsAnswers;\n  showAnswers: boolean;\n}\n\nconst CandidateAnswersDetails = (props: CandidateAnswersDetailsProps) => {\n  const today = moment().tz(TimeZone);\n  let tomorrow = new Date();\n  tomorrow.setDate(today.date() + 1);\n  return (\n    <div>\n      {/* Check if period is open for claims */}\n      {compareWithToday(today, props.exam_id.exam_date) === false ? (\n        <div className=\"bg-yellow-100 text-yellow-800 font-extrabold text-center flex flex-col items-center justify-center text-lg px-2 py-6\">\n          <div className=\"mb-5 text-3xl\">\n            Please wait, the exam details will be visible soon!\n          </div>\n          <div className=\"text-gray-600\">Exam details will be visible from</div>\n          <div className=\"bg-white rounded-full px-3 py-1 text-gray-700\">\n            {DATE(tomorrow.toString())}\n          </div>\n        </div>\n      ) : (\n        <AnswersDetails\n          exam_id={props.exam_id}\n          showAnswers={props.showAnswers}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CandidateAnswersDetails;\n","import React, { Component, Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { BsFillFileEarmarkTextFill } from \"react-icons/bs\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { errorToText } from \"../../utils/errors\";\nimport { setAxiosToken } from \"../../utils/AxiosToken\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"../../utils/app.config\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  Auth,\n  CandidateApplicationsStoreInterface,\n  candidateExamStoreInterface,\n  FC_Access,\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { UserExamStatus, UserExamsListInterface } from \"../../interfaces/exam\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { DATE, getMinutesFromTwoDates } from \"../../utils/functions\";\nimport { CountDown } from \"../../components/CountDown/CountDown\";\nimport { ExamTimeStatus, validateExamDate } from \"../../utils/question_bank\";\nimport { course, PositionAPI, PositionAPICourse } from \"../../interfaces\";\nimport {\n  ApplicationStates,\n  GetApplicationsAPI,\n} from \"../../interfaces/application\";\nimport { UserAccessList } from \"../../utils/auth_access\";\nimport { MdClose } from \"react-icons/md\";\nimport ChooseExamCenter, {\n  LocationTableInterface,\n} from \"../Application/ExamCenter/ChooseExamCenter\";\nimport { sentExamInterface } from \"../Application/ExamCenter/ExamCenter\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport CandidateAnswersDetails from \"../../components/AnswersDetails/CandidateAnswersDetails\";\n\nexport const compareWithToday = (tooday: moment.Moment, date: string) => {\n  const myDate = DATE(date, \"MM/DD/YYYY\");\n  let todayConverted =\n    (tooday.get(\"month\") < 9 ? \"0\" : \"\") +\n    (tooday.get(\"month\") + 1).toString() +\n    \"/\" +\n    tooday.get(\"date\") +\n    \"/\" +\n    tooday.get(\"year\");\n  if (new Date(myDate).getTime() < new Date(todayConverted).getTime()) {\n    return true;\n  }\n  return false;\n};\n\nexport interface ExamDoneDetailsAnswers {\n  course: string;\n  course_name: string;\n  discription: string;\n  termes: string;\n  rules: {\n    right_click_enabled: boolean;\n    copy_enabled: boolean;\n    paste_enabled: boolean;\n    stop_candidate_when_comeback: boolean;\n    allow_to_leave_browser: boolean;\n  };\n  period: string;\n  exam_date: string;\n}\n\ninterface NotPreparedExam {\n  course: string;\n  course_name: string;\n  course_code: string;\n  position: string;\n}\ninterface changeLocProps {\n  changeLocation: () => void;\n}\ninterface CandidateExamsProps {\n  FC_GetProfileDetails: Function;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  LoadCandidateApplications: (\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedCandidateExam: (exam_id: string) => void;\n  setSelectedCourse: (course: course | null) => void;\n  setSelectedPosition: (position: PositionAPI) => void;\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  AddUserApplication: (application: GetApplicationsAPI) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n}\n\nconst ChangeLocationComponent = (props: changeLocProps): JSX.Element => {\n  const [display, setDisplay] = useState<boolean>(true);\n  if (display === false) {\n    return <div></div>;\n  }\n  return (\n    <div className=\"absolute right-2 left-2 md:right-1/4 md:left-1/4 lg:left-1/2 lg:right-auto bg-yellow-50 shadow-xl rounded py-1 px-1 flex flex-row justify-between items-center gap-2 text-yellow-800 -mt-5 lg:-mt-8\">\n      <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-1\">\n        <span className=\"font-bold\">You are advised to change location</span>\n        <div\n          onClick={props.changeLocation}\n          className=\"px-2 py-1 rounded bg-blue-100 text-blue-600 w-max cursor-pointer\"\n        >\n          Change\n        </div>\n      </div>\n      <div\n        onClick={() => setDisplay(false)}\n        className=\"bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center p-1 h-8 w-8 cursor-pointer\"\n      >\n        <MdClose className=\"text-4xl\" />\n      </div>\n    </div>\n  );\n};\n\ninterface candidatePendingExamsList {\n  preparedExam: UserExamsListInterface[];\n  notPreparedExam: NotPreparedExam[];\n}\ninterface CandidateExamsState {\n  loading: boolean;\n  loadingExamsDone: boolean;\n  candidateExams: candidatePendingExamsList | null;\n  activeExams: string[];\n  candidateApplications: GetApplicationsAPI[] | null;\n  selectedCourse: course | null;\n  centersModal: boolean;\n  maxExamModal: boolean;\n  selectedPosition: string;\n  successMessage: string;\n  selectedExam: ExamDoneDetailsAnswers | null;\n}\n\nexport class _CandidateExams extends Component<\n  CandidateExamsProps,\n  CandidateExamsState\n> {\n  constructor(props: CandidateExamsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingExamsDone: false,\n      candidateExams: null,\n      activeExams: [],\n      candidateApplications: null,\n      selectedCourse: null,\n      centersModal: false,\n      maxExamModal: false,\n      selectedPosition: \"\",\n      successMessage: \"\",\n      selectedExam: null,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setloadingExamsDone = (status: boolean) => {\n    this.setState({ loadingExamsDone: status });\n  };\n  loadCandidateExams = async (user: string, period: string) => {\n    this.setLoading(true);\n    setAxiosToken();\n    try {\n      const res = await axios.get<candidatePendingExamsList>(\n        `${API.QBank}/exam/user/${user}/${period}`\n      );\n      this.setState({ candidateExams: res.data });\n      // console.log(\"My exams list: \", res.data);\n    } catch (error: any) {\n      console.log(\"My exams error: \", { ...error });\n      alert(errorToText(error));\n    }\n    this.setLoading(false);\n  };\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  InitializationFn = (application: GetApplicationsAPI) => {\n    if (this.props.candidateExam.user_exams_done.length === 0) {\n      this.props.loadExamsDone(\n        application.application_session.session_plan_id,\n        this.props.auth.user.user_id,\n        this.setloadingExamsDone\n      );\n    }\n    for (let course of application.position.courses) {\n      let testDone = this.props.candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = application.exams.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          this.props.InitializeExamDetails(\n            application.application_session.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            application.position.position_id,\n            this.setLoading\n          );\n        }\n      }\n    }\n  };\n  loadUserApplications = async () => {\n    this.setLoading(true);\n    try {\n      const res = await axios.get<GetApplicationsAPI[]>(\n        `${API.APPLICATION}/application/${this.props.auth.user.user_id}`\n      );\n      if (res.status === 200) {\n        this.setState({ candidateApplications: res.data });\n        for (let application of res.data) {\n          this.InitializationFn(application);\n        }\n        if (\n          this.props.candidateApplications.candidate_applications === null ||\n          this.props.candidateApplications.candidate_applications.length === 0\n        ) {\n          for (let application of res.data) {\n            this.props.AddUserApplication(application);\n          }\n        }\n      }\n    } catch (error: any) {\n      console.log(\"Appl ex Err: \", { ...error });\n    }\n    this.setLoading(false);\n  };\n  findLocation = (position_id: string, course_id: string) => {\n    if (this.state.candidateApplications !== null) {\n      const test = this.state.candidateApplications.find(\n        (item) =>\n          item.position.position_id === position_id &&\n          item.exams.filter((itm) => itm.course_id === course_id)\n      );\n      if (test !== undefined) {\n        let course = test.exams.find((itm) => itm.course_id === course_id);\n        if (course !== undefined) {\n          return course;\n        }\n      }\n    }\n    return null;\n  };\n  updateLocation = async (\n    application_id: string,\n    exams: sentExamInterface[]\n  ) => {\n    this.setState({ loading: true });\n    for (let i in exams) {\n      try {\n        const res = await axios.post(\n          `${API.APPLICATION}/application/updatemissed`,\n          {\n            application_id: application_id,\n            exams: exams[i],\n          }\n        );\n        if (res.status === 200) {\n          this.setState({\n            selectedCourse: null,\n            centersModal: false,\n            maxExamModal: false,\n            selectedPosition: \"\",\n            successMessage: \"Location updated successfully!\",\n          });\n          this.loadUserApplications();\n        }\n      } catch (error: any) {\n        console.log(\"Update loc err: \", { ...error });\n      }\n    }\n  };\n  updateLocationFunction = (exams: sentExamInterface[]) => {\n    if (this.state.candidateApplications !== null) {\n      let application = this.state.candidateApplications.find(\n        (item) => item.position.position_id === this.state.selectedPosition\n      );\n      if (application !== undefined) {\n        this.updateLocation(application.application_id, exams);\n      } else {\n        alert(\"Invalid application\");\n      }\n    } else {\n      alert(\"Missing application\");\n    }\n  };\n  addLocation = (\n    course_id: string,\n    course_name: string,\n    course_code: string,\n    location: LocationTableInterface,\n    exam_id: string\n  ) => {\n    return this.updateLocationFunction([\n      {\n        course_id: course_id,\n        proctoring_type: \"Center\",\n        center_id: location.center_id,\n        district_id: location.district_id,\n      },\n    ]);\n  };\n  componentDidMount = () => {\n    this.props.loadApplicationPeriods(this.setLoading);\n\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    this.loadUserApplications();\n    if (this.props.auth.application_session !== null) {\n      this.loadCandidateExams(\n        this.props.auth.user.user_id,\n        this.props.auth.application_session.session_plan_id\n      );\n    }\n    if (this.props.auth.application_session !== null) {\n      this.props.loadExamsDone(\n        this.props.auth.application_session.session_plan_id,\n        this.props.auth.user.user_id,\n        this.setloadingExamsDone\n      );\n    }\n  };\n\n  removeDuplicatesExams = (\n    exams: UserExamsListInterface[]\n  ): UserExamsListInterface[] => {\n    let temp: UserExamsListInterface[] = [];\n    if (this.state.candidateApplications !== null) {\n      for (let item of exams) {\n        if (\n          this.state.candidateApplications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm._id === item._id) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n\n  removeDuplicatesNotPreparedExams = (\n    exams: NotPreparedExam[]\n  ): NotPreparedExam[] => {\n    let temp: NotPreparedExam[] = [];\n    if (this.state.candidateApplications !== null) {\n      for (let item of exams) {\n        if (\n          this.state.candidateApplications.find(\n            (test) => test.position.position_id === item.position\n          ) !== undefined\n        ) {\n          if (temp.find((itm) => itm.course === item.course) === undefined) {\n            temp = [...temp, item];\n          }\n        }\n      }\n    }\n    return temp;\n  };\n  setTimeOut = (exam_id: string) => {\n    let temps: string[] = this.state.activeExams;\n    this.setState({\n      activeExams: [...temps, exam_id],\n    });\n  };\n  selectApplication = (\n    applications: GetApplicationsAPI[] | null,\n    position_id: string,\n    course_id: string\n  ): GetApplicationsAPI | null => {\n    if (applications !== null) {\n      let temp = applications.find(\n        (item) => item.position.position_id === position_id\n      );\n      if (temp !== undefined) {\n        if (\n          temp.position.courses.find((itm) => itm.course_id === course_id) !==\n          undefined\n        ) {\n          return temp;\n        }\n      }\n    }\n    return null;\n  };\n  setMaxExamModal = (status: boolean) => {\n    this.setState({ maxExamModal: status });\n  };\n\n  changeLocation = (item: PositionAPICourse) => {\n    this.setState({ selectedCourse: item, centersModal: true });\n    this.setMaxExamModal(true);\n  };\n\n  closeModal = () => {\n    this.setState({ centersModal: false });\n    this.setMaxExamModal(false);\n  };\n\n  render() {\n    const today = moment().tz(TimeZone);\n    // console.log(\"TODAY: \", today.get(\"days\"));\n    if (!FC_Access(this.props.auth, UserAccessList.MY_APPLICATION).view) {\n      return <Redirect to=\"/\" />;\n    }\n    if (this.props.candidateExam.selected_exam_id !== null) {\n      return <Redirect to=\"/do-exam\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.selectedCourse === null ? (\n          <div className=\"mt-2 -ml-2 mr-3 pb-5\">\n            <div className=\"rounded mt-2\">\n              <div className=\"flex flex-row items-center gap-3\">\n                <Link\n                  to=\"/apps-page\"\n                  title=\"Back to menus\"\n                  className=\"bg-white group hover:bg-blue-50 h-10 w-10 flex items-center justify-center rounded-full cursor-pointer\"\n                >\n                  <BiArrowBack className=\"text-3xl text-blue-600 group-hover:text-blue-800\" />\n                </Link>\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-3xl\">My exams</span>\n                  <span className=\"text-gray-600 text-sm\">\n                    List of exams that are assigned to me\n                  </span>\n                </div>\n              </div>\n            </div>\n            {this.state.successMessage !== \"\" && (\n              <div\n                title=\"Click to close the message\"\n                onClick={() => this.setState({ successMessage: \"\" })}\n                className=\"animate__animated animate__zoomIn px-3 py-2 bg-green-500 text-white my-2 rounded cursor-pointer\"\n              >\n                {this.state.successMessage}\n              </div>\n            )}\n            {this.state.loading === true ||\n            this.state.loadingExamsDone === true ||\n            this.state.candidateExams === null ||\n            this.state.candidateApplications == null ? (\n              <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n                <Loading />\n              </div>\n            ) : this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).length === 0 ? (\n              <div className=\"bg-gray-50 rounded px-4 py-5 text-center font-bold mt-2 text-2xl text-gray-400\">\n                No exams found\n              </div>\n            ) : (\n              this.removeDuplicatesExams(\n                this.state.candidateExams.preparedExam\n              ).map((item, i) => (\n                <div key={i + 1} className=\"my-2 rounded bg-white p-2 group\">\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div>\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col w-full\">\n                        <span className=\"text-base text-gray-800 font-extrabold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center justify-start w-full gap-3 -mt-1\">\n                          <div className=\"text-sm text-gray-500 group-hover:text-blue-600\">\n                            Date: {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-gray-100 underline text-gray-500  font-bold rounded-full px-2\">\n                            Start time: {item.start_time}\n                          </div>\n                          <div className=\"hidden md:block text-sm bg-blue-100 text-blue-900  font-bold rounded-full px-2\">\n                            Status: {item.user_status}\n                          </div>\n                        </div>\n                        {this.findLocation(item.position, item.course) !==\n                          null && (\n                          <div className=\"flex flex-row items-center gap-2 mt-2\">\n                            <div>\n                              Exam center:{\" \"}\n                              <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                {\n                                  this.findLocation(item.position, item.course)\n                                    ?.center_name\n                                }\n                              </span>\n                            </div>\n                            <div className=\"w-max flex flex-col md:flex-row\">\n                              Room number:{\" \"}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 ? (\n                                <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                  Waiting room\n                                </span>\n                              ) : (\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.room_number\n                                  }\n                                </span>\n                              )}\n                              {/* Change loc */}\n                              {this.findLocation(item.position, item.course)\n                                ?.room_number === 0 &&\n                                validateExamDate(\n                                  item.exam_date,\n                                  item.start_time,\n                                  item.end_time\n                                ) !== ExamTimeStatus.Expired && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"lg:w-full flex flex-row items-center justify-end\">\n                      {this.state.activeExams.find(\n                        (itm) => itm === item._id\n                      ) !== undefined ||\n                      item.user_status === UserExamStatus.Editing ||\n                      item.user_status === UserExamStatus.Paused ? (\n                        validateExamDate(\n                          item.exam_date,\n                          item.start_time,\n                          item.end_time\n                        ) !== ExamTimeStatus.Expired ? (\n                          this.selectApplication(\n                            this.state.candidateApplications,\n                            item.position,\n                            item.course\n                          )?.application_status !==\n                          ApplicationStates.Shortlisted ? (\n                            <div className=\"text-yellow-800 font-extrabold text-base bg-yellow-100 rounded px-3 py-1 cursor-not-allowed\">\n                              Not shortlisted\n                            </div>\n                          ) : (\n                            <div\n                              onClick={() => {\n                                let application = this.selectApplication(\n                                  this.state.candidateApplications,\n                                  item.position,\n                                  item.course\n                                );\n                                if (application !== null) {\n                                  if (\n                                    application.application_status ===\n                                    ApplicationStates.Shortlisted\n                                  ) {\n                                    // Select exam\n                                    this.props.setSelectedPosition(\n                                      application.position\n                                    );\n                                    this.props.setSelectedCourse(\n                                      application.position.courses.find(\n                                        (itm) => itm.course_id === item.course\n                                      )!\n                                    );\n                                    this.props.setSelectedCandidateExam(\n                                      item._id\n                                    );\n                                  } else {\n                                    alert(\n                                      \"Corresponding application is not shortlisted!\"\n                                    );\n                                  }\n                                } else {\n                                  alert(\"Invalid exam!\");\n                                }\n                              }}\n                              className={`${\n                                item.user_status === UserExamStatus.Editing ||\n                                item.user_status === UserExamStatus.Paused\n                                  ? \"bg-green-600 group-hover:bg-green-800\"\n                                  : \"bg-blue-600 group-hover:bg-blue-800\"\n                              } btn  text-white cursor-pointer w-max`}\n                            >\n                              {item.user_status === UserExamStatus.Editing\n                                ? \"Back to Exam\"\n                                : item.user_status === UserExamStatus.Paused\n                                ? \"Paused, back to exam\"\n                                : \"Start Exam\"}\n                            </div>\n                          )\n                        ) : item.user_status === UserExamStatus.Editing ||\n                          item.user_status === UserExamStatus.Done ||\n                          item.user_status === UserExamStatus.Paused ||\n                          item.user_status === UserExamStatus.Removed ? (\n                          <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                            <span>Marks</span>\n                            <span className=\"text-2xl font-extrabold -mt-2\">\n                              {item.user_marks.toFixed(2)}%\n                            </span>\n                            <div\n                              onClick={() =>\n                                this.setState({\n                                  selectedExam: {\n                                    course: item.course,\n                                    course_name: item.course_name,\n                                    discription: item.discription,\n                                    termes: item.termes,\n                                    rules: item.rules,\n                                    period: item.period,\n                                    exam_date: item.exam_date,\n                                  },\n                                })\n                              }\n                              className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                            >\n                              Check details\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"bg-yellow-100 text-yellow-700 font-extrabold text-base px-3 py-1 rounded-md w-max\">\n                            Expired\n                          </div>\n                        )\n                      ) : item.found === false ? (\n                        <div\n                          title=\"Please wait for the exam time\"\n                          className=\"text-lg lg:text-xl font-extrabold bg-green-100 text-green-700 px-3 py-1 rounded cursor-not-allowed w-max\"\n                        >\n                          <CountDown\n                            start_time={new Date(today.toString()).toString()}\n                            duration_min={getMinutesFromTwoDates(\n                              new Date(today.toString()),\n                              new Date(\n                                DATE(item.exam_date, \"MM/DD/YYYY\") +\n                                  \" \" +\n                                  item.start_time\n                              )\n                            )}\n                            timeout={() => this.setTimeOut(item._id)}\n                            returnString={true}\n                            labels={true}\n                            days\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-700 flex flex-col items-end justify-center w-max\">\n                          <span>Marks</span>\n                          <span className=\"text-2xl font-extrabold -mt-2\">\n                            {item.user_marks.toFixed(2)}%\n                          </span>\n                          <div\n                            onClick={() =>\n                              this.setState({\n                                selectedExam: {\n                                  course: item.course,\n                                  course_name: item.course_name,\n                                  discription: item.discription,\n                                  termes: item.termes,\n                                  rules: item.rules,\n                                  period: item.period,\n                                  exam_date: item.exam_date,\n                                },\n                              })\n                            }\n                            className=\"btn bg-blue-100 text-blue-700 cursor-pointer\"\n                          >\n                            Check details\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            {/* Not prepared exams */}\n            {this.state.candidateExams !== null &&\n              this.state.loading !== true &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).length > 0 &&\n              this.removeDuplicatesNotPreparedExams(\n                this.state.candidateExams.notPreparedExam\n              ).map((item, i) => (\n                <div\n                  key={i + 1}\n                  className=\"my-2 rounded bg-white p-2 py-3 group\"\n                >\n                  <div className=\"flex flex-col md:flex-row items-center justify-between\">\n                    <div className=\"flex flex-col md:flex-row items-center gap-2 w-full\">\n                      <div className=\"\">\n                        <BsFillFileEarmarkTextFill className=\"hidden md:block text-4xl text-gray-300 group-hover:text-blue-600\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-base text-gray-600 font-bold group-hover:text-blue-600\">\n                          {item.course_name}\n                        </span>\n                        <div className=\"flex flex-row items-center gap-3 -mt-1\">\n                          {this.findLocation(item.position, item.course) !==\n                            null && (\n                            <div className=\"flex flex-row items-center gap-2 mt-2\">\n                              <div className=\"flex flex-col md:flex-row md:items-center\">\n                                Exam center:{\" \"}\n                                <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                  {\n                                    this.findLocation(\n                                      item.position,\n                                      item.course\n                                    )?.center_name\n                                  }\n                                </span>\n                              </div>\n                              <div className=\"w-max flex flex-col md:flex-row md:items-center\">\n                                Room number:{\" \"}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 ? (\n                                  <span className=\"text-sm bg-yellow-100 text-yellow-900 group-hover:text-yellow-800 font-bold rounded-full px-2 w-max flex items-center justify-center\">\n                                    Waiting room\n                                  </span>\n                                ) : (\n                                  <span className=\"text-sm bg-gray-100 text-blue-900 group-hover:text-blue-600 font-bold rounded-full px-2 w-max\">\n                                    {\n                                      this.findLocation(\n                                        item.position,\n                                        item.course\n                                      )?.room_number\n                                    }\n                                  </span>\n                                )}\n                                {/* Change loc */}\n                                {this.findLocation(item.position, item.course)\n                                  ?.room_number === 0 && (\n                                  <ChangeLocationComponent\n                                    changeLocation={() => {\n                                      this.setState({\n                                        selectedCourse: {\n                                          course_name: item.course_name,\n                                          course_code: item.course_code,\n                                          description: item.course_name,\n                                          school_levels: [],\n                                          course_id: item.course,\n                                        },\n                                        selectedPosition: item.position,\n                                        centersModal: true,\n                                      });\n                                      this.setMaxExamModal(true);\n                                    }}\n                                  />\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gray-100 text-gray-600 font-extrabold text-base px-3 py-1 rounded-md\">\n                      Not prepared\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : this.state.loading === true ? (\n          <div className=\"px-4 pt-5 pb-1 bg-white mt-2 rounded\">\n            <Loading />\n          </div>\n        ) : (\n          <div className=\"animate__animated animate__fadeInUp animate__faster mt-2 mr-1 -ml-3 rounded-t-md bg-white shadow-md pb-5\">\n            <div className=\"flex flex-row gap-4 items-center justify-between bg-blue-100 py-2 px-2 mb-2\">\n              <div className=\"flex flex-col w-full\">\n                <div className=\"flex flex-row gap-2 items-center justify-between w-full pl-2\">\n                  <span className=\"font-bold text-xl text-gray-800\">\n                    Change exam location\n                  </span>\n                  <div className=\"bg-white hover:text-yellow-700 hover:bg-white rounded-full p-1 h-10 w-10 border-2 border-white hover:border-yellow-600 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => {\n                        this.setState({\n                          centersModal: false,\n                          selectedCourse: null,\n                        });\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <ChooseExamCenter\n              positionCourses={this.state.selectedCourse}\n              addLocation={this.addLocation}\n              closeModal={this.closeModal}\n            />\n          </div>\n        )}\n        {this.state.selectedExam !== null && (\n          <Modal\n            title={\n              <div className=\"text-2xl font-extrabold text-blue-600 px-2\">\n                Exam result details\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectedExam: null })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <CandidateAnswersDetails\n              exam_id={this.state.selectedExam}\n              showAnswers={false}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  candidateApplications,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  candidateApplications: CandidateApplicationsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    candidateApplications: candidateApplications,\n    periods: periods,\n  };\n};\n\nexport const CandidateExams = connect(mapStateToProps, {\n  FC_GetProfileDetails,\n  LoadCandidateApplications,\n  setSelectedCandidateExam,\n  setSelectedCourse,\n  setSelectedPosition,\n  InitializeExamDetails,\n  loadExamsDone,\n  AddUserApplication,\n  loadApplicationPeriods,\n})(_CandidateExams);\n"],"sourceRoot":""}