{"version":3,"sources":["containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/Essay.tsx","containers/DoExam/QuestionDetails/Answers/AnswersTypesCollection.tsx","containers/DoExam/QuestionDetails/Answers/HybridAnswers.tsx","components/QuestionPreview/QuestionPreview.tsx"],"names":["toMultipleChoice","answers","res","answer","id","value","status","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","MultipleChoice","props","checkAnswer","item","available_answers","length","check","find","itm","question_id","selectedQuestionAnswer","undefined","checkA","tes","reference","selectedAns","x","addAnswerItemFn","newAnswers","questionAnswer","question","answerQuestionFn","_id","language","useEffect","test","a","map","i","title","onClick","oldAnswers","selAns","tester","temp","type","questionTypeElementsType","SingleMultiple","t","newAnswersMultiple","xItem","addAnswer","className","dangerouslySetInnerHTML","__html","TrueFalse","SimpleCalculated","answeredValue","checkB","onChange","e","target","MatchingSelect","closeWindow","shuffledAnswers","selectedAnswer","findWord","selectedLanguage","checkIfSelected","Matching","useState","displayWindow","setDisplayWindow","setSelectedAnswer","ans","selectedQuestionId","selectedLang","ansi","selectedExam","testing","questions","QuestionLanguages","lang","testLang","key","checkE","testAnswerLang","it","toString","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","ShortAnswer","style","minHeight","Numerical","CalculatedMultipleChoice","filter","getRandomArbitrary","toFixed","Essay","AnswersTypesCollection","wholeQuestion","typeShort","QuestionForHybrid","Calculated","SimpleCalculate","Shuffle","Numeric","HybridAnswers","sub_question","stri","String","fromCharCode","charCodeAt","description","marks","hybrid","EmbeddedQuestion","selectedQuestion","questionTypes","questionAnswers","newTextResult","findQuestionType","Embedded","answeredQuestions","userQuestionAnswers","originalText","split","parseInt","push","data","answerCheck","answered","QuestionForEmbedded","select","alert","returnSelect","QuestionPreview","connect","auth","doExam","candidateExam","system","setSelectedExamQuestion","setQuestionLanguage","loadQuestionTypes","loading","setLoading","selectLang","setSelectLang","setSelectedLanguage","filterLanguages","langs","langItem","testLangQ","l","Loading","LoadingType","white","width","question_answers","Hybrid","candidate_exam"],"mappings":"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","file":"static/js/5.8ef48121.chunk.js","sourcesContent":["import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    // Problem here!\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        // Check type of question\n        let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n        if (props.type === questionTypeElementsType.SingleMultiple) {\n          for (let t of selAns.answer) {\n            temp = [\n              ...temp,\n              {\n                id: t.id,\n                value: t.value,\n                status: false,\n              },\n            ];\n          }\n          addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n        }\n        let newAnswersMultiple: MultipleChoiceQuestionAnswerInterface[] = [];\n\n        for (let xItem of temp.length === 0 ? selAns.answer : temp) {\n          if (xItem.id === item.id) {\n            newAnswersMultiple = [\n              ...newAnswersMultiple,\n              {\n                id: xItem.id,\n                value: xItem.value,\n                status:\n                  props.type === questionTypeElementsType.SingleMultiple\n                    ? true\n                    : !xItem.status,\n              },\n            ];\n          } else {\n            newAnswersMultiple = [...newAnswersMultiple, xItem];\n          }\n\n          addAnswerItemFn(\n            newAnswersMultiple,\n            props.selectedQuestionAnswer.selectedAns\n          );\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: TrueFalseQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const addAnswer = (\n    //This has a problem\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let temp: TrueFalseQuestionAnswerInterface[] = [];\n        for (let t of selAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, selAns);\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let x of temp.length === 0 ? selAns.answer : temp) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: !x.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: [\n                {\n                  id: newAnswers[0].id,\n                  value: [newAnswers[0].value],\n                  status: newAnswers[0].status,\n                },\n              ],\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (\n    newAnswers: MatchingQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let x of selAns.answer) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: item.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ansi: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let checkE = testLang.answers.find(\n              (tes) =>\n                tes.reference ===\n                props.selectedQuestionAnswer.selectedAns.reference\n            );\n            if (checkE !== undefined) {\n              let testAnswerLang = checkE.answer.find(\n                (it) => it.status.toString() === ansi.status\n              );\n              if (testAnswerLang !== undefined) {\n                return testAnswerLang.status.toString();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let selAns = temp.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let ans = selAns.answer.find((itm) => itm.id === x);\n        if (ans !== undefined && ans.status !== \"\") {\n          if (props.selectedQuestionAnswer.question_id !== null) {\n            return checkAnswerStatus(\n              props.selectedQuestionAnswer.question_id,\n              props.selectedLanguage,\n              ans\n            );\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        let selAns = item.answers.find(\n          (tester) =>\n            tester.reference ===\n            props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (selAns !== undefined) {\n          for (let ans of selAns.answer) {\n            res = [\n              ...res,\n              {\n                id: ans.id,\n                lang: item.language,\n                status: ans.status.toString(),\n              },\n            ];\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  ShortAnswerQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: ShortAnswerQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer === undefined ? (\n        <div\n          className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n        >\n          <textarea\n            value={\"\"}\n            className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 bg-gray-50`}\n            style={{ minHeight: \"80px\" }}\n          ></textarea>\n        </div>\n      ) : (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"80px\" }}\n            ></textarea>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: [item.value],\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        // props.answerQuestionFn({\n        //   question_id: props.selectedQuestionAnswer.question_id,\n        //   status: true,\n        //   answer: [\n        //     {\n        //       id: props.selectedQuestionAnswer.answers[0].id,\n        //       value: [\"\"],\n        //       status: props.selectedQuestionAnswer.answers[0].status,\n        //     },\n        //   ],\n        // });\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of props.selectedQuestionAnswer.selectedAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0\n        ? props.selectedQuestionAnswer.selectedAns.answer\n        : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers, props.selectedQuestionAnswer.selectedAns);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.selectedQuestionAnswer.question &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EssayQuestionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: EssayQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Essay = (props: EssayQuestionProps) => {\n  const checkAnswer = (item: EssayQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.selectedQuestionAnswer.question &&\n        props.answerQuestionFn({\n          question_id: props.selectedQuestionAnswer.question_id,\n          status: false,\n          answers: [\n            {\n              _id: questionAnswer._id,\n              reference: questionAnswer.reference,\n              answer: newAnswers,\n            },\n          ],\n          language: props.selectedQuestionAnswer.question.language,\n        });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        addAnswerItemFn(\n          [\n            {\n              id: selAns.answer[0].id,\n              value: item.value,\n              status: selAns.answer[0].status,\n            },\n          ],\n          selAns\n        );\n      }\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n            language: props.selectedQuestionAnswer.question.language,\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"300px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  SubQuestionInterface,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\n\n// All question types except Embedded and Hybrid\n\ninterface AnswersTypesCollectionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  item: SubQuestionInterface;\n  hybrid: boolean;\n}\n\nconst AnswersTypesCollection = (props: AnswersTypesCollectionProps) => {\n  return (\n    <div>\n      {/* TrueFalse */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.TrueFalse &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <TrueFalse\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toTrueFalse(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.Calculated ||\n          props.item.typeShort === QuestionForHybrid.SimpleCalculate) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <SimpleCalculated\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toSimpleCalculated(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.SingleMultiple ||\n          props.item.typeShort === QuestionForHybrid.MultipleChoice) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <MultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.CalculatedMultipleChoice &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <CalculatedMultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toCalculatedMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n\n      {/* Matching */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Matching &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Matching\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMatching(itm.answer),\n                shuffledAnswers: Shuffle(toMatching(itm.answer)),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n              selectedExam={props.selectedExam}\n              selectedLanguage={props.selectedLanguage}\n            />\n          ))}\n      {/* Esssay */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Essay &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Essay\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toEssay(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Numerical */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Numeric &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Numerical\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toNumerical(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* ShortAnswer */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.ShortAnswer &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <ShortAnswer\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toShortAnswer(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n    </div>\n  );\n};\n\nexport default AnswersTypesCollection;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\nimport AnswersTypesCollection from \"./AnswersTypesCollection\";\n\ninterface HybridProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst HybridAnswers = (props: HybridProps) => {\n  let str = \"a\";\n  // useEffect(() => {\n  //   if (props.selectedQuestionAnswer.question_id !== null) {\n  //     // Check if question is already there in answersList\n  //     let checkAnswerAvail = props.available_answers.find(\n  //       (item) => item.question_id === props.selectedQuestionAnswer.question_id\n  //     );\n  //     if (props.wholeQuestion !== undefined) {\n  //       let answersRes: QuestionAnswerInterface[] = [];\n  //       if (checkAnswerAvail === undefined) {\n  //         answersRes = props.wholeQuestion.answers;\n  //       } else {\n  //         for (let newAns of props.wholeQuestion.answers) {\n  //           if (\n  //             checkAnswerAvail.answers.find(\n  //               (item) => item._id === newAns._id\n  //             ) === undefined\n  //           ) {\n  //             console.log(\"Ans not duplicted: \", newAns);\n  //             answersRes = [\n  //               ...answersRes,\n  //               {\n  //                 _id: newAns._id,\n  //                 reference: newAns.reference,\n  //                 answer: [],\n  //               },\n  //             ];\n  //           }\n  //         }\n  //       }\n  //       props.answerQuestionFn({\n  //         question_id: props.selectedQuestionAnswer.question_id,\n  //         status: false, //Check if submitted online\n  //         answers: answersRes,\n  //       });\n  //     }\n  //   }\n  // }, [props]);\n  return (\n    <div>\n      {props.wholeQuestion !== undefined &&\n        props.wholeQuestion.sub_question.length > 0 &&\n        props.wholeQuestion.sub_question.map((item, i) => {\n          let stri = String.fromCharCode(str.charCodeAt(str.length - 1) + i);\n          return (\n            <div\n              title=\"Click to choose this option\"\n              key={i + 1}\n              className={`px-2 py-2\n             bg-white\n            rounded mb-2`}\n            >\n              <div className=\"flex flex-row items-center w-full gap-2 mb-2\">\n                <div>\n                  <div className=\"flex items-center justify-center h-8 w-8 rounded-full bg-gray-100 border border-gray-400 font-bold\">\n                    {stri}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between w-full gap-2\">\n                  <div className=\"font-bold\">{item.description}</div>\n                  <div>\n                    <div className=\"bg-blue-100 text-blue-600 px-3 py-1 rounded-full font-bold\">\n                      {item.marks} marks\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"border-t px-2 py-2\">\n                <AnswersTypesCollection\n                  type={props.type}\n                  available_answers={props.available_answers}\n                  selectedQuestionAnswer={props.selectedQuestionAnswer}\n                  answerQuestionFn={props.answerQuestionFn}\n                  wholeQuestion={props.wholeQuestion}\n                  selectedExam={props.selectedExam}\n                  selectedLanguage={props.selectedLanguage}\n                  item={item}\n                  hybrid={true}\n                />\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default HybridAnswers;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toEmbedded,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\nimport Essay from \"../../containers/DoExam/QuestionDetails/Answers/Essay\";\nimport {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n  regExEmbedded,\n} from \"@mastrecruit/common\";\nimport Embedded from \"../../containers/DoExam/QuestionDetails/Answers/Embedded\";\nimport Hybrid from \"../../containers/DoExam/QuestionDetails/Answers/Hybrid\";\nimport HybridAnswers from \"../../containers/DoExam/QuestionDetails/Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst returnSelect = (\n  data: QuestionAnswerInterface,\n  type: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid,\n  questionAnswers: QuestionAnswerInterface[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let answers: QuestionAnswerFormat[] = [];\n  for (let answer of data.answer) {\n    answers.push({\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    });\n  }\n  let answerCheck: QuestionAnswerInterface | undefined = questionAnswers.find(\n    (itm) => itm.reference === data.reference\n  );\n  let answered: QuestionAnswerFormat[] = [];\n  if (answerCheck !== undefined) {\n    answered = answerCheck.answer;\n  }\n  if (answers.length > 0) {\n    if (type === QuestionForEmbedded.SingleMultiple) {\n      return (\n        <span className=\"w-max\">\n          <select\n            className={`px-3 py-2 rounded text-base max-w-full border border-gray-300 ${\n              answered.length !== 0 &&\n              answers.find((itm) => itm.id === answered[0].id) !== undefined\n                ? \"text-blue-600 font-bold\"\n                : \"text-gray-700 font-bold\" //Example of condition of changing color\n            }`}\n            value={answered.length === 0 ? \"\" : answered[0].id}\n            onChange={(e) => {\n              let select = answers.find((itm) => itm.id === e.target.value);\n              if (select !== undefined) {\n                addAnswer({\n                  _id: data._id,\n                  reference: data.reference,\n                  answer: [\n                    {\n                      id: select.id,\n                      value: select.value,\n                      status: select.status,\n                    },\n                  ],\n                });\n              } else {\n                alert(\"Invalid choice!\");\n              }\n            }}\n          >\n            <option value={\"\"}>Choose correct answer</option>\n            {answers.map((item, i) => (\n              <option value={item.id} key={i + 1}>\n                {item.value}\n              </option>\n            ))}\n          </select>\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"w-max bg-green-100\">\n          <input\n            value={\n              answered.length === 0\n                ? \"\"\n                : type === QuestionForEmbedded.ShortAnswer\n                ? answered[0].value\n                : answered[0].value[0]\n            }\n            onChange={(e) => {\n              addAnswer({\n                _id: data._id,\n                reference: data.reference,\n                answer: [\n                  {\n                    id: answers[0].id,\n                    value:\n                      type === QuestionForEmbedded.ShortAnswer\n                        ? e.target.value\n                        : [e.target.value],\n                    status: answers[0].status,\n                  },\n                ],\n              });\n            }}\n            type=\"text\"\n            className=\"bg-white px-3 py-1 rounded text-base text-blue-600 font-bold border border-gray-300\"\n          />\n        </span>\n      );\n    }\n  } else {\n    return <div>Question not valid!</div>;\n  }\n};\n\nexport const EmbeddedQuestion = (\n  selectedQuestion: QuestionInterface,\n  questionTypes: questionType[] | null,\n  language: QuestionLanguage,\n  questionAnswers: QuestionAnswersStore[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let newTextResult = [];\n  // Testing Question\n  let question = selectedQuestion.question.find(\n    (itm) => itm.language === language\n  );\n  if (\n    findQuestionType(selectedQuestion.type, questionTypes) !== null &&\n    findQuestionType(selectedQuestion.type, questionTypes) ===\n      questionTypeElementsType.Embedded\n  ) {\n    let answeredQuestions: QuestionAnswerInterface[] = [];\n    if (question !== undefined) {\n      let userQuestionAnswers = questionAnswers.find(\n        (itm) => itm.question_id === selectedQuestion.question_id\n      );\n      if (userQuestionAnswers !== undefined) {\n        answeredQuestions = userQuestionAnswers.answers;\n      }\n\n      var answers = question.answers;\n      var originalText = question.description.split(\" \");\n      // var newTexts = question.description.match(regExEmbedded);\n\n      for (let check of originalText) {\n        let test = answers.find((itm) => itm.reference === parseInt(check[1]));\n        if (test !== undefined) {\n          // Find type of subQuestion\n          let type = question.sub_question.find(\n            (itm) => itm.reference === parseInt(check[1])\n          );\n          if (type !== undefined) {\n            newTextResult.push(\n              returnSelect(test, type.typeShort, answeredQuestions, addAnswer)\n            );\n          }\n        } else {\n          newTextResult.push(check);\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"w-full text-base font-semibold mt-2\">\n      {newTextResult.map((item, i) => (\n        <span key={i + 1} className=\"mr-1\">\n          {item}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-40 md:pb-10\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div className=\"flex flex-row justify-between w-full\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.title,\n                      }}\n                      className=\"text-sm text-gray-600 mb-2\"\n                    ></div>\n\n                    {/* Languages */}\n                    <div className=\"flex flex-row gap-2\">\n                      <div className=\"px-3 py-1 rounded-full flex items-center justify-center text-base font-bold bg-white text-blue-800\">\n                        {props.selectedQuestion.marks} marks\n                      </div>\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                    setSelectedLanguage(item.key);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    selectedLanguage === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {selectedLanguage === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {props.selectedQuestion.question_id !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) === questionTypeElementsType.Embedded ? (\n                    EmbeddedQuestion(\n                      props.selectedQuestion,\n                      props.questionTypes.questionTypes,\n                      selectedLanguage,\n                      props.candidateExam.question_answers,\n                      () => {}\n                    )\n                  ) : (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold mt-2\"\n                    ></div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.Hybrid)\n                ? \"\"\n                : \"bg-white\"\n            } rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n\n            {/* Numerical */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Essay answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toEssay(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers,\n                  }}\n                  wholeQuestion={props.selectedQuestion.question.find(\n                    (itm) => itm.language === selectedLanguage\n                  )}\n                  answerQuestionFn={props.answerQuestionFn}\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n"],"sourceRoot":""}