{"version":3,"sources":["containers/PrepareExam/ExamsList/ExamDetails.tsx","containers/PrepareExam/ExamsList/ExamsList.tsx","utils/question_bank.ts","containers/DoExam/QuestionDetails/ConvertingAnswers.ts","containers/QuestionBank/QuestionSettings/Courses/Courses.tsx","components/Courses/Courses.tsx","containers/QuestionBank/QuestionSettings/Courses/AddCourse.tsx","components/QuestionPreview/QuestionPreview.tsx","components/EditorToolbar/EditorToolbar.tsx","components/EditorComponent/EditorComponent.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Matching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMatching.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/MultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditMultipleChoice.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/RunTest/RunTest.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Numerical.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/ShortAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Essay.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditSimpleCalculate.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/TrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditTrueFalse.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Embedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditEmbedded.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MultipleChoiceSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/NumericSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/SubQuestions/MatchingSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/AnswersQuestionTypes/Hybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/HybridSubQuestions.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestionTypes/EditHybrid.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionAnswer.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/HandleInput.tsx","containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/QuestionChapters.tsx","components/ChangeLanguage/ChangeLanguage.tsx","containers/DoExam/QuestionDetails/Answers/MultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/TrueFalse.tsx","containers/DoExam/QuestionDetails/Answers/SimpleCalculated.tsx","containers/DoExam/QuestionDetails/Answers/ShortAnswer.tsx","containers/DoExam/QuestionDetails/Answers/Numerical.tsx","containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice.tsx","containers/DoExam/QuestionDetails/Answers/Essay.tsx","containers/DoExam/QuestionDetails/Answers/MatchingSelect.tsx","containers/DoExam/QuestionDetails/Answers/Matching.tsx","containers/QuestionBank/QuestionSettings/SettingsComponents/SchoolLevelSelect.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsItem.tsx","containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter.tsx","components/Questions/QuestionItem.tsx","containers/DoExam/QuestionDetails/Answers/AnswersTypesCollection.tsx","containers/DoExam/QuestionDetails/Answers/HybridAnswers.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","containers/PrepareExam/EditExam/EditExam.tsx"],"names":["ExamDetails","props","className","course","courses","find","itm","course_id","exam","course_code","course_name","onClick","setSelectedExam","style","height","exam_total_marks","DATE","exam_date","start_time","end_time","duration","questions","length","periods","applicationPeriods","session_plan_id","period","session_plan_name","discription","dangerouslySetInnerHTML","__html","termes","rules","allow_to_leave_browser","copy_enabled","paste_enabled","right_click_enabled","stop_candidate_when_comeback","validateExamDate","ExamTimeStatus","Online","createdAt","setSelectedExamEdit","Waiting","alert","_ExamsList","setLoading","status","setState","loading","addQuestionToPaper","question","addExamQuestion","removeToQuestionPaper","window","confirm","showPeriodFilter","selectPeriod","chooseCourse","myCourse","conf","prepareExam","x","setSelectedCourse","selectCourse","examQuestionsIds","ids","question_id","examsByPeriod","Exam","temp","filter","item","selected_period","newRes","push","undefined","exam_status","questions_per_page","number_format","updatedAt","id","componentDidMount","questionTypes","loadQuestionTypes","loadApplicationPeriods","loadCourses","questionBank","selected_course","loadQuestionBank","loadExamsListByPeriod","auth","application_session","setSelectedExamItem","selectedExam","examToEdit","setUploadingStatus","GetExamsByPeriod","setSelectedPeriod","state","addQuestionModal","formErr","element","msg","QuestionNumberFormat","NUMBER","search","this","is_active","to","Loading","colSpan","onChange","e","target","value","type","placeholder","examsList","searchData","map","i","title","EditExam","selectedCourse","loadExamsList","setLoadingProps","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","large","displayClose","padding","Courses","selected_course_id","Questions","callBack","questionsList","questionPaper","ApplicationPeriods","Component","ExamsList","connect","schoolLevels","system","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","PushPopupAlert","today","moment","tz","TimeZone","getQuestionType","question_types","type_id","check","check_type","questionTypeElements","key","findTotalMarks","results","sum","test","total_marks","toFixed","CheckIfExamDone","res","validateCalculatedFormula","formula","characters","el","nextCharacter","convertFromStringToDate","responseDate","dateComponents","split","datePieces","timePieces","Date","parseInt","Expired","toDay","toString","examDate","startTime","getDate","getMonth","getFullYear","endTime","getTime","InitializeExamsDone","selectedPosition","candidateExam","loadExamsDone","user_id","setLoadingExamsDone","selectedExams","InitializeExamDetails","setLoadingExams","user_exams_temp","center_id","district_id","room_id","position_id","proctoringDefaultRules","rule","caption","toMultipleChoice","answers","answer","toTrueFalse","toMatching","toSimpleCalculated","toShortAnswer","toNumerical","toCalculatedMultipleChoice","toEssay","CoursesAction","useState","addNew","setAddNew","setSearch","setSelectedCourseComp","course_selected","deleteCourseFn","a","axios","delete","API","APPLICATION","PopupAlertTheme","success","warning","console","log","useEffect","school_levels","description","action","View","Update","Delete","extraLarge","body","closeModal","deleteSelected","chaptersOnly","medium","_UploadQuestion","setSearchLevel","educationCategory","schoolLevel","searchLevel","showFilter","setSchoolLevelFilterFn","filterWithExams","response","preparedExams","filteredCourses","searched","filtered","itm1","school_level_id","item2","uploadingStatus","searchCourseInput","education_category_title","school_level_name","education_categories","minHeight","educationCategories","UploadQuestion","AddCourse","setCourse_id","setCourse_name","setCourse_code","setDescription","chapters","setChapters","setSchool_levels","formError","setFormError","openAdd","chapter","addChapter","setAddChapter","submitCourse","preventDefault","obj","patch","info","post","data","errors","message","danger","onSubmit","disabled","name","uuidv4","addNewChapter","EmbeddedQuestion","selectedQuestion","language","questionAnswers","addAnswer","newTextResult","findQuestionType","questionTypeElementsType","Embedded","answeredQuestions","userQuestionAnswers","originalText","reference","sub_question","answerCheck","answered","QuestionForEmbedded","SingleMultiple","select","_id","ShortAnswer","returnSelect","typeShort","QuestionPreview","doExam","setSelectedExamQuestion","setQuestionLanguage","selectLang","setSelectLang","selectedLanguage","setSelectedLanguage","filterLanguages","langs","langItem","testLangQ","QuestionLanguages","l","LoadingType","white","marks","width","question_answers","Hybrid","MultipleChoice","available_answers","selectedQuestionAnswer","selectedAns","answerQuestionFn","TrueFalse","candidate_exam","Matching","shuffledAnswers","Shuffle","SimpleCalculate","Numeric","CalculatedMultipleChoice","Essay","wholeQuestion","CustomUndo","viewBox","points","d","CustomRedo","Size","Quill","import","whitelist","register","Font","formats","QuillToolbar","defaultValue","undoChange","quill","history","undo","redoChange","redo","SelectedKeysEdit","EditorComponent","modules","toolbar","container","handlers","delay","maxStack","userOnly","EditorToolbar","content","delta","source","editor","handleItem","MatchingAnswers","selectedQuestionItem","selectedKey","QuestionAnswer","editMatchingValue","editMatchingStatus","removeAnswerSingleMultiple","EditMatching","addedAnswer","setAddedAnswer","showAddAnswerStatus","setShowAddAnswer","updateMarks","setSelectedKey","lang","checkAns","selectedQL","addAnswerMatchingQuestion","AddAnswer","selectedQuestionType","updateAnswerSingleMultiple","checkCalculateType","editSingleMultipleStatus","EditMultipleChoice","handleAnswer","backup","handleStatus","addAnswerSingleMultiple","RunTest","numberOfTests","updateAnswerSimpleCalculate","Numerical","editQuestionAnswer","setEditQuestionAnswer","editQuestionAnswerStatus","setEditQuestionAnswerStatus","isNaN","parseFloat","updateAnswerNumericalValue","updateShortAnswer","handleTextChange","rows","updateEssayAnswer","EditSimpleCalculate","updateAnswerNumerical","editTrueFalseStatus","EditTrueFalse","FindSubQuestionData","subQuestions","reference_number","findRef","newChoiceData","setNewChoiceData","editedChoiceData","setEditedChoiceData","editedMarksData","setEditedMarksData","addNewChoiceData","setAddNewChoiceData","error","setError","itms","setShowLanguages","newSubQuestion","newSubQuestions","updateAnswerEmbedded","t","newDataTest","findData","updateElementStatus","questionItems","findDel","newQuestionUpdated","removeElement","EditEmbedded","totalMarks","MultipleChoiceSubQuestions","QuestionForHybrid","selectedAnswer","updateAnswerHybrid","MatchingSubQuestions","editedMatching","setEditedMatching","subQuestion","Calculated","NumericSubQuestions","HybridSubQuestions","display","setDisplay","itemNumber","currentAnswer","EditHybrid","editSubQuestion","HandleInput","Title","languages","handleUpdateQuestionDetails","Description","QuestionChapters","addedChapters","ChangeLanguage","languagesList","visible","setVisible","_EditQuestion","showLanguages","QuestionLang","actionStatus","updatedQuestion","current","editedAnswerIndex","editedAnswer","answer_id","newEditedAnswer","newFiltered","removed","ans","new_answers","updatedAnswer","sub","test_avail","subQuestionSelected","chapter_id","submitEditedQuestion","addedQuestion","customNumber","is_deleted","UpdateQuestion","unSelectQuestion","showQuestionChapters","setSelectedLang","questionLangs","testing","courseDetail","EditQuestion","checkAnswer","checkA","tes","addAnswerItemFn","newAnswers","questionAnswer","oldAnswers","selAns","tester","newAnswersMultiple","xItem","SimpleCalculated","answeredValue","checkB","getRandomArbitrary","MatchingSelect","closeWindow","findWord","checkIfSelected","displayWindow","setDisplayWindow","setSelectedAnswer","selectedQuestionId","selectedLang","ansi","testLang","checkE","testAnswerLang","it","checkAnswerStatus","arr","ReturnMatchingStatus","newItem","selectedStatus","SchoolLevelSelect","SchoolLevelsItem","levelsDropDown","setLevelsDropDown","educationCategoryDetails","education_institute_id","initializeItem","activateItem","education_institute","educationCate","activateLevelItem","SchoolLevelsFilter","QuestionItem","editMode","setEditMode","setSelectedQuestion","number","preview","submitQuestionAnswer","AnswersTypesCollection","HybridAnswers","stri","String","fromCharCode","charCodeAt","hybrid","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","EXAM_QUESTIONS_NUMBERING","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","actionType","changeProctoringRule","proctoringRules","newData","selected","setStep","step","PrepareExamStepsEnum","Step2","currentStep","StepStatus","Step1","duration_hours","duration_minutes","submitExamPreparation","validateTwoTime","QBank","Created","redirectToExams","editQuestion","total","handleChangeTermes","setSelectCourse","setSelectPeriod","Prepare","submitExam","qts","stepStatus","NoResultThemes","Dark","AlertInterface","PrepareExam","PrepareExamSteps","Steps","Switch","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","byteToHex","substr","stringify","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds","random","_EditExam","addEditExamQuestion","put","findExamDetails","DATE_DATA"],"mappings":"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","file":"static/js/26.726a60a4.chunk.js","sourcesContent":["import React from \"react\";\nimport { GoTrashcan } from \"react-icons/go\";\nimport { MdClose, MdEdit } from \"react-icons/md\";\nimport {\n  applicationPeriodsStoreInterface,\n  courseStoreInterface,\n} from \"../../../actions\";\nimport { ExamItemResponse } from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\ninterface ExamDetailsProps {\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  exam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  setSelectedExamEdit: (exam: ExamItemResponse | null) => void;\n}\n\nconst ExamDetails = (props: ExamDetailsProps) => {\n  return (\n    <div className=\"fixed h-full w-full bg-black bg-opacity-50 top-0 left-0 flex items-center justify-center z-50 animate__animated animate__fadeIn animate__faster overflow-y-auto\">\n      <div className=\"group absolute right-0 bg-white shadow-xl w-3/4 md:w-2/4 border z-50 h-full animate__animated animate__fadeInRight animate__faster\">\n        <div className=\"bg-white text-blue-700 font-bold text-2xl flex flex-row justify-between gap-3 items-center px-3 py-3\">\n          <div>\n            <span className=\"font-bold\">\n              {props.course.courses &&\n                props.course.courses.find(\n                  (itm) => itm.course_id === props.exam.course\n                )?.course_code}\n            </span>\n            -\n            {props.course.courses &&\n              props.course.courses.find(\n                (itm) => itm.course_id === props.exam.course\n              )?.course_name}\n          </div>\n          <div\n            onClick={() => props.setSelectedExam(null)}\n            className=\"text-2xl text-red-600 bg-red-50 group-hover:bg-red-100 rounded-full p-1 cursor-pointer\"\n          >\n            <MdClose />\n          </div>\n        </div>\n        <div\n          className=\"px-3 py-6 text-sm overflow-y-auto bg-gray-100\"\n          style={{ height: \"80vh\" }}\n        >\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam total marks</span>\n            <span className=\"text-blue-800 font-bold bg-blue-100 rounded-full px-2\">\n              {props.exam.exam_total_marks}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam date</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.exam_date)}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam start time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.start_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam ending time</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.end_time}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam duration</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.duration}mins\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam number of questions</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.questions.length}\n            </span>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam period</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.periods.applicationPeriods &&\n                props.periods.applicationPeriods.find(\n                  (itm) => itm.session_plan_id === props.exam.period\n                )?.session_plan_name}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam description</span>\n            <span className=\"text-blue-600 font-bold\">\n              {props.exam.discription}\n            </span>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600\">Exam terms and conitions</span>\n            <div\n              dangerouslySetInnerHTML={{ __html: props.exam.termes }}\n              className=\"text-blue-600 font-bold\"\n            ></div>\n          </div>\n          <div className=\"flex flex-col border-b py-3\">\n            <span className=\"text-gray-600 mb-2\">Exam rules</span>\n            <div className=\"text-blue-600 font-bold bg-white rounded\">\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Leave browser</span>\n                <span\n                  className={`${\n                    props.exam.rules.allow_to_leave_browser === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.allow_to_leave_browser === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Copy</span>\n                <span\n                  className={`${\n                    props.exam.rules.copy_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.copy_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Paste</span>\n                <span\n                  className={`${\n                    props.exam.rules.paste_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.paste_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Right click</span>\n                <span\n                  className={`${\n                    props.exam.rules.right_click_enabled === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.right_click_enabled === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n              <div className=\"flex flex-row justify-between items-center bg-white px-3 py-2 border-b\">\n                <span>Come back after leaving room</span>\n                <span\n                  className={`${\n                    props.exam.rules.stop_candidate_when_comeback === true\n                      ? \"text-gray-600\"\n                      : \"text-yellow-600\"\n                  }`}\n                >\n                  {props.exam.rules.stop_candidate_when_comeback === true\n                    ? \"Enabled\"\n                    : \"Disabled\"}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center justify-between border-b py-3\">\n            <span className=\"text-gray-600\">Exam status</span>\n            <span\n              className={`${\n                validateExamDate(\n                  props.exam.exam_date,\n                  props.exam.start_time,\n                  props.exam.end_time\n                ) === ExamTimeStatus.Online\n                  ? \"text-green-600 font-bold bg-green-100\"\n                  : \"text-yellow-600 font-bold bg-yellow-100\"\n              } rounded-full px-3 py-1`}\n            >\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              )}\n            </span>\n          </div>\n\n          <div className=\"flex flex-row items-center justify-between py-3\">\n            <span className=\"text-gray-600\">Exam created at</span>\n            <span className=\"text-blue-600 font-bold\">\n              {DATE(props.exam.createdAt)}\n            </span>\n          </div>\n        </div>\n        <div className=\"bg-white p-3 pt-0 rounded-b mt-5 absolute bottom-0 w-full\">\n          {\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 my-2\">\n              <div\n                onClick={() => props.setSelectedExamEdit(props.exam)}\n                className=\"bg-blue-100 hover:bg-blue-600 hover:text-white rounded p-3 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-blue-800\"\n              >\n                <div>\n                  <MdEdit className=\"text-2xl\" />\n                </div>\n                <span className=\"text-base\">Edit</span>\n              </div>\n              <div></div>\n              {validateExamDate(\n                props.exam.exam_date,\n                props.exam.start_time,\n                props.exam.end_time\n              ) === ExamTimeStatus.Waiting ? (\n                <div\n                  onClick={() => alert(\"Deleted\")}\n                  className=\"bg-red-50 hover:bg-red-600 hover:text-white rounded p-3 border border-red-50 group-hover:border-red-100 text-center flex flex-col md:flex-row md:gap-2 items-center justify-center cursor-pointer text-red-800\"\n                >\n                  <div>\n                    <GoTrashcan className=\"text-2xl\" />\n                  </div>\n                  <span className=\"text-base\">Remove</span>\n                </div>\n              ) : (\n                <div></div>\n              )}\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExamDetails;\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport {\n  ExamItemResponse,\n  ExamItemResponseFull,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { DATE } from \"../../../utils/functions\";\nimport { Link } from \"react-router-dom\";\nimport ExamDetails from \"./ExamDetails\";\nimport { EditExam } from \"../EditExam/EditExam\";\nimport { validateExamDate } from \"../../../utils/question_bank\";\nimport searchData from \"../../../utils/search\";\n\ninterface ExamsListProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedExam: (exam: ExamItemResponse) => void;\n}\ninterface ExamsListState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  selectedExam: ExamItemResponse | null;\n  examToEdit: ExamItemResponse | null;\n  search: string;\n}\n\nclass _ExamsList extends Component<ExamsListProps, ExamsListState> {\n  constructor(props: ExamsListProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      duration: 1,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      selectedExam: null,\n      examToEdit: null,\n      search: \"\",\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  examsByPeriod = (Exam: ExamItemResponse[]): ExamItemResponseFull[] => {\n    let temp = Exam.filter(\n      (item) =>\n        item.period === this.props.periods.selected_period?.session_plan_id\n    );\n    let newRes: ExamItemResponseFull[] = [];\n    for (let item of temp) {\n      newRes.push({\n        questions: item.questions,\n        exam_total_marks: item.exam_total_marks,\n        status: item.status,\n        period: item.period,\n        course: item.course,\n        course_id: item.course,\n        course_code:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_code,\n        course_name:\n          this.props.course.courses === null\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              ) === undefined\n            ? \"\"\n            : this.props.course.courses.find(\n                (itm) => itm.course_id === item.course\n              )!.course_name,\n        exam_status: item.exam_status,\n        termes: item.termes,\n        questions_per_page: item.questions_per_page,\n        exam_date: item.exam_date,\n        start_time: item.start_time,\n        end_time: item.end_time,\n        duration: item.duration,\n        number_format: item.number_format,\n        discription: item.discription,\n        createdAt: item.createdAt,\n        updatedAt: item.updatedAt,\n        id: item.id,\n        rules: item.rules,\n      });\n    }\n    return newRes;\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    // if (this.props.course.selected_course === null) {\n    //   this.setState({ selectCourse: true });\n    // }\n    if (\n      this.props.questionBank.questions === null ||\n      this.props.questionBank.questions.length === 0\n    ) {\n      if (this.props.course.selected_course !== null) {\n        this.props.loadQuestionBank(\n          this.props.course.selected_course.course_id,\n          this.setLoading\n        );\n      }\n    }\n    // if (this.props.prepareExam.examsList === null || this.props.prepareExam.examsList.length === 0) {\n    if (this.props.periods.selected_period !== null) {\n      this.props.loadExamsListByPeriod(\n        this.props.periods.selected_period.session_plan_id,\n        this.setLoading\n      );\n    } else {\n      this.props.auth.application_session &&\n        this.props.loadExamsListByPeriod(\n          this.props.auth.application_session.session_plan_id,\n          this.setLoading\n        );\n    }\n    // }\n  };\n  setSelectedExamItem = (exam: ExamItemResponse | null) => {\n    this.setState({ selectedExam: exam });\n  };\n  setSelectedExamEdit = (exam: ExamItemResponse | null) => {\n    this.setState({ examToEdit: exam });\n    if (exam === null) {\n      this.setState({ selectedExam: null });\n    }\n  };\n  setUploadingStatus = (status: boolean) => {\n    alert(\"Hello\");\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n  };\n  render() {\n    return (\n      <Fragment>\n        {this.state.examToEdit === null ? (\n          <div>\n            <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n              <div className=\"flex flex-row items center justify-between\">\n                <div className=\"flex flex-row items-center\">\n                  {/* <RiFilePaperFill className=\"text-7xl text-blue-600\" /> */}\n                  <div className=\"flex flex-col px-2\">\n                    <span className=\"text-gray-600 text-2xl font-bold\">\n                      List of exams\n                    </span>\n                    <span className=\"text-blue-600 text-sm font-bold mt-1\">\n                      Period:{\" \"}\n                      {this.props.periods.selected_period === null ? (\n                        <span className=\"text-yellow-700 italic\">\n                          Not selected!\n                        </span>\n                      ) : (\n                        `${\n                          this.props.periods.selected_period.session_plan_name\n                        } - ${\n                          this.props.periods.selected_period.is_active === true\n                            ? \"Active\"\n                            : \"Not valid!\"\n                        }`\n                      )}\n                    </span>\n                    {/* <span className=\"text-blue-600 text-sm font-bold\">\n                    Course:{\" \"}\n                    {this.props.course.selected_course === null ? (\n                      <span className=\"text-yellow-700 italic\">\n                        Not selected!\n                      </span>\n                    ) : (\n                      `${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`\n                    )}\n                  </span> */}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.setState({ selectPeriod: true })}\n                    className={`btn ${\n                      this.props.periods.selected_period === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 border border-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    {this.props.periods.selected_period === null\n                      ? \"Choose period\"\n                      : \"Change period\"}\n                  </div>\n                  <Link\n                    to=\"prepare-exam\"\n                    className={`btn bg-blue-600 text-white h-max flex items-center justify-center h-10 cursor-pointer`}\n                  >\n                    Prepare exam\n                  </Link>\n                </div>\n              </div>\n            </div>\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Loading exams list, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                <div className=\"w-full overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-blue-50 font-bold text-gray-800\">\n                      <tr>\n                        <td className=\"py-2 pl-2 font-bold\">#</td>\n                        <td className=\"py-2\">Course</td>\n                        <td className=\"py-2\">Exam date</td>\n                        <td className=\"py-2\">Start time</td>\n                        <td className=\"py-2\">End time</td>\n                        <td className=\"py-2\">Exam duration</td>\n                        <td className=\"py-2\">Exam</td>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td colSpan={7}>\n                          <input\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => this.setState({ search: e.target.value })}\n                            type=\"text\"\n                            className=\"input-white border border-gray-500 my-2\"\n                            placeholder=\"Search\"\n                            value={this.state.search}\n                          />\n                        </td>\n                      </tr>\n                      {this.props.prepareExam.examsList === null ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <Loading />\n                          </td>\n                        </tr>\n                      ) : searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).length === 0 ? (\n                        <tr>\n                          <td colSpan={7}>\n                            <div className=\"rounded bg-gray-100 px-3 py-3 flex items-center justify-center\">\n                              No exams found!\n                            </div>\n                          </td>\n                        </tr>\n                      ) : (\n                        searchData(\n                          this.examsByPeriod(this.props.prepareExam.examsList),\n                          this.state.search\n                        ).map((item, i) => (\n                          <tr\n                            title=\"Click to view details\"\n                            onClick={() =>\n                              this.setState({ selectedExam: item })\n                            }\n                            key={i + 1}\n                            className={`border-b border-gray-300 text-sm hover:bg-blue-50 cursor-pointer hover:border-blue-300`}\n                          >\n                            <td className=\"pl-2 px-2 font-bold\">{i + 1}</td>\n                            <td className=\"py-2\">\n                              <span className=\"font-bold\">\n                                {item.course_code}\n                              </span>\n                              -{item.course_name}\n                            </td>\n                            <td className=\"py-2\">\n                              {DATE(item.exam_date, \"DD/MM/YYYY\")}\n                            </td>\n                            <td className=\"py-2\">{item.start_time}</td>\n                            <td className=\"py-2\">{item.end_time}</td>\n                            <td className=\"py-2 font-bold text-blue-600\">\n                              {item.duration}mins\n                            </td>\n                            <td className=\"py-2\">\n                              {validateExamDate(\n                                item.exam_date,\n                                item.start_time,\n                                item.end_time\n                              )}\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                  {this.state.selectedExam !== null && (\n                    <ExamDetails\n                      course={this.props.course}\n                      periods={this.props.periods}\n                      exam={this.state.selectedExam}\n                      setSelectedExam={this.setSelectedExamItem}\n                      setSelectedExamEdit={this.setSelectedExamEdit}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          this.props.course.courses &&\n          this.props.course.courses.find(\n            (itm) =>\n              this.state.examToEdit &&\n              itm.course_id === this.state.examToEdit.course\n          ) !== undefined && (\n            <EditExam\n              selectedCourse={\n                this.props.course.courses.find(\n                  (itm) =>\n                    this.state.examToEdit &&\n                    itm.course_id === this.state.examToEdit.course\n                )!\n              }\n              selectedExam={this.state.examToEdit}\n              setSelectedExam={this.setSelectedExamEdit}\n              setUploadingStatus={this.setUploadingStatus}\n              loadExamsList={this.props.loadExamsList}\n              setLoadingProps={this.setLoading}\n            />\n          )\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose a course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.chooseCourse}\n              selected_course_id={\n                this.props.course.selected_course &&\n                this.props.course.selected_course.course_id\n              }\n            />\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const ExamsList = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setSelectedExam,\n})(_ExamsList);\n","import { candidateExamStoreInterface } from \"../actions/candidate_exam\";\nimport {\n  applicationExamAPI,\n  ApplicationPeriodGet,\n} from \"../interfaces/application\";\nimport { ExamAnswerSheetDone } from \"../interfaces/exam\";\nimport { PositionAPI, PositionAPICourse } from \"../interfaces/position\";\nimport { questionType, questionTypeElements } from \"../interfaces/question\";\nimport moment from \"moment-timezone\";\nimport { TimeZone } from \"./app.config\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\nconst today = moment().tz(TimeZone);\n\nexport const getQuestionType = (\n  question_types: questionType[] | null,\n  type_id: string\n) => {\n  let type: questionTypeElementsType | null = null;\n  if (question_types !== null) {\n    let check = question_types.find((itm) => itm.id === type_id);\n    if (check !== undefined) {\n      let check_type = questionTypeElements.find(\n        (itm) => check && itm.key === check.element\n      );\n      if (check_type !== undefined) {\n        type = check_type.key;\n      }\n    }\n  }\n  return type;\n};\n\nexport const findTotalMarks = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  if (results !== null) {\n    let sum: number = 0;\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        sum = sum + test.total_marks;\n      }\n    }\n    return sum.toFixed(2);\n  } else {\n    return \"Wait...\";\n  }\n};\n\nexport const CheckIfExamDone = (\n  courses: PositionAPICourse[],\n  results: ExamAnswerSheetDone[] | null\n) => {\n  let res: boolean = false;\n  if (results !== null) {\n    for (let course of courses) {\n      let test = results.find((itm) => itm.course === course.course_id);\n      if (test !== undefined) {\n        res = true;\n      }\n    }\n  }\n  return res;\n};\n\nexport const validateCalculatedFormula = (\n  formula: string\n): { status: boolean; msg: string } => {\n  let characters: string[] = [];\n  if (\n    formula === undefined ||\n    formula === \"\" ||\n    formula.length === undefined ||\n    formula.length === 0\n  ) {\n    return {\n      status: false,\n      msg: `Please type a formula`,\n    };\n  }\n  if (formula.length < 3) {\n    return {\n      status: false,\n      msg: `The formula in not valid, it is not complete!`,\n    };\n  }\n  for (let el of formula) {\n    characters = [...characters, el];\n  }\n  if (characters[0] !== `\"`) {\n    return {\n      status: false,\n      msg: `Formula should start with (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length < 2) {\n    return {\n      status: false,\n      msg: `Formula is missing closing (\") character`,\n    };\n  }\n  if (characters.filter((itm) => itm === `\"`).length > 2) {\n    return {\n      status: false,\n      msg: `Formula is invalid, because it has many (\") characters (${\n        characters.filter((itm) => itm === `\"`).length\n      })`,\n    };\n  }\n  if (\n    characters[characters.length - 1] !== `\"` &&\n    characters.filter((itm) => itm === `\"`).length === 2\n  ) {\n    let nextCharacter: string = \"\";\n    for (let i = 0; i < characters.length; i++) {\n      if (characters[i] === `\"` && i !== 0) {\n        nextCharacter = characters[i + 1];\n      }\n    }\n    if (nextCharacter !== `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing separation character (;) between formula and error`,\n      };\n    }\n    if (characters[characters.length - 1] === `;`) {\n      return {\n        status: false,\n        msg: `Formula is missing error after (;) character`,\n      };\n    }\n  }\n  return {\n    status: true,\n    msg: `Formula is valid`,\n  };\n};\n\nexport function convertFromStringToDate(responseDate: string) {\n  let dateComponents = responseDate.split(\"T\");\n  let datePieces = dateComponents[0].split(\"-\");\n  let timePieces = dateComponents[1].split(\":\");\n  return new Date(\n    parseInt(datePieces[2]),\n    parseInt(datePieces[1]) - 1,\n    parseInt(datePieces[0]),\n    parseInt(timePieces[0]),\n    parseInt(timePieces[1]),\n    parseInt(timePieces[2])\n  );\n}\n\nexport enum ExamTimeStatus {\n  Waiting = \"Waiting\",\n  Online = \"Online\",\n  Expired = \"Expired\",\n}\n\nexport const validateExamDate = (\n  exam_date: string,\n  start_time: string,\n  end_time: string\n) => {\n  let status: ExamTimeStatus = ExamTimeStatus.Expired;\n  // Dates\n  const toDay: Date = new Date(today.toString());\n  const examDate = new Date(exam_date);\n\n  // Time\n  const startTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      start_time +\n      \":0\"\n  );\n  const endTime = convertFromStringToDate(\n    examDate.getDate() +\n      \"-\" +\n      (examDate.getMonth() + 1) +\n      \"-\" +\n      examDate.getFullYear() +\n      \"T\" +\n      end_time +\n      \":0\"\n  );\n\n  // check exam date\n  if (\n    examDate.getDate() > toDay.getDate() ||\n    examDate.getMonth() > toDay.getMonth() ||\n    examDate.getFullYear() > toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Waiting;\n  }\n\n  if (\n    examDate.getDate() < toDay.getDate() ||\n    examDate.getMonth() < toDay.getMonth() ||\n    examDate.getFullYear() < toDay.getFullYear()\n  ) {\n    status = ExamTimeStatus.Expired;\n  }\n\n  if (\n    examDate.getDate() === toDay.getDate() &&\n    examDate.getMonth() === toDay.getMonth() &&\n    examDate.getFullYear() === toDay.getFullYear()\n  ) {\n    if (startTime.getTime() > toDay.getTime()) {\n      status = ExamTimeStatus.Waiting;\n    } else if (\n      startTime.getTime() <= toDay.getTime() &&\n      endTime.getTime() >= toDay.getTime()\n    ) {\n      status = ExamTimeStatus.Online;\n    } else {\n      status = ExamTimeStatus.Expired;\n    }\n  }\n  // console.log(\n  //   \"Dates comparison: \" + examDate.getDate() + \"=>\" + toDay.getDate()\n  // );\n  // console.log(\"Exam Status: \", status);\n  return status;\n};\n\nexport const InitializeExamsDone = (\n  selected_period: ApplicationPeriodGet | null,\n  selectedPosition: PositionAPI | null,\n  candidateExam: candidateExamStoreInterface,\n  loadExamsDone: (\n    periodId: string,\n    userId: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  user_id: string,\n  setLoadingExamsDone: (status: boolean) => void,\n  selectedExams: applicationExamAPI[] | null,\n  InitializeExamDetails: (\n    periodId: string,\n    courseId: string,\n    district_id: string,\n    center_id: string,\n    room_id: string,\n    position_id: string,\n    callback: (loading: boolean) => void\n  ) => void,\n  setLoadingExams: (status: boolean) => void\n) => {\n  if (selected_period !== null && selectedPosition !== null) {\n    loadExamsDone(\n      selected_period.session_plan_id,\n      user_id,\n      setLoadingExamsDone\n    );\n    for (let course of selectedPosition.courses) {\n      let testDone = candidateExam.user_exams_temp.find(\n        (itm) => itm.course === course.course_id\n      );\n      if (testDone === undefined) {\n        let center_id = selectedExams?.find(\n          (itm) => itm.course_id === course.course_id\n        );\n        if (center_id !== undefined) {\n          InitializeExamDetails(\n            selected_period.session_plan_id,\n            course.course_id,\n            center_id.district_id,\n            center_id.center_id,\n            center_id.room_id,\n            selectedPosition.position_id,\n            setLoadingExams\n          );\n        }\n      }\n    }\n  }\n};\n\nexport const getActiveExam = (\n  candidateExam: candidateExamStoreInterface\n): ExamAnswerSheetDone | null => {\n  if (candidateExam.user_exams_done.length > 0) {\n    for (let exam of candidateExam.user_exams_done) {\n      if (\n        validateExamDate(\n          exam.exam_date,\n          exam.exam_start_time,\n          exam.exam_end_time\n        ) === ExamTimeStatus.Online\n      ) {\n        return exam;\n      }\n    }\n  }\n  return null;\n};\n\nexport const proctoringDefaultRules: {\n  rule: string;\n  status: boolean;\n  caption: string;\n}[] = [\n  {\n    rule: \"right_click_enabled\",\n    status: false,\n    caption: \"Enable right click\",\n  },\n  {\n    rule: \"copy_enabled\",\n    status: false,\n    caption: \"Enable copy\",\n  },\n  {\n    rule: \"paste_enabled\",\n    status: false,\n    caption: \"Enable paste\",\n  },\n  {\n    rule: \"stop_candidate_when_comeback\",\n    status: false,\n    caption: \"Enable Candidate when coming back\",\n  },\n  {\n    rule: \"allow_to_leave_browser\",\n    status: false,\n    caption: \"Enable to leave browser\",\n  },\n];\n","import {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  EmbeddedQuestionAnswerInterface,\n  EssayQuestionAnswerInterface,\n  MatchingQuestionAnswerInterface,\n  MultipleChoiceQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  ShortAnswerQuestionAnswerInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../interfaces/question\";\n\nexport const toMultipleChoice = (\n  answers: any[]\n): MultipleChoiceQuestionAnswerInterface[] => {\n  let res: MultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toTrueFalse = (\n  answers: any[]\n): TrueFalseQuestionAnswerInterface[] => {\n  let res: TrueFalseQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toMatching = (\n  answers: any[]\n): MatchingQuestionAnswerInterface[] => {\n  let res: MatchingQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toSimpleCalculated = (\n  answers: any[]\n): SimpleCalculatedQuestionAnswerInterface[] => {\n  let res: SimpleCalculatedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toShortAnswer = (\n  answers: any[]\n): ShortAnswerQuestionAnswerInterface[] => {\n  let res: ShortAnswerQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toNumerical = (\n  answers: any[]\n): NumericalQuestionAnswerInterface[] => {\n  let res: NumericalQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toCalculatedMultipleChoice = (\n  answers: any[]\n): CalculatedMultipleChoiceQuestionAnswerInterface[] => {\n  let res: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEssay = (answers: any[]): EssayQuestionAnswerInterface[] => {\n  let res: EssayQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n\nexport const toEmbedded = (\n  answers: any[]\n): EmbeddedQuestionAnswerInterface[] => {\n  let res: EmbeddedQuestionAnswerInterface[] = [];\n  for (let answer of answers) {\n    res = [\n      ...res,\n      {\n        id: answer.id,\n        value: answer.value,\n        status: answer.status,\n      },\n    ];\n  }\n  return res;\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { MdEdit } from \"react-icons/md\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { HiOutlineDocumentSearch } from \"react-icons/hi\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  System,\n  PushPopupAlert,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedCourse,\n} from \"../../../../actions\";\nimport Loading from \"../../../../components/Loading/Loading\";\nimport { StoreState } from \"../../../../reducers\";\nimport Modal, { ModalSize, Themes } from \"../../../../components/Modal/Modal\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport axios from \"axios\";\nimport { API } from \"../../../../utils/api\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { course } from \"../../../../interfaces\";\nimport AddCourse from \"./AddCourse\";\nimport searchData from \"../../../../utils/search\";\n\ninterface CoursePropsInterface {\n  system: System;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n}\n\nexport enum CoursesAction {\n  Create = \"Create\",\n  View = \"View\",\n  Delete = \"Delete\",\n  Update = \"Update\",\n}\n\nexport interface S_CourseDetails {\n  action: CoursesAction;\n  selectedCourse: course;\n}\n\nconst _Courses = (props: CoursePropsInterface) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addNew, setAddNew] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>(\"\");\n  const [selectedCourse, setSelectedCourseComp] =\n    useState<S_CourseDetails | null>(null);\n\n  const closeAddNewModal = (state: boolean) => {\n    props.loadCourses(setLoading);\n    setAddNew(state);\n  };\n\n  const setSelectedCourse = (course_selected: S_CourseDetails | null) => {\n    setSelectedCourseComp(course_selected);\n    if (course_selected !== null) {\n      props.setSelectedCourse(course_selected.selectedCourse);\n    }\n  };\n\n  const deleteCourseFn = async (course: course) => {\n    if (course.course_id !== undefined) {\n      setLoading(true);\n      try {\n        await axios.delete(`${API.APPLICATION}/course/${course.course_id}`);\n        props.loadCourses(setLoading);\n        props.PushPopupAlert({\n          title: `Course removed successfully`,\n          theme: PopupAlertTheme.success,\n        });\n        setSelectedCourse(null);\n        // console.log(\"Deleted: \", res);\n      } catch (error) {\n        props.PushPopupAlert({\n          title: `Acton failed, Try again later!`,\n          theme: PopupAlertTheme.warning,\n        });\n        setLoading(false);\n        setSelectedCourse(null);\n        console.log(\"err: \", error);\n      }\n      // setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      props.schoolLevels.school_levels === null ||\n      props.schoolLevels.school_levels.length === 0\n    ) {\n      props.loadSchoolLevels(setLoading);\n    }\n    if (props.course.courses === null || props.course.courses.length === 0) {\n      props.loadCourses(setLoading);\n    }\n  }, [props, setLoading]);\n  return (\n    <Fragment>\n      <div className=\"mt-1\">\n        <div className=\"flex flex-row justify-between items-center bg-gray-100 py-1\">\n          <div className=\"text-blue-600 font-extrabold text-xl px-2\">\n            List of courses\n          </div>\n          {loading === false && (\n            <div\n              onClick={() => setAddNew(true)}\n              className=\"btn bg-blue-600 text-white cursor-pointer hover:bg-blue-800\"\n            >\n              Add new\n            </div>\n          )}\n        </div>\n        <div>\n          <input\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setSearch(e.target.value)\n            }\n            type=\"text\"\n            className=\"input-white border border-gray-500 my-2\"\n            placeholder=\"Search\"\n            value={search}\n          />\n        </div>\n        <div className=\"flex flex-col\">\n          {props.course.courses === null || loading === true ? (\n            <Loading />\n          ) : props.course.courses.length === 0 ? (\n            <div className=\"text-gray-400 px-6 py-4 rounded border mt-4 text-xl font-extrabold flex flex-col items-center justify-center bg-gray-100\">\n              <HiOutlineDocumentSearch className=\"text-7xl text-gray-400 animate__animated animate__shakeX\" />\n              <span>No courses available</span>\n            </div>\n          ) : (\n            searchData(props.course.courses, search).map((item, i) => (\n              <div\n                className={`border flex flex-row px-3 py-2 rounded items-center my-1 justify-between`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-gray-600 font-extrabold\">\n                    {item.course_name}\n                  </span>\n                  <span className={`text-xs pr-5 text-gray-500`}>\n                    {item.description}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.View,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Update,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      setSelectedCourse({\n                        action: CoursesAction.Delete,\n                        selectedCourse: item,\n                      })\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      {(addNew === true ||\n        (selectedCourse !== null &&\n          (selectedCourse.action === CoursesAction.Update ||\n            selectedCourse.action === CoursesAction.View))) && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <div className=\"flex flex-col\">\n                <span className=\"font-extrabold text-2xl text-gray-500\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? selectedCourse.selectedCourse.course_name\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? selectedCourse.selectedCourse.course_name\n                    : \"Add new course\"}\n                </span>\n                <span className=\"text-sm text-gray-500 font-normal\">\n                  {selectedCourse !== null &&\n                  selectedCourse.action === CoursesAction.Update\n                    ? \"Update the selected course\"\n                    : selectedCourse !== null &&\n                      selectedCourse.action === CoursesAction.View\n                    ? \"View more details for the selected course\"\n                    : \"Course will be used in different components in the system, make sure what you're creating\"}\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => {\n            setAddNew(false);\n            setSelectedCourse(null);\n          }}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          backDropClose={true}\n          padding={{ title: true, body: true }}\n        >\n          <AddCourse\n            closeModal={closeAddNewModal}\n            courses={props.course}\n            PushPopupAlert={props.PushPopupAlert}\n            selectedCourse={selectedCourse}\n            deleteSelected={setSelectedCourse}\n            schoolLevels={props.schoolLevels}\n            setSelectedCourse={setSelectedCourse}\n            chaptersOnly={false}\n          />\n        </Modal>\n      )}\n      {selectedCourse !== null &&\n        selectedCourse.action === CoursesAction.Delete && (\n          <Modal\n            title={\n              <div className=\"flex flex-row gap-4 items-center\">\n                <div className=\"flex flex-col\">\n                  <span className=\"font-extrabold text-2xl text-gray-500\">\n                    {selectedCourse.selectedCourse.course_name}\n                  </span>\n                </div>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => setSelectedCourse(null)}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            backDropClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"-mt-6\">\n              <span className=\"text-red-600 font-bold\">\n                Are you sure do you want to delete this course?\n              </span>\n              <div className=\"flex flex-row items-center justify-between mt-2\">\n                <div\n                  onClick={() => setSelectedCourse(null)}\n                  className=\"btn bg-gray-100 text-gray-700 cursor-pointer hover:bg-gray-200\"\n                >\n                  Cancel\n                </div>\n                <div\n                  onClick={() => deleteCourseFn(selectedCourse.selectedCourse)}\n                  className=\"btn bg-red-600 text-white cursor-pointer hover:bg-red-800\"\n                >\n                  Yes, Delete\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  periods,\n  schoolLevels,\n  system,\n  course,\n}: StoreState): {\n  auth: Auth;\n  periods: applicationPeriodsStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n} => {\n  return {\n    auth: auth,\n    periods: periods,\n    schoolLevels: schoolLevels,\n    system: system,\n    course: course,\n  };\n};\n\nconst Courses = connect(mapStateToProps, {\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  loadSchoolLevels,\n  setSelectedEducationCategory,\n  PushPopupAlert,\n  loadCourses,\n  setSelectedCourse,\n})(_Courses);\n\nexport default Courses;\n","import React, { Component, Fragment } from \"react\";\nimport { FiFilter } from \"react-icons/fi\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport searchData from \"../../utils/search\";\n\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  applicationPeriodsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport Loading from \"../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { FaAngleRight } from \"react-icons/fa\";\nimport { searchItem } from \"../../containers/Application/ApplicationPositions/ApplicationPositions\";\nimport SchoolLevelsFilter from \"../../containers/Application/ApplicationPositions/SchoolLevelsFilter/SchoolLevelsFilter\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\n\ninterface UploadQuestionState {\n  loading: boolean;\n  searchLevel: searchItem | null;\n  showFilter: boolean;\n  uploadingStatus: boolean;\n  searchCourseInput: string;\n}\ninterface UploadQuestionProps {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  selected_course_id: string | null;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  loadSchoolLevels: (callback: (loading: boolean) => void) => void;\n  setSelectedEducationCategory: (\n    education_category: Interfaces.education_category\n  ) => void;\n  setSelectedSchoolLevel: (education_category: Interfaces.school_level) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  preparedExams?: ExamItemResponse[] | null;\n  periods: applicationPeriodsStoreInterface;\n}\n\nclass _UploadQuestion extends Component<\n  UploadQuestionProps,\n  UploadQuestionState\n> {\n  constructor(props: UploadQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      searchLevel: null,\n      showFilter: false,\n      uploadingStatus: false,\n      searchCourseInput: \"\",\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  setSearchLevel = (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => {\n    this.setState({\n      searchLevel: {\n        educationCategory: educationCategory,\n        schoolLevel: schoolLevel,\n      },\n    });\n    if (educationCategory) {\n      this.props.setSelectedEducationCategory(educationCategory);\n    }\n    if (schoolLevel) {\n      this.props.setSelectedSchoolLevel(schoolLevel);\n      this.setState({ showFilter: false });\n    }\n  };\n\n  setSchoolLevelFilterFn = (status: boolean) => {\n    this.setState({ showFilter: status });\n  };\n\n  filterWithExams = (courses: course[]) => {\n    let response: course[] = courses;\n    if (this.props.preparedExams !== undefined) {\n      if (this.props.preparedExams !== null) {\n        response = courses.filter(\n          (item) =>\n            this.props.preparedExams &&\n            this.props.preparedExams.find(\n              (itm) =>\n                itm.course === item.course_id &&\n                itm.period ===\n                  this.props.periods.selected_period?.session_plan_id\n            ) === undefined\n        );\n      }\n    }\n    return response;\n  };\n\n  filteredCourses = (\n    courses: course[],\n    searched: searchItem | null\n  ): course[] => {\n    let filtered: course[] = courses;\n    if (searched !== null) {\n      if (searched.schoolLevel !== null) {\n        filtered = courses.filter((itm) => {\n          if (\n            itm.school_levels.find(\n              (itm1) => itm1 === searched.schoolLevel?.school_level_id\n            )\n          ) {\n            let status = false;\n            for (let item2 of itm.school_levels) {\n              if (\n                searched.educationCategory?.school_levels.find(\n                  (i) => i === item2\n                )\n              ) {\n                status = true;\n              }\n            }\n            return status === true ? itm : null;\n          } else {\n            return null;\n          }\n        });\n      } else if (searched.educationCategory !== null) {\n        filtered = courses.filter((itm) => {\n          let status = false;\n          for (let item2 of itm.school_levels) {\n            if (\n              searched.educationCategory?.school_levels.find((i) => i === item2)\n            ) {\n              status = true;\n            }\n          }\n          return status === true ? itm : null;\n        });\n      }\n    }\n    return this.filterWithExams(filtered);\n  };\n\n  setUploadingStatus = (status: boolean) => {\n    this.setState({ uploadingStatus: status });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex-col\">\n          <div className=\"mb-4 grid md:grid-cols-5 gap-2\">\n            <div\n              className={`animate__animated md:col-span-5 md:flex md:flex-col min-h-full bg-white shadow rounded`}\n            >\n              <div className=\"py-2 px-2\">\n                <div className=\"flex flex-row gap-2 mb-2 items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    {/* <div><span className=\"text-lg text-gray-600 font-bold\">Choose a course</span></div> */}\n                    <div className=\"flex flex-row items-center\">\n                      {this.state.searchLevel?.educationCategory && (\n                        <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                          {\n                            this.state.searchLevel.educationCategory\n                              ?.education_category_title\n                          }\n                        </span>\n                      )}\n                      {this.state.searchLevel?.schoolLevel && (\n                        <div className=\"flex flex-row items-center\">\n                          <FaAngleRight className=\"\" />\n                          <span className=\"bg-blue-50 rounded-full px-2 text-xs text-blue-600 font-bold\">\n                            {\n                              this.state.searchLevel.schoolLevel\n                                ?.school_level_name\n                            }\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-12 gap-2\">\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      this.setState({ searchCourseInput: e.target.value })\n                    }\n                    type=\"text\"\n                    className=\"col-span-8 md:col-span-10 input-white h-10 text-sm border-2 border-blue-500\"\n                    placeholder=\"Search course by name or code\"\n                  />\n                  <div\n                    onClick={() => {\n                      this.props.schoolLevels.education_categories === null &&\n                        this.props.loadEducationCategories(this.setLoading);\n                      this.props.schoolLevels.school_levels === null &&\n                        this.props.loadSchoolLevels(this.setLoading);\n                      this.setState({ showFilter: true });\n                    }}\n                    className=\"col-span-4 md:col-span-2 btn cursor-pointer bg-blue-50 hover:bg-blue-100 text-blue-600 flex flex-row justify-center gap-1 items-center\"\n                  >\n                    <FiFilter className=\"text-xl\" />\n                    <span>Filter</span>\n                  </div>\n                </div>\n                <div className=\"mt-4\" style={{ minHeight: \"500px\" }}>\n                  {this.state.uploadingStatus === true ? (\n                    <div className=\"my-2 flex flex-col gap-2\">\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-4/5\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-5/6\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8 w-3/4\"></div>\n                      <div className=\"rounded-xl bg-gray-100 h-8\"></div>\n                    </div>\n                  ) : this.props.course.courses === null ? (\n                    <Loading />\n                  ) : this.props.course.courses &&\n                    this.filteredCourses(\n                      this.props.course.courses,\n                      this.state.searchLevel\n                    ).length === 0 ? (\n                    <span className=\"text-gray-400 font-extrabold ml-2 animate__animated animate__shakeX\">\n                      No courses available!\n                    </span>\n                  ) : (\n                    this.props.course.courses &&\n                    searchData(\n                      this.filteredCourses(\n                        this.props.course.courses,\n                        this.state.searchLevel\n                      ),\n                      this.state.searchCourseInput\n                    ).map((item, i) => (\n                      <div\n                        key={i + 1}\n                        onClick={() => this.props.setSelectedCourse(item)}\n                        className={`rounded border ${\n                          this.props.selected_course_id !== null &&\n                          this.props.selected_course_id === item.course_id\n                            ? \"bg-blue-100 border-blue-300 text-blue-600 animate__animated animate__bounceIn\"\n                            : \"border-gray-200 hover:bg-blue-100 hover:border-blue-600 text-gray-600\"\n                        }  px-2 py-3 flex flex-row gap-3 items-center my-2 cursor-pointer`}\n                      >\n                        <span className=\"text-sm\">\n                          <div\n                            className={`h-8 w-8 rounded-full flex justify-center items-center text-white ${\n                              this.props.selected_course_id !== null &&\n                              this.props.selected_course_id === item.course_id\n                                ? \"bg-blue-600 text-white\"\n                                : \"font-bold bg-gray-500\"\n                            }`}\n                          >\n                            {i + 1}\n                          </div>\n                        </span>\n                        <div className=\"flex flex-col\">\n                          <span className={`text-md font-bold`}>\n                            {item.course_name}\n                          </span>\n                          <span className={`text-xs`}>\n                            Code: {item.course_code}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.medium}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <SchoolLevelsFilter\n              educationCategories={this.props.schoolLevels.education_categories}\n              schoolLevels={this.props.schoolLevels.school_levels}\n              searchLevel={this.state.searchLevel}\n              setSearchLevel={this.setSearchLevel}\n              setSchoolLevelFilterFn={this.setSchoolLevelFilterFn}\n            />\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  periods,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    periods: periods,\n  };\n};\n\nconst UploadQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n})(_UploadQuestion);\n\nexport default UploadQuestion;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdAddCircle } from \"react-icons/io\";\nimport { courseStoreInterface } from \"../../../../actions/course\";\nimport { schoolLevelsStoreInterface } from \"../../../../actions/school_levels\";\nimport { PopupAlertData } from \"../../../../components/Alert/Popup\";\nimport { course, CourseChapter } from \"../../../../interfaces/course\";\nimport { formErrorInterface } from \"../../../../interfaces/form\";\nimport { PopupAlertTheme } from \"../../../../interfaces/popupAlert\";\nimport { API } from \"../../../../utils/api\";\nimport SchoolLevelSelect from \"../SettingsComponents/SchoolLevelSelect\";\nimport { CoursesAction, S_CourseDetails } from \"./Courses\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface AddCourseProps {\n  closeModal: (state: boolean) => void;\n  courses: courseStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedCourse: S_CourseDetails | null;\n  deleteSelected: (selectedDetail: S_CourseDetails) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (courseDetail: S_CourseDetails | null) => void;\n  chaptersOnly: boolean;\n}\n\nconst AddCourse = (props: AddCourseProps) => {\n  // States\n  const [course_id, setCourse_id] = useState<string>(\"\");\n  const [course_name, setCourse_name] = useState<string>(\"\");\n  const [course_code, setCourse_code] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [chapters, setChapters] = useState<CourseChapter[]>([]);\n  const [school_levels, setSchool_levels] = useState<string[]>([]);\n  const [formError, setFormError] = useState<formErrorInterface | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [addChapter, setAddChapter] = useState<{\n    openAdd: boolean;\n    chapter: string;\n  }>({ openAdd: false, chapter: \"\" });\n  const submitCourse = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    // validation\n    if (\n      props.selectedCourse?.action === CoursesAction.Update &&\n      course_id === \"\"\n    ) {\n      return setFormError({\n        element: \"course_id\",\n        msg: \"Please choose Course\",\n      });\n    } else if (course_name === \"\") {\n      return setFormError({\n        element: \"course_name\",\n        msg: \"Please fill the course name\",\n      });\n    } else if (course_code === \"\") {\n      return setFormError({\n        element: \"course_code\",\n        msg: \"Please fill the course code\",\n      });\n    } else if (description === \"\") {\n      return setFormError({\n        element: \"description\",\n        msg: \"Please fill the description\",\n      });\n    } else {\n      setLoading(true);\n      try {\n        // Update current\n        if (\n          props.selectedCourse !== null &&\n          props.selectedCourse.selectedCourse.course_id !== undefined\n        ) {\n          let obj: course = {\n            course_id: course_id,\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          };\n          await axios.patch(`${API.APPLICATION}/course`, obj);\n          props.PushPopupAlert({\n            title: `Course updated successfully`,\n            description: `After updating the course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.info,\n          });\n          props.setSelectedCourse({\n            action: props.selectedCourse.action,\n            selectedCourse: obj,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        } else {\n          // Add new\n          await axios.post(`${API.APPLICATION}/course`, {\n            course_name: course_name,\n            course_code: course_code,\n            description: description,\n            school_levels: school_levels,\n            chapters: chapters,\n          });\n          props.PushPopupAlert({\n            title: `Course added successfully`,\n            description: `After adding the Course, you have access to delete and update it!`,\n            theme: PopupAlertTheme.success,\n          });\n          props.closeModal(false);\n          // console.log(\"Result: \", res);\n        }\n      } catch (error: any) {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.errors !== undefined) {\n              if (error.response.data.errors.length > 0) {\n                props.PushPopupAlert({\n                  title: error.response.data.errors[0].message,\n                  theme: PopupAlertTheme.danger,\n                });\n              } else {\n                props.PushPopupAlert({\n                  title: `Failed to add course! Try again`,\n                  theme: PopupAlertTheme.danger,\n                });\n              }\n            } else {\n              props.PushPopupAlert({\n                title: `Failed to add course! Try again`,\n                theme: PopupAlertTheme.danger,\n              });\n            }\n          } else {\n            props.PushPopupAlert({\n              title: `Failed to add course! Try again`,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n        console.log(\"Err: \", { ...error });\n      }\n      setLoading(false);\n    }\n  };\n\n  const addNewChapter = () => {\n    if (addChapter.chapter === \"\") {\n      return setAddChapter({ openAdd: false, chapter: \"\" });\n    }\n    if (addChapter.openAdd === true) {\n      setAddChapter({ openAdd: true, chapter: \"\" });\n      setChapters([\n        {\n          name: addChapter.chapter,\n          status: 1,\n          id: uuidv4(),\n        },\n        ...chapters,\n      ]);\n    }\n  };\n\n  const removeChapter = (chapter: CourseChapter) => {\n    setChapters(chapters.filter((itm) => itm.id !== chapter.id));\n  };\n\n  useEffect(() => {\n    if (props.selectedCourse !== null) {\n      // console.log(\"Sle: \", props.selectedCourse);\n      if (course_id === \"\") {\n        setCourse_id(props.selectedCourse.selectedCourse.course_id);\n      }\n      if (course_name === \"\") {\n        setCourse_name(props.selectedCourse.selectedCourse.course_name);\n      }\n      if (course_code === \"\") {\n        setCourse_code(props.selectedCourse.selectedCourse.course_code);\n      }\n      if (description === \"\") {\n        setDescription(props.selectedCourse.selectedCourse.description);\n      }\n      if (school_levels.length === 0) {\n        setSchool_levels(props.selectedCourse.selectedCourse.school_levels);\n      }\n      if (chapters.length === 0) {\n        if (props.selectedCourse.selectedCourse.chapters !== undefined) {\n          setChapters(props.selectedCourse.selectedCourse.chapters);\n        }\n      }\n    }\n  }, [\n    props,\n    course_id,\n    course_name,\n    course_code,\n    description,\n    school_levels,\n    chapters,\n  ]);\n  return (\n    <form onSubmit={submitCourse} className=\"-mt-2\">\n      <div className=\"grid md:grid-cols-12 gap-5\">\n        {props.chaptersOnly === false && (\n          <div className=\"col-span-6\">\n            <SchoolLevelSelect\n              schoolLevels={props.schoolLevels}\n              school_levels={school_levels}\n              setSchool_levels={setSchool_levels}\n              loading={loading}\n            />\n          </div>\n        )}\n        <div\n          className={`${\n            props.chaptersOnly === false ? \"col-span-6\" : \"col-span-12\"\n          }`}\n        >\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course name\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_name(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_name}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_name\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_name\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mb-1\">\n                Course code\n              </span>\n              <input\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setCourse_code(e.target.value);\n                  setFormError(null);\n                }}\n                type=\"text\"\n                value={course_code}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"course_code\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n              />\n              {formError !== null && formError.element === \"course_code\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          {props.chaptersOnly === false && (\n            <div className=\"flex flex-col mb-2\">\n              <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">\n                Description\n              </span>\n              <textarea\n                disabled={loading}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                  setDescription(e.target.value);\n                  setFormError(null);\n                }}\n                value={description}\n                className={`input-white border-2 ${\n                  formError !== null && formError.element === \"description\"\n                    ? \"border-red-500\"\n                    : \"border-gray-500\"\n                }`}\n                style={{ minHeight: \"100px\" }}\n              >\n                {description}\n              </textarea>\n              {formError !== null && formError.element === \"description\" && (\n                <span className=\"text-red-600 font-bold text-xs\">\n                  {formError.msg}\n                </span>\n              )}\n            </div>\n          )}\n          <div className=\"flex flex-col mb-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600 font-bold\">Course chapters</span>\n              {addChapter.openAdd === false && (\n                <div\n                  onClick={() => setAddChapter({ openAdd: true, chapter: \"\" })}\n                  className=\"cursor-pointer btn bg-blue-50 text-blue-600 text-sm flex flex-row gap-1 items-center\"\n                >\n                  <IoMdAddCircle className=\"text-2xl\" />\n                  <span>Add chapter</span>\n                </div>\n              )}\n            </div>\n            {/* Add chapter */}\n            <div>\n              {addChapter.openAdd === true && (\n                <div className=\"flex flex-row items-center justify-between gap-2 mt-2\">\n                  <input\n                    onChange={(e) => {\n                      setAddChapter({ openAdd: true, chapter: e.target.value });\n                    }}\n                    value={addChapter.chapter}\n                    type=\"text\"\n                    placeholder=\"Chapter name\"\n                    className=\"input-white border-2 rounded border-gray-500\"\n                  />\n                  <div\n                    onClick={() => loading === false && addNewChapter()}\n                    className={`${\n                      loading === false\n                        ? \"cursor-pointer\"\n                        : \"cursor-not-allowed\"\n                    } btn ${\n                      addChapter.chapter === \"\"\n                        ? loading === true\n                          ? \"bg-gray-200\"\n                          : \"bg-red-600\"\n                        : \"bg-blue-600\"\n                    } text-white text-sm flex flex-row gap-1 items-center`}\n                  >\n                    <span>{addChapter.chapter === \"\" ? \"Close\" : \"Add\"}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            {chapters.length === 0 ? (\n              <div className=\"rounded bg-gray-50 px-2 py-6 mt-2 flex flex-col text-sm text-gray-400 font-extrabold text-center\">\n                No chapters added\n              </div>\n            ) : (\n              <div>\n                {chapters.map((item, i) => (\n                  <div\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-between border ${\n                      props.selectedCourse !== null &&\n                      props.selectedCourse.selectedCourse.chapters &&\n                      props.selectedCourse.selectedCourse.chapters.filter(\n                        (itm) => itm.id === item.id\n                      ).length === 0\n                        ? \"bg-gray-50 border-gray-200 text-gray-500\"\n                        : \"bg-white border-blue-200 text-blue-600\"\n                    } my-1 pl-2 pr-1 py-1 rounded text-sm font-bold`}\n                  >\n                    <span>{item.name}</span>\n                    {props.chaptersOnly === false && (\n                      <div\n                        onClick={() => loading === false && removeChapter(item)}\n                        className={`btn ${\n                          loading === false\n                            ? \"cursor-pointer\"\n                            : \"cursor-not-allowed\"\n                        } bg-red-100 text-red-700 text-xs`}\n                      >\n                        Remove\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          {addChapter.chapter === \"\" && (\n            <div className=\"flex flex-row justify-between items-center\">\n              {props.selectedCourse?.action === CoursesAction.View ? (\n                <button\n                  onClick={() =>\n                    props.selectedCourse &&\n                    props.deleteSelected({\n                      action: CoursesAction.Delete,\n                      selectedCourse: props.selectedCourse.selectedCourse,\n                    })\n                  }\n                  type=\"button\"\n                  className=\"btn border border-red-600 text-red-700\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div></div>\n              )}\n              <button\n                disabled={loading}\n                type=\"submit\"\n                className={`btn bg-blue-600 text-white ${\n                  loading === true\n                    ? \"animate__animated animate__flash animate__infinite\"\n                    : \"\"\n                }`}\n              >\n                {loading === true\n                  ? \"Please wait...\"\n                  : props.selectedCourse !== null\n                  ? \"Update course\"\n                  : \"Add course\"}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCourse;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  questionType,\n} from \"../../interfaces/index\";\nimport { newAnswer } from \"../../containers/DoExam/DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { LoadingType } from \"../../components/Loading/LoadingV2\";\nimport {\n  toCalculatedMultipleChoice,\n  toEmbedded,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../../containers/DoExam/QuestionDetails/ConvertingAnswers\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { findQuestionType } from \"../../containers/DoExam/utils/utils\";\nimport MultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/MultipleChoice\";\nimport TrueFalse from \"../../containers/DoExam/QuestionDetails/Answers/TrueFalse\";\nimport SimpleCalculated from \"../../containers/DoExam/QuestionDetails/Answers/SimpleCalculated\";\nimport Matching from \"../../containers/DoExam/QuestionDetails/Answers/Matching\";\nimport ShortAnswer from \"../../containers/DoExam/QuestionDetails/Answers/ShortAnswer\";\nimport Numerical from \"../../containers/DoExam/QuestionDetails/Answers/Numerical\";\nimport CalculatedMultipleChoice from \"../../containers/DoExam/QuestionDetails/Answers/CalculatedMultipleChoice\";\nimport { Shuffle } from \"../../utils/functions\";\nimport Essay from \"../../containers/DoExam/QuestionDetails/Answers/Essay\";\nimport {\n  QuestionForEmbedded,\n  QuestionForHybrid,\n  questionShortElementsType,\n  questionTypeElementsType,\n  regExEmbedded,\n} from \"@mastrecruit/common\";\nimport Embedded from \"../../containers/DoExam/QuestionDetails/Answers/Embedded\";\nimport Hybrid from \"../../containers/DoExam/QuestionDetails/Answers/Hybrid\";\nimport HybridAnswers from \"../../containers/DoExam/QuestionDetails/Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: QuestionInterface;\n  setSelectedQuestion: (question: QuestionInterface) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst returnSelect = (\n  data: QuestionAnswerInterface,\n  type: questionShortElementsType | QuestionForEmbedded | QuestionForHybrid,\n  questionAnswers: QuestionAnswerInterface[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let answers: QuestionAnswerFormat[] = [];\n  for (let answer of data.answer) {\n    answers.push({\n      id: answer.id,\n      value: answer.value,\n      status: answer.status,\n    });\n  }\n  let answerCheck: QuestionAnswerInterface | undefined = questionAnswers.find(\n    (itm) => itm.reference === data.reference\n  );\n  let answered: QuestionAnswerFormat[] = [];\n  if (answerCheck !== undefined) {\n    answered = answerCheck.answer;\n  }\n  if (answers.length > 0) {\n    if (type === QuestionForEmbedded.SingleMultiple) {\n      return (\n        <span className=\"w-max\">\n          <select\n            className={`px-3 py-2 rounded text-base max-w-full border border-gray-300 ${\n              answered.length !== 0 &&\n              answers.find((itm) => itm.id === answered[0].id) !== undefined\n                ? \"text-blue-600 font-bold\"\n                : \"text-gray-700 font-bold\" //Example of condition of changing color\n            }`}\n            value={answered.length === 0 ? \"\" : answered[0].id}\n            onChange={(e) => {\n              let select = answers.find((itm) => itm.id === e.target.value);\n              if (select !== undefined) {\n                addAnswer({\n                  _id: data._id,\n                  reference: data.reference,\n                  answer: [\n                    {\n                      id: select.id,\n                      value: select.value,\n                      status: select.status,\n                    },\n                  ],\n                });\n              } else {\n                alert(\"Invalid choice!\");\n              }\n            }}\n          >\n            <option value={\"\"}>Choose correct answer</option>\n            {answers.map((item, i) => (\n              <option value={item.id} key={i + 1}>\n                {item.value}\n              </option>\n            ))}\n          </select>\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"w-max bg-green-100\">\n          <input\n            value={\n              answered.length === 0\n                ? \"\"\n                : type === QuestionForEmbedded.ShortAnswer\n                ? answered[0].value\n                : answered[0].value[0]\n            }\n            onChange={(e) => {\n              addAnswer({\n                _id: data._id,\n                reference: data.reference,\n                answer: [\n                  {\n                    id: answers[0].id,\n                    value:\n                      type === QuestionForEmbedded.ShortAnswer\n                        ? e.target.value\n                        : [e.target.value],\n                    status: answers[0].status,\n                  },\n                ],\n              });\n            }}\n            type=\"text\"\n            className=\"bg-white px-3 py-1 rounded text-base text-blue-600 font-bold border border-gray-300\"\n          />\n        </span>\n      );\n    }\n  } else {\n    return <div>Question not valid!</div>;\n  }\n};\n\nexport const EmbeddedQuestion = (\n  selectedQuestion: QuestionInterface,\n  questionTypes: questionType[] | null,\n  language: QuestionLanguage,\n  questionAnswers: QuestionAnswersStore[],\n  addAnswer: (data: QuestionAnswerInterface) => void\n): JSX.Element => {\n  let newTextResult = [];\n  // Testing Question\n  let question = selectedQuestion.question.find(\n    (itm) => itm.language === language\n  );\n  if (\n    findQuestionType(selectedQuestion.type, questionTypes) !== null &&\n    findQuestionType(selectedQuestion.type, questionTypes) ===\n      questionTypeElementsType.Embedded\n  ) {\n    let answeredQuestions: QuestionAnswerInterface[] = [];\n    if (question !== undefined) {\n      let userQuestionAnswers = questionAnswers.find(\n        (itm) => itm.question_id === selectedQuestion.question_id\n      );\n      if (userQuestionAnswers !== undefined) {\n        answeredQuestions = userQuestionAnswers.answers;\n      }\n\n      var answers = question.answers;\n      var originalText = question.description.split(\" \");\n      // var newTexts = question.description.match(regExEmbedded);\n\n      for (let check of originalText) {\n        let test = answers.find((itm) => itm.reference === parseInt(check[1]));\n        if (test !== undefined) {\n          // Find type of subQuestion\n          let type = question.sub_question.find(\n            (itm) => itm.reference === parseInt(check[1])\n          );\n          if (type !== undefined) {\n            newTextResult.push(\n              returnSelect(test, type.typeShort, answeredQuestions, addAnswer)\n            );\n          }\n        } else {\n          newTextResult.push(check);\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"w-full text-base font-semibold mt-2\">\n      {newTextResult.map((item, i) => (\n        <span key={i + 1} className=\"mr-1\">\n          {item}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst _QuestionPreview = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const [selectedLanguage, setSelectedLanguage] = useState(\n    props.selectedQuestion.question[0].language\n  );\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 my-2 overflow-y-auto pb-40 md:pb-10\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-row justify-between w-full\">\n              {props.selectedQuestion.question.find(\n                (itm) => itm.language === selectedLanguage\n              ) && (\n                <div className=\"text-md flex flex-col w-full\">\n                  <div className=\"flex flex-row justify-between w-full\">\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.title,\n                      }}\n                      className=\"text-sm text-gray-600 mb-2\"\n                    ></div>\n\n                    {/* Languages */}\n                    <div className=\"flex flex-row gap-2\">\n                      <div className=\"px-3 py-1 rounded-full flex items-center justify-center text-base font-bold bg-white text-blue-800\">\n                        {props.selectedQuestion.marks} marks\n                      </div>\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === selectedLanguage\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                    setSelectedLanguage(item.key);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    selectedLanguage === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {selectedLanguage === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {props.selectedQuestion.question_id !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) !== null &&\n                  findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  ) === questionTypeElementsType.Embedded ? (\n                    EmbeddedQuestion(\n                      props.selectedQuestion,\n                      props.questionTypes.questionTypes,\n                      selectedLanguage,\n                      props.candidateExam.question_answers,\n                      () => {}\n                    )\n                  ) : (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.description,\n                      }}\n                      className=\"text-lg text-gray-800 font-bold mt-2\"\n                    ></div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.Hybrid)\n                ? \"\"\n                : \"bg-white\"\n            } rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.selectedQuestion.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.selectedQuestion.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* True and False */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toTrueFalse(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toMatching(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        props.selectedQuestion.question.find(\n                          (itm) => itm.language === selectedLanguage\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toSimpleCalculated(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Short Answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toShortAnswer(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n\n            {/* Numerical */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toNumerical(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toCalculatedMultipleChoice(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Essay answer */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: toEssay(\n                      props.selectedQuestion.question.find(\n                        (itm) => itm.language === selectedLanguage\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={props.answerQuestionFn}\n                />\n              )}\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.selectedQuestion.question_id !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.selectedQuestion.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id === props.selectedQuestion.question_id\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.selectedQuestion.question_id,\n                    question: undefined,\n                    answers: props.selectedQuestion.question.find(\n                      (itm) => itm.language === selectedLanguage\n                    )!.answers,\n                  }}\n                  wholeQuestion={props.selectedQuestion.question.find(\n                    (itm) => itm.language === selectedLanguage\n                  )}\n                  answerQuestionFn={props.answerQuestionFn}\n                  selectedLanguage={selectedLanguage}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionPreview = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionPreview);\n\nexport default QuestionPreview;\n","import React from \"react\";\nimport { Quill } from \"react-quill\";\n\n// Custom Undo button icon component for Quill editor. You can import it directly\n// from 'quill/assets/icons/undo.svg' but I found that a number of loaders do not\n// handle them correctly\n\nconst CustomUndo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n    />\n  </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n  <svg viewBox=\"0 0 18 18\">\n    <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n    <path\n      className=\"ql-stroke\"\n      d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n    />\n  </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\n// function undoChange(this: any) {\n//   this.quill.history.undo();\n// }\n// function redoChange(this: any) {\n//   this.quill.history.redo();\n// }\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n  \"arial\",\n  \"comic-sans\",\n  \"courier-new\",\n  \"georgia\",\n  \"helvetica\",\n  \"lucida\",\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\n// export const modules = {\n//   toolbar: {\n//     container: \"#toolbar\",\n//     handlers: {\n//       undo: undoChange,\n//       redo: redoChange\n//     }\n//   },\n//   history: {\n//     delay: 500,\n//     maxStack: 100,\n//     userOnly: true\n//   }\n// };\n\n// Formats objects for setting up the Quill editor\nexport const formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"align\",\n  \"strike\",\n  \"script\",\n  \"blockquote\",\n  \"background\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"color\",\n  \"code-block\",\n  \"video\",\n];\n\ninterface QuillToolbarProps {\n  id: string;\n}\n\n// Quill Toolbar component\nexport const QuillToolbar = (props: QuillToolbarProps) => (\n  <div id={props.id}>\n    <span className=\"ql-formats\">\n      <select className=\"ql-font\" defaultValue=\"arial\">\n        <option value=\"arial\">Arial</option>\n        <option value=\"comic-sans\">Comic Sans</option>\n        <option value=\"courier-new\">Courier New</option>\n        <option value=\"georgia\">Georgia</option>\n        <option value=\"helvetica\">Helvetica</option>\n        <option value=\"lucida\">Lucida</option>\n      </select>\n      <select className=\"ql-size\" defaultValue=\"medium\">\n        <option value=\"extra-small\">Size 1</option>\n        <option value=\"small\">Size 2</option>\n        <option value=\"medium\">Size 3</option>\n        <option value=\"large\">Size 4</option>\n      </select>\n      <select className=\"ql-header\" defaultValue=\"3\">\n        <option value=\"1\">Heading</option>\n        <option value=\"2\">Subheading</option>\n        <option value=\"3\">Normal</option>\n      </select>\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-bold\" />\n      <button className=\"ql-italic\" />\n      <button className=\"ql-underline\" />\n      <button className=\"ql-strike\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-list\" value=\"ordered\" />\n      <button className=\"ql-list\" value=\"bullet\" />\n      <button className=\"ql-indent\" value=\"-1\" />\n      <button className=\"ql-indent\" value=\"+1\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-script\" value=\"super\" />\n      <button className=\"ql-script\" value=\"sub\" />\n      <button className=\"ql-blockquote\" />\n      <button className=\"ql-direction\" />\n    </span>\n    <span className=\"ql-formats\">\n      <select className=\"ql-align\" />\n      <select className=\"ql-color\" />\n      <select className=\"ql-background\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-link\" />\n      <button className=\"ql-image\" />\n      <button className=\"ql-video\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-formula\" />\n      <button className=\"ql-code-block\" />\n      <button className=\"ql-clean\" />\n    </span>\n    <span className=\"ql-formats\">\n      <button className=\"ql-undo\">\n        <CustomUndo />\n      </button>\n      <button className=\"ql-redo\">\n        <CustomRedo />\n      </button>\n    </span>\n  </div>\n);\n\nexport default QuillToolbar;\n","import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport EditorToolbar, { formats } from \"../EditorToolbar/EditorToolbar\";\n\ninterface EditorComponentProps {\n  id: string;\n  item: string;\n  handleItem: (e: string) => void;\n}\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange(this: any) {\n  this.quill.history.undo();\n}\nfunction redoChange(this: any) {\n  this.quill.history.redo();\n}\n\nconst EditorComponent = (props: EditorComponentProps) => {\n  const modules = {\n    toolbar: {\n      container: `#${props.id}`,\n      handlers: {\n        undo: undoChange,\n        redo: redoChange,\n      },\n    },\n    history: {\n      delay: 500,\n      maxStack: 100,\n      userOnly: true,\n    },\n  };\n  // const getTextInQuill = (\n  //   content: any,\n  //   delta: any,\n  //   source: any,\n  //   editor: any\n  // ) => {\n  //   const text = editor.getText(content);\n  //   props.handleItem(text);\n  // };\n  return (\n    <div>\n      <EditorToolbar id={props.id} />\n      <ReactQuill\n        theme=\"snow\"\n        value={props.item ?? \"\"}\n        placeholder={\"Write text here...\"}\n        modules={modules}\n        formats={formats}\n        className=\"rounded mb-3 validate w-full\"\n        onChange={(content: any, delta: any, source: any, editor: any) => {\n          // const text = editor.getText(content);\n          props.handleItem(content);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default EditorComponent;\n","import React, { Component, Fragment } from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n  SubQuestionInterface,\n} from \"../../../../../interfaces/question\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  System,\n  PushPopupAlert,\n  UpdateQuestion,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  setSelectedCourse,\n} from \"../../../../../actions\";\nimport { StoreState } from \"../../../../../reducers\";\nimport { PopupAlertData } from \"../../../../../components/Alert/Popup\";\nimport Courses from \"../../../../../components/Courses/Courses\";\nimport { course } from \"../../../../../interfaces/course\";\nimport Modal, {\n  ModalSize,\n  Themes,\n} from \"../../../../../components/Modal/Modal\";\nimport QuestionAnswer from \"./QuestionAnswer\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport HandleInputProps from \"./HandleInput\";\nimport { HiCheck } from \"react-icons/hi\";\nimport Loading from \"../../../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../../../components/Loading/LoadingV2\";\nimport QuestionChapters from \"./QuestionChapters\";\nimport { PopupAlertTheme } from \"../../../../../interfaces/popupAlert\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { getQuestionType } from \"../../../../../utils/question_bank\";\nimport ChangeLanguage from \"../../../../../components/ChangeLanguage/ChangeLanguage\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport AddCourse from \"../../../QuestionSettings/Courses/AddCourse\";\nimport {\n  CoursesAction,\n  S_CourseDetails,\n} from \"../../../QuestionSettings/Courses/Courses\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\ninterface EditQuestionProps {\n  selectedQuestion: QuestionInterface;\n  questionsList?: QuestionInterface[];\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  unSelectQuestion: () => void;\n  UpdateQuestion: (\n    question: QuestionInterface,\n    callback: (loading: boolean) => void,\n    actionStatus: (loading: boolean, msg: string) => void\n  ) => void;\n  prepareExam: PrepareExamsStoreInterface;\n  addExamQuestion: (question: QuestionInterface) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n  setSelectedCourse: (course: course | null) => void;\n}\n\ninterface EditQuestionState {\n  loading: boolean;\n  id: string;\n  course: string; // Course ID\n  question: QuestionItemInterface[];\n  type: questionTypeElementsType | \"Invalid\";\n  chapters: string[]; // CourseChapter: ID\n  customNumber: number;\n  marks: number;\n  answers: QuestionAnswerInterface[];\n  is_deleted: boolean;\n  selectedLanguage: LanguageInterface;\n  showFilter: boolean;\n  selectedKey: SelectedKeysEdit | null;\n  showQuestionChapters: boolean;\n  showLanguages: boolean;\n  addNewChapter: boolean;\n}\n\nexport enum SelectedKeysEdit {\n  Title = \"Title\",\n  Description = \"Description\",\n  QuestionAnswer = \"QuestionAnswer\",\n}\n\nclass _EditQuestion extends Component<EditQuestionProps, EditQuestionState> {\n  constructor(props: EditQuestionProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      id: this.props.selectedQuestion.question_id,\n      course: this.props.selectedQuestion.course,\n      question: this.props.selectedQuestion.question,\n      type: this.props.selectedQuestion.type,\n      chapters: this.props.selectedQuestion.chapters,\n      customNumber: this.props.selectedQuestion.customNumber,\n      marks: this.props.selectedQuestion.marks,\n      answers: this.props.selectedQuestion.answers,\n      is_deleted: this.props.selectedQuestion.is_deleted,\n      selectedLanguage:\n        QuestionLanguages.find(\n          (itm) => itm.key === this.props.selectedQuestion.question[0].language\n        ) === undefined\n          ? QuestionLanguages[0]\n          : QuestionLanguages.find(\n              (itm) =>\n                itm.key === this.props.selectedQuestion.question[0].language\n            )!,\n      showFilter: false,\n      selectedKey: null,\n      showQuestionChapters: false,\n      showLanguages: true,\n      addNewChapter: false,\n    };\n  }\n\n  setShowLanguages = (status: boolean) => {\n    console.log(\"Status checked: \", status);\n    this.setState({ showLanguages: status });\n  };\n\n  filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    for (let langItem of this.props.selectedQuestion.question) {\n      let testLangQ = QuestionLanguages.find(\n        (l) => l.key === langItem.language\n      );\n      if (testLangQ !== undefined) {\n        langs = [...langs, testLangQ];\n      }\n    }\n    return langs;\n  };\n\n  QuestionLang = (question: QuestionItemInterface[]) => {\n    let res = question.find(\n      (itm) => itm.language === this.state.selectedLanguage.key\n    );\n\n    return res !== undefined ? res : question[0];\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n\n  actionStatus = (status: boolean, msg: string) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Failed!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n  };\n\n  handleUpdateQuestionDetails = (question: QuestionItemInterface) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push(question);\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.CalculatedMultipleChoice\n      ) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: res,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerSimpleCalculate = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.SimpleCalculate\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SimpleCalculate\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumerical = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: [editedAnswer],\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerNumericalValue = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newEditedAnswer: NumericalQuestionAnswerInterface[] = [];\n    if (editedAnswer.value.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          value: [\n            editedAnswer.value[0],\n            question.answers[0].answer[0].value[1],\n          ],\n          status: [\n            editedAnswer.value[0] - question.answers[0].answer[0].value[1],\n            editedAnswer.value[0] + question.answers[0].answer[0].value[1],\n          ],\n        },\n      ];\n    } else if (editedAnswer.status.length === 1) {\n      newEditedAnswer = [\n        {\n          id: answer_id,\n          status: [\n            editedAnswer.value[0] - editedAnswer.status[0],\n            editedAnswer.value[0] + editedAnswer.status[0],\n          ],\n          value: [editedAnswer.value[0], editedAnswer.status[0]],\n        },\n      ];\n    } else {\n      newEditedAnswer = [editedAnswer];\n    }\n    for (let current of this.state.question) {\n      if (\n        question.language === current.language ||\n        getQuestionType(\n          this.props.questionTypes.questionTypes,\n          this.state.type\n        ) === questionTypeElementsType.Numeric\n      ) {\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.Numeric\n        ) {\n          updatedQuestion.push({\n            _id: current._id,\n            description: current.description,\n            language: current.language,\n            status: current.status,\n            title: current.title,\n            sub_question: current.sub_question,\n            answers: [\n              {\n                _id: current.answers[0]._id,\n                reference: current.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        } else {\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: [\n              {\n                _id: question.answers[0]._id,\n                reference: question.answers[0].reference,\n                answer: newEditedAnswer,\n              },\n            ],\n          });\n        }\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateShortAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateEssayAnswer = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: [editedAnswer],\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerSingleMultiple = (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: QuestionAnswerFormat[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.MultipleChoice\n        ) {\n          newFiltered.push(addedAnswer);\n        }\n        if (\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.SingleMultiple ||\n          getQuestionType(\n            this.props.questionTypes.questionTypes,\n            this.state.type\n          ) === questionTypeElementsType.CalculatedMultipleChoice\n        ) {\n          if (\n            addedAnswer.status === true &&\n            current.answers[0].answer.filter((itm) => itm.status === true)\n              .length !== 0\n          ) {\n            newFiltered.push({\n              id: addedAnswer.id,\n              value: addedAnswer.value,\n              status: false,\n            });\n          } else {\n            newFiltered.push(addedAnswer);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  addAnswerMatchingQuestion = (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let newFiltered: MatchingQuestionAnswerInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        newFiltered = current.answers[0].answer;\n        newFiltered.push(addedAnswer);\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: [\n            {\n              _id: question.answers[0]._id,\n              reference: question.answers[0].reference,\n              answer: newFiltered,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  removeAnswerSingleMultiple = (\n    question: QuestionItemInterface[],\n    removed: QuestionAnswerFormat\n  ) => {\n    if (window.confirm(\"Are you sure do ypu want to delete?\") === true) {\n      let updatedQuestion: QuestionItemInterface[] = [];\n      for (let current of this.state.question) {\n        let res: QuestionAnswerFormat[] = current.answers[0].answer.filter(\n          (itm) => itm.id !== removed.id\n        );\n        updatedQuestion.push({\n          _id: current._id,\n          description: current.description,\n          language: current.language,\n          status: current.status,\n          title: current.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      }\n      this.setState({ question: updatedQuestion });\n    }\n  };\n\n  editSingleMultipleStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editTrueFalseStatus = (answer_id: string, status: boolean) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: QuestionAnswerFormat[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (ans.status === true && status === false) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: true,\n          });\n        } else if (ans.status === true) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: false,\n          });\n        } else if (ans.id === answer_id) {\n          res.push({\n            id: ans.id,\n            value: ans.value,\n            status: status,\n          });\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingStatus = (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      let res: MatchingQuestionAnswerInterface[] = [];\n      for (let ans of current.answers[0].answer) {\n        if (question.language === current.language) {\n          if (ans.id === answer_id) {\n            res.push({\n              id: ans.id,\n              value: ans.value,\n              status: status,\n            });\n          } else {\n            res.push(ans);\n          }\n        } else {\n          res.push(ans);\n        }\n      }\n      updatedQuestion.push({\n        _id: current._id,\n        description: current.description,\n        language: current.language,\n        status: current.status,\n        title: current.title,\n        sub_question: current.sub_question,\n        answers: [\n          {\n            _id: current.answers[0]._id,\n            reference: current.answers[0].reference,\n            answer: res,\n          },\n        ],\n      });\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  editMatchingValue = (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let res: QuestionAnswerFormat[] = [];\n        for (\n          let answer = 0;\n          answer < current.answers[0].answer.length;\n          answer++\n        ) {\n          if (\n            current.answers[0].answer.find(\n              (itm) => itm.id === editedAnswerIndex\n            ) !== undefined\n          ) {\n            if (current.answers[0].answer[answer].id === editedAnswerIndex) {\n              res.push(editedAnswer);\n            } else {\n              res.push(current.answers[0].answer[answer]);\n            }\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: current.sub_question,\n          answers: [\n            {\n              _id: current.answers[0]._id,\n              reference: current.answers[0].reference,\n              answer: res,\n            },\n          ],\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerEmbedded = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    for (let current of this.state.question) {\n      if (question.language === current.language) {\n        let new_answers: QuestionAnswerInterface[] = [];\n        for (let test of question.answers) {\n          if (test.reference === reference_number) {\n            let updatedAnswer: QuestionAnswerFormat[] = [];\n            for (let sub of test.answer) {\n              let test_avail = editedAnswer.answer.find(\n                (itm) => itm.id === sub.id\n              );\n              if (test_avail !== undefined && editedAnswer._id === test._id) {\n                if (test_avail.status !== false) {\n                  updatedAnswer.push(test_avail);\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: test_avail.value,\n                    status: sub.status,\n                  });\n                }\n              } else {\n                if (\n                  editedAnswer.answer.find((itm) => itm.status === true) ===\n                  undefined\n                ) {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: sub.status,\n                  });\n                } else {\n                  updatedAnswer.push({\n                    id: sub.id,\n                    value: sub.value,\n                    status: false,\n                  });\n                }\n              }\n            }\n            if (editedAnswer._id !== test._id) {\n              updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n            }\n            new_answers.push({\n              _id: test._id,\n              reference: test.reference,\n              answer: updatedAnswer,\n            });\n          } else {\n            new_answers.push(test);\n          }\n        }\n        updatedQuestion.push({\n          _id: question._id,\n          description: question.description,\n          language: question.language,\n          status: question.status,\n          title: question.title,\n          sub_question: question.sub_question,\n          answers: new_answers,\n        });\n      } else {\n        updatedQuestion.push(current);\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  updateAnswerHybrid = (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => {\n    let updatedQuestion: QuestionItemInterface[] = [];\n    let subQuestionSelected: SubQuestionInterface | undefined =\n      question.sub_question.find((itm) => itm.reference === reference_number);\n    if (subQuestionSelected !== undefined) {\n      for (let current of this.state.question) {\n        if (question.language === current.language) {\n          let new_answers: QuestionAnswerInterface[] = [];\n          for (let test of question.answers) {\n            if (test.reference === reference_number) {\n              let updatedAnswer: QuestionAnswerFormat[] = [];\n              for (let sub of test.answer) {\n                let test_avail = editedAnswer.answer.find(\n                  (itm) => itm.id === sub.id\n                );\n                if (test_avail !== undefined && editedAnswer._id === test._id) {\n                  if (\n                    test_avail.status !== false ||\n                    subQuestionSelected.typeShort !==\n                      QuestionForHybrid.SingleMultiple\n                  ) {\n                    updatedAnswer.push(test_avail);\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: test_avail.value,\n                      status: sub.status,\n                    });\n                  }\n                } else {\n                  if (\n                    editedAnswer.answer.find((itm) => itm.status === true) ===\n                    undefined\n                  ) {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? true\n                          : sub.status,\n                    });\n                  } else {\n                    updatedAnswer.push({\n                      id: sub.id,\n                      value: sub.value,\n                      status:\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.SingleMultiple ||\n                        subQuestionSelected.typeShort ===\n                          QuestionForHybrid.TrueFalse\n                          ? false\n                          : sub.status,\n                    });\n                  }\n                }\n              }\n              if (editedAnswer._id !== test._id) {\n                updatedAnswer = [...updatedAnswer, ...editedAnswer.answer];\n              }\n              new_answers.push({\n                _id: test._id,\n                reference: test.reference,\n                answer: updatedAnswer,\n              });\n            } else {\n              new_answers.push(test);\n            }\n          }\n          updatedQuestion.push({\n            _id: question._id,\n            description: question.description,\n            language: question.language,\n            status: question.status,\n            title: question.title,\n            sub_question: question.sub_question,\n            answers: new_answers,\n          });\n        } else {\n          updatedQuestion.push(current);\n        }\n      }\n    }\n    this.setState({ question: updatedQuestion });\n  };\n\n  setAddChapter = (chapter_id: string) => {\n    if (this.state.chapters.find((itm) => itm === chapter_id) === undefined) {\n      this.setState({ chapters: [...this.state.chapters, chapter_id] });\n    } else {\n      this.setState({\n        chapters: this.state.chapters.filter((itm) => itm !== chapter_id),\n      });\n    }\n  };\n\n  submitEditedQuestion = async () => {\n    if (this.state.chapters.length === 0) {\n      return this.props.PushPopupAlert({\n        title: \"Error\",\n        description: \"Please choose question chapters!\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n    this.setState({ loading: true });\n    let addedQuestion = {\n      question_id: this.state.id,\n      course: this.state.course,\n      question: this.state.question,\n      type: this.state.type,\n      chapters: this.state.chapters,\n      customNumber: this.state.customNumber,\n      marks: this.state.marks,\n      answers: this.state.answers,\n      is_deleted: this.state.is_deleted,\n    };\n    await this.props.UpdateQuestion(\n      addedQuestion,\n      this.setLoading,\n      this.actionStatus\n    );\n    // Write twice to replace current state\n    this.props.addExamQuestion(addedQuestion);\n    this.props.addExamQuestion(addedQuestion);\n    this.props.unSelectQuestion();\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n  };\n\n  setSelectedCourse = (course: course | null) => {\n    if (course !== null) {\n      this.setState({ course: course.course_id });\n      this.setState({ showFilter: false });\n      this.setState({ chapters: [] });\n      this.setState({ showQuestionChapters: true });\n    }\n  };\n\n  setSelectedKey = (selectedKey: SelectedKeysEdit | null) => {\n    this.setState({\n      selectedKey: selectedKey,\n      showLanguages:\n        selectedKey === SelectedKeysEdit.QuestionAnswer ? false : true,\n    });\n  };\n\n  updateMarks = (marks: number) => {\n    if (marks) {\n      this.setState({ marks: marks });\n    }\n  };\n\n  setSelectedLang = (lang: LanguageInterface) => {\n    this.setState({ selectedLanguage: lang });\n  };\n\n  render() {\n    const questionLangs: QuestionLanguage[] = [];\n    this.props.selectedQuestion.question.map((testing) =>\n      questionLangs.push(testing.language)\n    );\n    return (\n      <Fragment>\n        {this.state.selectedKey !== SelectedKeysEdit.QuestionAnswer &&\n          this.state.showLanguages === true && (\n            <ChangeLanguage\n              setSelectedLanguage={this.setSelectedLang}\n              selectedLanguage={this.state.selectedLanguage}\n              languagesList={questionLangs}\n            />\n          )}\n        {this.state.loading === true ? (\n          <div className=\"bg-white rounded px-4 py-5 mt-4\">\n            <Loading type={LoadingType.white} />\n          </div>\n        ) : (\n          <div className=\"bg-gray-100 shadow-md pb-2 rounded animate__animated animate__fadeIn animate__fast mb-44\">\n            <div className=\"flex flex-col items-center justify-between\">\n              <div className=\"flex flex-row items-center justify-between relative bottom-0 bg-white border-t-4 border-blue-500 w-full py-2 px-2 shadow-md\">\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => this.props.unSelectQuestion()}\n                    className=\"btn cursor-pointer bg-blue-100 text-blue-600 hover:bg-blue-200 h-full flex flex-row gap-2 items-center\"\n                  >\n                    <BiArrowBack className=\"text-xl\" /> Back to list\n                  </div>\n                  <div className=\"text-xl font-extrabold text-gray-600\">\n                    Edit question\n                  </div>\n                  <div className=\"bg-yellow-100 text-yellow-800 rounded-lg px-3 py-1\">\n                    Language:{\" \"}\n                    <span className=\"underline font-extrabold\">\n                      {this.state.selectedLanguage.value}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {/* <div className=\"flex flex-row items-center justify-end\">\n                  {this.state.selectedKey === null && QuestionLanguages.map((item, i) => (\n                    <div onClick={() => this.setState({ selectedLanguage: item })} key={i + 1}\n                    className={`${this.state.selectedLanguage.key === item.key ? \"text-blue-600 bg-blue-50 rounded font-bold\" : \"text-gray-600\"} text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}>\n                      {item.value}\n                    </div>\n                  ))}\n                </div> */}\n                  {this.state.selectedKey === null && (\n                    <div\n                      onClick={() => this.submitEditedQuestion()}\n                      className=\"btn cursor-pointer bg-blue-600 text-white\"\n                    >\n                      Save changes\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <form onSubmit={this.submitEditedQuestion} className=\"px-2 py-2\">\n              <div className=\"flex flex-row items-center justify-between border mb-3 text-sm gap-1 bg-white px-4 py-3 rounded\">\n                <div className=\"flex flex-col text-base\">\n                  <label className=\"text-blue-600 font-bold\">\n                    Selected course\n                  </label>\n                  <span className=\"font-bold text-black flex flex-row items-center gap-2\">\n                    {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_code}{\" \"}\n                    - &nbsp;\n                    {this.props.course.courses !== null &&\n                      this.props.course.courses.find(\n                        (itm) => itm.course_id === this.state.course\n                      )?.course_name}\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center gap-2\">\n                  {this.state.chapters.length === 0 ? (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className={`bg-yellow-100 hover:bg-yellow-700 text-yellow-700 hover:text-white rounded px-3 py-2 cursor-pointer font-bold border border-yellow-600`}\n                    >\n                      Add chapters\n                    </div>\n                  ) : (\n                    <div\n                      onClick={() =>\n                        this.setState({ showQuestionChapters: true })\n                      }\n                      className=\"bg-blue-50 hover:bg-blue-200 text-blue-600 hover:text-blue-800 rounded px-3 py-2 cursor-pointer font-bold\"\n                    >\n                      Edit chapters ({this.state.chapters.length})\n                    </div>\n                  )}\n\n                  {/* <div\n                    onClick={() => this.setState({ showFilter: true })}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white px-4 py-3 rounded border gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question title\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey === SelectedKeysEdit.Title && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                    <label className=\"text-black flex flex-row gap-2 items-center text-base\">\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {this.QuestionLang(this.state.question).title}\n                    </label>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Title && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Title && (\n                  <div\n                    onClick={() => this.setSelectedKey(SelectedKeysEdit.Title)}\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n              <div className=\"flex flex-row items-center justify-between mb-3 text-sm bg-white border px-4 py-3 rounded gap-2\">\n                <div className=\"flex flex-col w-full\">\n                  <div className=\"text-blue-600 font-bold flex flex-row items-center justify-between\">\n                    Question details\n                    {this.state.selectedKey !== null &&\n                      this.state.selectedKey ===\n                        SelectedKeysEdit.Description && (\n                        <div\n                          onClick={() => this.setSelectedKey(null)}\n                          className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                        >\n                          <HiCheck className=\"text-3xl\" />\n                        </div>\n                      )}\n                  </div>\n                  {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: this.QuestionLang(this.state.question)\n                          .description,\n                      }}\n                      className=\"text-black flex flex-row gap-2 items-center text-base\"\n                    >\n                      {/* <BsFillCaretRightFill className=\"text-xl\" /> */}\n                      {/* {this.QuestionLang(this.state.question).description} */}\n                    </div>\n                  )}\n                  {this.state.selectedKey !== null &&\n                    this.state.selectedKey === SelectedKeysEdit.Description && (\n                      <HandleInputProps\n                        languages={this.filterLanguages()}\n                        questionItems={this.state.question}\n                        selectedKey={this.state.selectedKey}\n                        handleUpdateQuestionDetails={\n                          this.handleUpdateQuestionDetails\n                        }\n                      />\n                    )}\n                </div>\n                {this.state.selectedKey !== SelectedKeysEdit.Description && (\n                  <div\n                    onClick={() =>\n                      this.setSelectedKey(SelectedKeysEdit.Description)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                )}\n              </div>\n\n              <QuestionAnswer\n                selectedQuestionType={getQuestionType(\n                  this.props.questionTypes.questionTypes,\n                  this.state.type\n                )}\n                selectedQuestionItem={this.QuestionLang(this.state.question)}\n                wholeQuestion={this.state.question}\n                selectedLanguage={this.state.selectedLanguage}\n                updateAnswerSingleMultiple={this.updateAnswerSingleMultiple}\n                updateAnswerSimpleCalculate={this.updateAnswerSimpleCalculate}\n                updateAnswerNumerical={this.updateAnswerNumerical}\n                updateAnswerNumericalValue={this.updateAnswerNumericalValue}\n                updateShortAnswer={this.updateShortAnswer}\n                updateEssayAnswer={this.updateEssayAnswer}\n                addAnswerSingleMultiple={this.addAnswerSingleMultiple}\n                addAnswerMatchingQuestion={this.addAnswerMatchingQuestion}\n                removeAnswerSingleMultiple={this.removeAnswerSingleMultiple}\n                selectedKey={this.state.selectedKey}\n                setSelectedKey={this.setSelectedKey}\n                editSingleMultipleStatus={this.editSingleMultipleStatus}\n                editTrueFalseStatus={this.editTrueFalseStatus}\n                editMatchingValue={this.editMatchingValue}\n                editMatchingStatus={this.editMatchingStatus}\n                marks={this.state.marks}\n                updateMarks={this.updateMarks}\n                updateAnswerEmbedded={this.updateAnswerEmbedded}\n                updateAnswerHybrid={this.updateAnswerHybrid}\n                setShowLanguages={this.setShowLanguages}\n              />\n            </form>\n          </div>\n        )}\n        {this.state.showFilter === true && (\n          <Modal\n            title=\"Filter courses by school levels\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showFilter: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <Courses\n              setSelectedCourse={this.setSelectedCourse}\n              selected_course_id={this.state.course}\n            />\n          </Modal>\n        )}\n        {this.state.showQuestionChapters === true && (\n          <Modal\n            title=\"Question course chapters\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ showQuestionChapters: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.state.addNewChapter === false &&\n              this.props.course.selected_course !== null && (\n                <QuestionChapters\n                  selectedCourse={this.props.course.selected_course}\n                  addedChapters={this.state.chapters}\n                  setAddChapter={this.setAddChapter}\n                />\n              )}\n            {this.state.addNewChapter === false && (\n              <div className=\"flex flex-row items-center justify-between mt-3 px-2 py-2\">\n                <div className=\"\">\n                  <div\n                    className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 hover:text-yellow-900 cursor-pointer\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    Not listed? Add new\n                  </div>\n                </div>\n                <div\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  onClick={() => this.setState({ showQuestionChapters: false })}\n                >\n                  Done\n                </div>\n              </div>\n            )}\n            {this.state.addNewChapter === true &&\n              this.props.course.selected_course !== null && (\n                <div className=\"px-3 py-3 bg-white rounded m-3 shadow border border-blue-300\">\n                  <div\n                    className=\"btn bg-yellow-100 text-yellow-800 hover:bg-yellow-200 hover:text-yellow-900 cursor-pointer mb-5 flex flex-row items-center gap-3\"\n                    onClick={() =>\n                      this.setState({\n                        addNewChapter: !this.state.addNewChapter,\n                      })\n                    }\n                  >\n                    <BsArrowLeft className=\"text-3xl\" />\n                    <span>Back to select chapter</span>\n                  </div>\n                  <AddCourse\n                    chaptersOnly={true}\n                    closeModal={() => {}}\n                    courses={this.props.course}\n                    PushPopupAlert={this.props.PushPopupAlert}\n                    selectedCourse={{\n                      action: CoursesAction.Update,\n                      selectedCourse: this.props.course.selected_course,\n                    }}\n                    deleteSelected={(courseDetail: S_CourseDetails) => {\n                      console.log(courseDetail);\n                    }}\n                    schoolLevels={this.props.schoolLevels}\n                    setSelectedCourse={(\n                      courseDetail: S_CourseDetails | null\n                    ) => {\n                      if (courseDetail !== null) {\n                        this.setSelectedCourse(courseDetail.selectedCourse);\n                        this.props.setSelectedCourse(\n                          courseDetail.selectedCourse\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  system,\n  prepareExam,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  system: System;\n  prepareExam: PrepareExamsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    system: system,\n    prepareExam: prepareExam,\n  };\n};\n\nconst EditQuestion = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  PushPopupAlert,\n  UpdateQuestion,\n  addExamQuestion,\n  setSelectedCourse,\n})(_EditQuestion);\n\nexport default EditQuestion;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toMatching } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface MatchingProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  let MatchingAnswers: MatchingQuestionAnswerInterface[] = toMatching(\n    props.selectedQuestionItem.answers[0].answer\n  );\n  return (\n    <div>\n      {MatchingAnswers.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 p-3 rounded gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"border border-gray-300\"\n              : \"bg-gray-100\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center w-full\">\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXz\" + (i + 1)}\n                item={`${item.value}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingValue(check, item.id, {\n                    value: data,\n                    status: item.status,\n                    id: item.id,\n                  });\n                }}\n              />\n            ) : (\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className=\"w-full gap-3 py-2\"\n              ></div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <EditorComponent\n                id={\"editmACHXrr\" + (i + 1)}\n                item={`${item.status}`}\n                handleItem={(data: string) => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editMatchingStatus(\n                    props.selectedQuestionItem,\n                    item.id,\n                    data\n                  );\n                }}\n              />\n            ) : (\n              <div className=\"w-full\">\n                <div\n                  dangerouslySetInnerHTML={{ __html: item.status }}\n                  className={`font-bold rounded w-full text-blue-600`}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            onClick={() => {\n              props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n            }}\n            className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 border border-white cursor-pointer\"\n          >\n            Remove\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Matching from \"../AnswersQuestionTypes/Matching\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditMatching = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        // console.log(\"Added ans: \", addedAnswer);\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerMatchingQuestion(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div\n                key={i + 1}\n                className=\"flex flex-col gap-2 bg-gray-100 px-2 py-2 rounded\"\n              >\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n\n                <EditorComponent\n                  id={\"editMMatchE\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value: data,\n                      status:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.status\n                          : \"\",\n                    });\n                  }}\n                />\n\n                <EditorComponent\n                  id={\"editmACHX\" + (i + 1)}\n                  item={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.status\n                      : \"\"\n                  }\n                  handleItem={(data: string) => {\n                    let checkAns = addedAnswer.find(\n                      (itm) => itm.lang.key === item.key\n                    );\n                    handleStatus(item, {\n                      id:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.id\n                          : uuidv4(),\n                      value:\n                        addedAnswer.length > 0 && checkAns !== undefined\n                          ? checkAns.answer.value\n                          : \"\",\n                      status: data,\n                    });\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType === questionTypeElementsType.Matching && (\n            <Matching\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              editMatchingValue={props.editMatchingValue}\n              editMatchingStatus={props.editMatchingStatus}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMatching;\n","import React from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport { FaCheckCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  return (\n    <div>\n      {props.selectedQuestionItem.answers[0].answer.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-start justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"border-b border-gray-300\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"w-full\">\n                {checkCalculateType === false ? (\n                  <EditorComponent\n                    id={\"editMultipleOn\" + (i + 1)}\n                    item={`${item.value}`}\n                    handleItem={(data: string) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: data,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                  />\n                ) : (\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      props.updateAnswerSingleMultiple(check, item.id, {\n                        value: e.target.value,\n                        status: item.status,\n                        id: item.id,\n                      });\n                    }}\n                    value={`${item.value}`}\n                    type=\"text\"\n                    className={`${\n                      checkCalculateType === true\n                        ? validateCalculatedFormula(item.value).status === true\n                          ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                          : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                        : \"input-gray-lg\"\n                    } w-full border-2 border-gray-500`}\n                  />\n                )}\n                {checkCalculateType === true && (\n                  <span\n                    className={`${\n                      validateCalculatedFormula(item.value).status === true\n                        ? \"text-green-600\"\n                        : \"text-yellow-700\"\n                    } text-xs font-bold`}\n                  >\n                    {validateCalculatedFormula(item.value).msg}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <BsCheckCircle className=\"text-4xl text-blue-600\" />\n                ) : (\n                  <BsCircle className=\"text-4xl text-gray-500\" />\n                )}\n                <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                onClick={() => {\n                  let check = props.wholeQuestion.find(\n                    (itm) => itm.language === props.selectedLanguage.key\n                  );\n                  if (check === undefined) {\n                    check = props.wholeQuestion[0];\n                  }\n                  props.editSingleMultipleStatus(item.id, !item.status);\n                }}\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n                } hover:text-blue-600 w-40 mt-2`}\n              >\n                {item.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold \">\n                  {item.status === true ? \"Correct\" : \"Incorrect\"}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-28 flex justify-end text-center\">\n                <div\n                  className={`font-bold px-3 py-2 rounded-full w-28 ${\n                    item.status === true\n                      ? \"text-green-600 bg-white\"\n                      : \"text-gray-600 bg-white\"\n                  }`}\n                >\n                  {item.status === true ? (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaCheckCircle className=\"text-xl\" /> <span>Correct</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row gap-2 items-center\">\n                      <FaTimesCircle className=\"text-xl\" />{\" \"}\n                      <span>Incorrect</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div\n              onClick={() => {\n                props.removeAnswerSingleMultiple(props.wholeQuestion, item);\n              }}\n              className=\"btn bg-red-50 text-red-600 hover:bg-red-200 hover:text-red-800 cursor-pointer\"\n            >\n              Remove\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport MultipleChoice from \"../AnswersQuestionTypes/MultipleChoice\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditMultipleChoice = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div\n            onClick={() => setShowAddAnswer(true)}\n            className=\"btn bg-blue-50 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-800 border border-blue-300 w-32\"\n          >\n            Add answer\n          </div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answers\"\n                : \"Question answers\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {(props.selectedQuestionType ===\n            questionTypeElementsType.SingleMultiple ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.MultipleChoice ||\n            props.selectedQuestionType ===\n              questionTypeElementsType.CalculatedMultipleChoice) && (\n            <MultipleChoice\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editSingleMultipleStatus={props.editSingleMultipleStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditMultipleChoice;\n","import React, { Component } from \"react\";\nimport { IoShieldCheckmarkSharp } from \"react-icons/io5\";\n\ninterface RunTestProps {}\ninterface RunTestState {\n  numberOfTests: number;\n}\n\nclass RunTest extends Component<RunTestProps, RunTestState> {\n  constructor(props: RunTestProps) {\n    super(props);\n\n    this.state = {\n      numberOfTests: 2,\n    };\n  }\n\n  render() {\n    let wildCards = [\n      {\n        id: 1,\n        value: \"firstnumber\",\n      },\n      {\n        id: 2,\n        value: \"secondnumber\",\n      },\n    ];\n    let defaultNumberOfTests = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    ];\n    return (\n      <div className=\"mt-2\">\n        {/* <div className=\"border border-gray-300 rounded px-3 py-2\">\n          <div className=\"flex flex-row items-center justify-between\">\n            <div className=\"text-gray-700 font-bold text-xl flex flex-row items-center gap-2\">\n              <IoShieldCheckmarkSharp className=\"text-3xl\" />\n              Running question answer test\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <select onChange={(e: React.ChangeEvent<HTMLSelectElement>) => this.setState({ numberOfTests: parseInt(e.target.value) })} value={this.state.numberOfTests} className=\"input\">\n                {defaultNumberOfTests.map((item, i) => (\n                  <option key={i + 1} value={item}>{item}</option>\n                ))}\n              </select>\n              <div className=\"btn cursor-pointer bg-yellow-100 border-2 border-white hover:border-yellow-600 text-yellow-700 text-md w-64 text-center\">Generate test</div>\n            </div>\n          </div>\n\n          <div className=\"rounded bg-gray-100 px-3 py-2 my-2\">\n            <table className=\"w-full\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {wildCards.map((item, i) => (\n                    <th key={i + 1}>{item.value}</th>\n                  ))}\n                  <th>Formula</th>\n                  <th>Answer</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default RunTest;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport RunTest from \"../RunTest/RunTest\";\n\ninterface SimpleCalculateProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst SimpleCalculate = (props: SimpleCalculateProps) => {\n  return (\n    <div className=\"\">\n      <div\n        className={`${\n          props.selectedKey === SelectedKeysEdit.QuestionAnswer\n            ? \"\"\n            : \"bg-blue-50\"\n        } -mt-3 px-2 pt-2 pb-1 rounded`}\n      >\n        {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div className=\"flex flex-col w-full\">\n                <input\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    let check = props.wholeQuestion.find(\n                      (itm) => itm.language === props.selectedLanguage.key\n                    );\n                    if (check === undefined) {\n                      check = props.wholeQuestion[0];\n                    }\n                    props.updateAnswerSimpleCalculate(check, item.value, {\n                      value: e.target.value,\n                      status: item.status,\n                      id: item.id,\n                    });\n                  }}\n                  value={`${item.value}`}\n                  type=\"text\"\n                  className={`w-full border-2 ${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                      : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                  }`}\n                />\n                <span\n                  className={`${\n                    validateCalculatedFormula(item.value).status === true\n                      ? \"text-green-600\"\n                      : \"text-yellow-700\"\n                  } text-xs font-bold`}\n                >\n                  {validateCalculatedFormula(item.value).msg}\n                </span>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n                {item.status === true ? (\n                  <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                ) : (\n                  <MdBookmark className=\"text-2xl text-gray-500\" />\n                )}\n                {item.value}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <RunTest />\n    </div>\n  );\n};\n\nexport default SimpleCalculate;\n","import React, { useState } from \"react\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { toNumerical } from \"../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdError } from \"react-icons/md\";\n\ninterface NumericalProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const [editQuestionAnswer, setEditQuestionAnswer] = useState<string>(\n    props.selectedQuestionItem.answers[0].answer[0].value[0] === null\n      ? \"\"\n      : props.selectedQuestionItem.answers[0].answer[0].value[0].toString()\n  );\n  const [editQuestionAnswerStatus, setEditQuestionAnswerStatus] =\n    useState<string>(\n      props.selectedQuestionItem.answers[0].answer[0].value[1] === null\n        ? \"\"\n        : props.selectedQuestionItem.answers[0].answer[0].value[1].toString()\n    );\n  // const updateQuestionAnswer = (value: string, id: string, status: number[], ) => {\n  //   let check = props.wholeQuestion.find(itm => itm.language === props.selectedLanguage.key);\n  //   if (check === undefined) {\n  //     check = props.wholeQuestion[0];\n  //   }\n  //   props.updateAnswerNumericalValue(\n  //     check, id, {\n  //       value: [parseInt(value)],\n  //       status: status,\n  //       id: id,\n  //     }\n  //   )\n  // }\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50\"\n      } -mt-3 px-2 pt-2 pb-1 rounded`}\n    >\n      {toNumerical(props.selectedQuestionItem.answers[0].answer).map(\n        (item, i) => (\n          <div\n            key={i + 1}\n            className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n              props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n                ? \"text-blue-600 font-bold\"\n                : \"\"\n            }`}\n          >\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <div>Correct answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswer(e.target.value);\n                      if (\n                        editQuestionAnswer !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswer))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: [parseFloat(e.target.value)],\n                          status: item.status,\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswer}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 border border-blue-300 bg-white rounded\">\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n                <span>Answer: </span>\n                <span>{item.value[0]}</span>\n              </div>\n            )}\n            {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n              <div\n                className={`flex flex-row items-center gap-2 cursor-pointer  w-full`}\n              >\n                <div className=\"flex flex-col w-full\">\n                  <div>Error on the answer</div>\n                  <input\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      let check = props.wholeQuestion.find(\n                        (itm) => itm.language === props.selectedLanguage.key\n                      );\n                      if (check === undefined) {\n                        check = props.wholeQuestion[0];\n                      }\n                      setEditQuestionAnswerStatus(e.target.value);\n                      if (\n                        editQuestionAnswerStatus !== \"\" &&\n                        !isNaN(parseFloat(editQuestionAnswerStatus))\n                      ) {\n                        props.updateAnswerNumericalValue(check, item.id, {\n                          value: item.value,\n                          status: [parseFloat(e.target.value)],\n                          id: item.id,\n                        });\n                      }\n                    }}\n                    value={`${editQuestionAnswerStatus}`}\n                    type=\"text\"\n                    className=\"input-gray-lg w-full border-2 border-gray-500\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"w-full flex flex-row items-center justify-center gap-3 py-2 bg-white rounded\">\n                <MdError className=\"text-2xl text-gray-500\" />\n                <span className=\"text-gray-500\">Error: </span>\n                <span className=\"text-gray-500\">{item.value[1]}</span>\n              </div>\n            )}\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface ShortAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateShortAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-blue-50 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React from \"react\";\nimport { MdBookmark } from \"react-icons/md\";\nimport { RiShieldCheckFill } from \"react-icons/ri\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\n\ninterface EssayAnswerProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n}\n\nconst Essay = (props: EssayAnswerProps) => {\n  const handleTextChange = (value: string, item: any) => {\n    let check = props.wholeQuestion.find(\n      (itm) => itm.language === props.selectedLanguage.key\n    );\n    if (check === undefined) {\n      check = props.wholeQuestion[0];\n    }\n    props.updateEssayAnswer(check, item.value, {\n      value: value,\n      status: item.status,\n      id: item.id,\n    });\n  };\n  return (\n    <div\n      className={`${\n        props.selectedKey === SelectedKeysEdit.QuestionAnswer\n          ? \"\"\n          : \"bg-gray-100 px-2\"\n      } -mt-3 pt-2 pb-1 rounded`}\n    >\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer\n              ? \"text-blue-600 font-bold\"\n              : \"\"\n          }`}\n        >\n          {props.selectedKey === SelectedKeysEdit.QuestionAnswer ? (\n            <div className=\"flex flex-col w-full\">\n              {/* <EditorToolbar id={\"reac\"} />\n              <ReactQuill\n                theme=\"snow\"\n                value={`${item.value}`}\n                className=\"rounded mb-10 w-full\"\n                placeholder={\"Write something awesome...\"}\n                modules={modules}\n                formats={formats}\n                onChange={(e) => handleTextChange(e, item)}\n              /> */}\n              <textarea\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                  handleTextChange(e.target.value, item)\n                }\n                rows={6}\n                value={`${item.value}`}\n                placeholder=\"Enter text...\"\n                className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 w-full`}\n              ></textarea>\n            </div>\n          ) : item.value.length === 0 ? (\n            <div className=\"text-xl text-yellow-800\">No answer available</div>\n          ) : (\n            <div className=\"w-full flex flex-row items-center gap-3 py-2\">\n              {item.status === true ? (\n                <RiShieldCheckFill className=\"text-2xl text-blue-600\" />\n              ) : (\n                <MdBookmark className=\"text-2xl text-gray-500\" />\n              )}\n              <div dangerouslySetInnerHTML={{ __html: item.value }}></div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport SimpleCalculate from \"../AnswersQuestionTypes/SimpleCalculate\";\nimport Numerical from \"../AnswersQuestionTypes/Numerical\";\nimport ShortAnswer from \"../AnswersQuestionTypes/ShortAnswer\";\nimport Essay from \"../AnswersQuestionTypes/Essay\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditSimpleCalculateProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n}\n\nconst EditSimpleCalculate = (props: EditSimpleCalculateProps) => {\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n        <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n          <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2 -mt-2\">\n            {props.selectedKey !== null &&\n            props.selectedKey === SelectedKeysEdit.QuestionAnswer\n              ? \"Edit Question answer\"\n              : \"Question answer\"}\n          </div>\n          <div className=\"flex flex-row gap-2 items-center\">\n            {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"flex flex-row items-center justify-end gap-2\">\n                    <span className=\"font-bold text-gray-600\">Marks</span>\n                    <input\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        props.updateMarks(parseInt(e.target.value))\n                      }\n                      type=\"number\"\n                      placeholder=\"Marks\"\n                      value={props.marks}\n                      className=\"input-gray-lg h-10\"\n                    />\n                  </div>\n                  <div\n                    onClick={() => props.setSelectedKey(null)}\n                    className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                  >\n                    <HiCheck className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n              <>\n                <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                  Marks: {props.marks}\n                </div>\n                <div\n                  onClick={() =>\n                    props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                  }\n                  className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                >\n                  <MdModeEdit className=\"text-3xl\" />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"rounded bg-white px-2 py-2\">\n        {console.log(props.selectedQuestionType)}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.SimpleCalculate && (\n          <SimpleCalculate\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Numeric && (\n          <Numerical\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerNumerical={props.updateAnswerNumerical}\n            updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          />\n        )}\n        {props.selectedQuestionType ===\n          questionTypeElementsType.ShortAnswer && (\n          <ShortAnswer\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n            editSingleMultipleStatus={props.editSingleMultipleStatus}\n            removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n            updateShortAnswer={props.updateShortAnswer}\n          />\n        )}\n        {props.selectedQuestionType === questionTypeElementsType.Essay && (\n          <Essay\n            selectedKey={props.selectedKey}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateEssayAnswer={props.updateEssayAnswer}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditSimpleCalculate;\n","import React from \"react\";\nimport { RiCheckboxBlankCircleLine } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { MdRadioButtonChecked } from \"react-icons/md\";\n\ninterface TrueFalseProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      {props.selectedQuestionItem.answers[0].answer.map((item, i) => (\n        <div\n          key={i + 1}\n          className={`flex flex-row items-center justify-between mb-2 gap-3 ${\n            props.selectedKey !== SelectedKeysEdit.QuestionAnswer ? \"\" : \"\"\n          }`}\n        >\n          <div\n            onClick={() => {\n              let check = props.wholeQuestion.find(\n                (itm) => itm.language === props.selectedLanguage.key\n              );\n              if (check === undefined) {\n                check = props.wholeQuestion[0];\n              }\n              props.editTrueFalseStatus(item.id, !item.status);\n            }}\n            className={`flex flex-row items-center gap-2 cursor-pointer ${\n              item.status === true ? \"text-blue-600\" : \"text-gray-600\"\n            } hover:text-blue-600 w-40`}\n          >\n            {item.status === false ? (\n              <RiCheckboxBlankCircleLine className=\"text-3xl cursor-pointer\" />\n            ) : (\n              <MdRadioButtonChecked className=\"text-3xl cursor-pointer\" />\n            )}\n            <span className=\"font-bold \">{item.value}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionItemInterface,\n  QuestionLanguages,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TrueFalse from \"../AnswersQuestionTypes/TrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EditTrueFalseProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n}\n\nconst EditTrueFalse = (props: EditTrueFalseProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center ml-2\">\n              {props.selectedKey !== null &&\n              props.selectedKey === SelectedKeysEdit.QuestionAnswer\n                ? \"Edit Question answer\"\n                : \"Question answer\"}\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                    Marks: {props.marks}\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                <input\n                  value={\n                    addedAnswer.length > 0\n                      ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                          ?.answer.value\n                      : \"\"\n                  }\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    handleAnswer(item, {\n                      id:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.id\n                          : uuidv4(),\n                      value: e.target.value,\n                      status:\n                        addedAnswer.length > 0\n                          ? addedAnswer[0].answer.status\n                          : false,\n                    })\n                  }\n                  type=\"text\"\n                  className=\"input-gray-lg\"\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 pb-2\">\n          {console.log(props.selectedQuestionType)}\n          {props.selectedQuestionType ===\n            questionTypeElementsType.TrueFalse && (\n            <TrueFalse\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n              editTrueFalseStatus={props.editTrueFalseStatus}\n              removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n              selectedQuestionItem={props.selectedQuestionItem}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditTrueFalse;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport {\n  QuestionForEmbedded,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd, MdModeEdit } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface EmbeddedProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Embedded = (props: EmbeddedProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    marks: string;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerEmbedded(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (answer.status === true) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerEmbedded(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers.map((itms, i) => (\n          <div\n            key={i + 1}\n            className={`bg-white ${\n              props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n            } px-3 py-2 mb-2`}\n          >\n            <div className=\"flex flex-row justify-between items-center gap-2 border-b border-blue-300\">\n              <div\n                title=\"Number of answer in question description\"\n                className=\"text-lg font-bold\"\n              >\n                Reference {itms.reference}\n              </div>\n              {editedMarksData === null ||\n              editedMarksData.reference !== itms.reference ? (\n                <div\n                  onClick={() => {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === itms.reference\n                    ) &&\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: props.selectedQuestionItem.sub_question\n                          .find((itm) => itm.reference === itms.reference)!\n                          .marks.toString(),\n                      });\n                    props.setShowLanguages(false);\n                  }}\n                  className={`flex rounded-t-xl flex-row bg-gray-100 hover:bg-blue-100 hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n                >\n                  <div className=\"py-0 text-base font-semibold flex items-center justify-center w-max h-max\">\n                    {\n                      props.selectedQuestionItem.sub_question.find(\n                        (itm) => itm.reference === itms.reference\n                      )?.marks\n                    }{\" \"}\n                    marks\n                  </div>\n                  <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer hover:bg-blue-100 hover:text-blue-600\">\n                    <MdModeEdit className=\"text-2xl\" />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"group flex flex-row items-center gap-2 my-1\">\n                  <input\n                    className=\"input-white w-full border border-gray-600\"\n                    type=\"text\"\n                    placeholder=\"Reference marks\"\n                    value={editedMarksData.marks}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setEditedMarksData({\n                        reference: itms.reference,\n                        marks: e.target.value,\n                      });\n                    }}\n                  />\n                  <div\n                    onClick={() => {\n                      if (editedMarksData !== undefined) {\n                        let newSubQuestion =\n                          props.selectedQuestionItem.sub_question.find(\n                            (itm) => itm.reference === editedMarksData.reference\n                          );\n                        if (newSubQuestion !== undefined) {\n                          let newSubQuestions =\n                            props.selectedQuestionItem.sub_question.filter(\n                              (itm) =>\n                                itm.reference !== editedMarksData.reference\n                            );\n                          newSubQuestions.push({\n                            _id: newSubQuestion._id,\n                            description: newSubQuestion.description,\n                            typeShort: newSubQuestion.typeShort,\n                            type: newSubQuestion.type,\n                            marks: parseFloat(editedMarksData.marks),\n                            reference: newSubQuestion.reference,\n                          });\n                          props.updateAnswerEmbedded(\n                            {\n                              description:\n                                props.selectedQuestionItem.description,\n                              language: props.selectedQuestionItem.language,\n                              status: props.selectedQuestionItem.status,\n                              title: props.selectedQuestionItem.title,\n                              answers: props.selectedQuestionItem.answers,\n                              _id: props.selectedQuestionItem._id,\n                              sub_question:\n                                newSubQuestions.length ===\n                                props.selectedQuestionItem.sub_question.length\n                                  ? newSubQuestions\n                                  : props.selectedQuestionItem.sub_question,\n                            },\n                            itms.reference,\n                            itms\n                          );\n                          setEditedMarksData(null);\n                        }\n                      }\n                      props.setShowLanguages(true);\n                    }}\n                    className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                  >\n                    Save\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"flex flex-row items-center justify-between gap-2\">\n              <div className=\"flex flex-row items-center gap-3 w-full\">\n                <div className=\"w-full flex flex-col\">\n                  {itms.answer.map((item, t) => (\n                    <div\n                      key={t + 1}\n                      className=\"group w-full flex flex-row items-center justify-between\"\n                    >\n                      <div\n                        onClick={() =>\n                          (editedChoiceData === null ||\n                            editedChoiceData.reference !== itms.reference ||\n                            editedChoiceData.answer.id !== item.id) &&\n                          updateElementStatus(itms, item)\n                        }\n                        className={`flex flex-row items-center gap-2 w-full\n                        ${\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) !== null &&\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort === QuestionForEmbedded.SingleMultiple\n                            ? \"border-b hover:bg-blue-50 cursor-pointer hover:border-blue-300\"\n                            : \"\"\n                        }  px-2`}\n                      >\n                        <div className=\"text-3xl\">\n                          {FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          ) === null ? (\n                            <div className=\"text-yellow-800 text-xl\">\n                              Invalid Answer type\n                            </div>\n                          ) : FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple ? (\n                            <div>\n                              {item.status === true ? (\n                                <BsCheckCircle className=\"text-blue-600\" />\n                              ) : (\n                                <BsCircle className=\"text-gray-400\" />\n                              )}\n                            </div>\n                          ) : (\n                            <div>\n                              <BsCheckCircle className=\"text-blue-600\" />\n                            </div>\n                          )}\n                        </div>\n                        {editedChoiceData !== null &&\n                        editedChoiceData.reference === itms.reference &&\n                        editedChoiceData.answer.id === item.id ? (\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: {\n                                  id: item.id,\n                                  value:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value),\n                                          parseFloat(item.value[1]),\n                                        ]\n                                      : e.target.value,\n                                  status:\n                                    FindSubQuestionData(\n                                      props.selectedQuestionItem.sub_question,\n                                      itms.reference\n                                    ) === null\n                                      ? \"\"\n                                      : FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForEmbedded.Numeric\n                                      ? [\n                                          parseFloat(e.target.value) -\n                                            parseFloat(item.value[1]),\n                                          parseFloat(e.target.value) +\n                                            parseFloat(item.value[1]),\n                                        ]\n                                      : item.status,\n                                },\n                              });\n                            }}\n                            placeholder=\"Type answer here\"\n                            className=\"input-gray-lg w-full mr-2 my-1\"\n                            value={\n                              FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              ) === null\n                                ? \"\"\n                                : FindSubQuestionData(\n                                    props.selectedQuestionItem.sub_question,\n                                    itms.reference\n                                  )!.typeShort === QuestionForEmbedded.Numeric\n                                ? editedChoiceData.answer.value[0]\n                                : editedChoiceData.answer.value\n                            }\n                          ></textarea>\n                        ) : (\n                          <div\n                            className={`${\n                              item.status === true\n                                ? \"text-blue-800 font-bold\"\n                                : \"text-gray-800\"\n                            } px-3 py-2 text-base`}\n                          >\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            ) === null\n                              ? \"\"\n                              : FindSubQuestionData(\n                                  props.selectedQuestionItem.sub_question,\n                                  itms.reference\n                                )!.typeShort === QuestionForEmbedded.Numeric\n                              ? item.value[0]\n                              : item.value}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        <div\n                          onClick={() => {\n                            if (editedChoiceData === null) {\n                              setEditedChoiceData({\n                                reference: itms.reference,\n                                answer: item,\n                              });\n                              props.setShowLanguages(false);\n                            } else {\n                              props.updateAnswerEmbedded(\n                                props.selectedQuestionItem,\n                                itms.reference,\n                                {\n                                  _id: itms._id,\n                                  reference: itms.reference,\n                                  answer: [editedChoiceData.answer],\n                                }\n                              );\n                              setEditedChoiceData(null);\n                              props.setShowLanguages(true);\n                            }\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer\"\n                        >\n                          Update\n                        </div>\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        ) === null ? (\n                          <div className=\"text-yellow-800 text-xl\">\n                            Invalid Answer type\n                          </div>\n                        ) : (\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )!.typeShort ===\n                            QuestionForEmbedded.SingleMultiple && (\n                            <div\n                              onClick={() => {\n                                removeElement(itms, item);\n                              }}\n                              className=\"btn bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer\"\n                            >\n                              Remove\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    itms.reference\n                  ) === null ? (\n                    <div className=\"text-yellow-800 text-xl\">\n                      Invalid Answer type\n                    </div>\n                  ) : (\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    )!.typeShort === QuestionForEmbedded.SingleMultiple &&\n                    (addNewChoiceData === false ? (\n                      <div\n                        onClick={() => {\n                          setNewChoiceData(null);\n                          setAddNewChoiceData(true);\n                        }}\n                        className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                      >\n                        <div>\n                          <MdAdd className=\"text-3xl\" />\n                        </div>\n                        <span className=\"text-base\">Add new answer</span>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                        <div className=\"text-lg\">Add new answer</div>\n                        <div className=\"flex flex-row items-center mt-2\">\n                          <textarea\n                            onChange={(\n                              e: React.ChangeEvent<HTMLTextAreaElement>\n                            ) => {\n                              setNewChoiceData({\n                                id:\n                                  newChoiceData === null\n                                    ? uuidv4()\n                                    : newChoiceData.id,\n                                value: e.target.value,\n                                status:\n                                  newChoiceData === null\n                                    ? false\n                                    : newChoiceData.status,\n                              });\n                              setError(\"\");\n                            }}\n                            className=\"input-gray-lg w-full\"\n                            placeholder=\"Type new answer\"\n                            value={\n                              newChoiceData !== null ? newChoiceData.value : \"\"\n                            }\n                          ></textarea>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-between\">\n                          <div\n                            onClick={() => {\n                              setNewChoiceData(null);\n                              setAddNewChoiceData(false);\n                            }}\n                            className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                          >\n                            Cancel\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value:\n                                    newChoiceData === null\n                                      ? \"\"\n                                      : newChoiceData.value,\n                                  status:\n                                    newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? false\n                                      : true,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                            >\n                              <div>\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true ? (\n                                  <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                ) : (\n                                  <BsCircle className=\"text-gray-700 text-3xl\" />\n                                )}\n                              </div>\n                              <div\n                                className={`text-base font-bold w-20 ${\n                                  newChoiceData !== null &&\n                                  newChoiceData.status === true\n                                    ? \"text-blue-600\"\n                                    : \"text-gray-900\"\n                                }`}\n                              >\n                                {newChoiceData !== null &&\n                                newChoiceData.status === true\n                                  ? \"Correct\"\n                                  : \"Incorrect\"}\n                              </div>\n                            </div>\n                            <div\n                              onClick={() => {\n                                if (newChoiceData === null) {\n                                  setError(\"Please fill answer\");\n                                } else {\n                                  if (newChoiceData.value === \"\") {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    props.updateAnswerEmbedded(\n                                      props.selectedQuestionItem,\n                                      itms.reference,\n                                      {\n                                        _id: uuidv4(),\n                                        reference: itms.reference,\n                                        answer: [newChoiceData],\n                                      }\n                                    );\n                                    setNewChoiceData(null);\n                                    setAddNewChoiceData(false);\n                                    setError(\"\");\n                                  }\n                                }\n                              }}\n                              className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                            >\n                              Add new\n                            </div>\n                          </div>\n                        </div>\n                        {error !== \"\" && (\n                          <div\n                            onClick={() => setError(\"\")}\n                            className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                          >\n                            {error}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n              {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Embedded;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditEmbedded = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n  let totalMarks = 0;\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n  return (\n    <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n      {showAddAnswerStatus === true && (\n        <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n      )}\n\n      {showAddAnswerStatus === false ? (\n        <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n          <div></div>\n          <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n            <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n              Question answers\n            </div>\n            <div className=\"flex flex-row gap-2 items-center\">\n              {props.selectedKey !== null &&\n                props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"flex flex-row items-center justify-end gap-2\">\n                      <span className=\"font-bold text-gray-600\">Marks</span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          props.updateMarks(parseInt(e.target.value))\n                        }\n                        type=\"number\"\n                        placeholder=\"Marks\"\n                        value={props.marks}\n                        className=\"input-gray-lg h-10\"\n                      />\n                    </div>\n                    <div\n                      onClick={() => props.setSelectedKey(null)}\n                      className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                    >\n                      <HiCheck className=\"text-3xl\" />\n                    </div>\n                  </>\n                )}\n              {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                <>\n                  <div className=\"px-4 py-2 rounded-full bg-blue-50 text-blue-700 font-bold\">\n                    Total Marks: {totalMarks}\n                  </div>\n                  {/* <div\n                    onClick={() =>\n                      props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                    }\n                    className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                  >\n                    <MdModeEdit className=\"text-3xl\" />\n                  </div> */}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n          <div className=\"flex flex-col gap-2\">\n            {QuestionLanguages.map((item, i) => (\n              <div key={i + 1} className=\"flex flex-col gap-2\">\n                <span className=\"font-bold text-blue-600\">{item.value}</span>\n                {checkCalculateType === false ? (\n                  <div>\n                    <EditorComponent\n                      key={i + 1}\n                      id={\"createMultiple\" + (i + 1)}\n                      item={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      handleItem={(data: string) => {\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: data,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        });\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col w-full\">\n                    <textarea\n                      value={\n                        addedAnswer.length > 0\n                          ? addedAnswer.find((itm) => itm.lang.key === item.key)\n                              ?.answer.value\n                          : \"\"\n                      }\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                        handleAnswer(item, {\n                          id:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.id\n                              : uuidv4(),\n                          value: e.target.value,\n                          status:\n                            addedAnswer.length > 0\n                              ? addedAnswer[0].answer.status\n                              : false,\n                        })\n                      }\n                      placeholder=\"Formula\"\n                      className={`${\n                        checkCalculateType === true\n                          ? validateCalculatedFormula(\n                              addedAnswer.length > 0\n                                ? addedAnswer.find(\n                                    (itm) => itm.lang.key === item.key\n                                  )?.answer.value\n                                : \"\"\n                            ).status === true\n                            ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                            : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                          : \"input-gray-lg\"\n                      }`}\n                    ></textarea>\n                    <span\n                      className={`${\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).status === true\n                          ? \"text-green-600\"\n                          : \"text-yellow-700\"\n                      } text-xs font-bold`}\n                    >\n                      {\n                        validateCalculatedFormula(\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        ).msg\n                      }\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n            <div\n              onClick={() =>\n                handleStatus(\n                  addedAnswer.length > 0 ? !addedAnswer[0].answer.status : false\n                )\n              }\n              className={`flex flex-row items-center gap-2 cursor-pointer ${\n                addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"text-blue-600\"\n                  : \"text-gray-600\"\n              } hover:text-blue-600`}\n            >\n              {addedAnswer.length > 0 &&\n              addedAnswer[0].answer.status === false ? (\n                <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n              ) : (\n                <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n              )}\n              <span className=\"font-bold text-xl\">\n                {addedAnswer.length > 0 && addedAnswer[0].answer.status === true\n                  ? \"True\"\n                  : \"False\"}\n              </span>\n            </div>\n            <div\n              onClick={() => AddAnswer()}\n              className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n            >\n              Add\n            </div>\n            <div\n              onClick={() => setShowAddAnswer(false)}\n              className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n            >\n              Cancel\n            </div>\n          </div>\n        </div>\n      )}\n      {showAddAnswerStatus === false && (\n        <div className=\"rounded bg-white px-2 py-2\">\n          {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n            <Embedded\n              selectedKey={props.selectedKey}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerEmbedded={props.updateAnswerEmbedded}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={props.selectedQuestionType}\n              setShowLanguages={props.setShowLanguages}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditEmbedded;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div\n      className={`group w-full flex flex-row items-center justify-between hover:bg-blue-50 ${\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        )!.typeShort === QuestionForHybrid.TrueFalse\n          ? \"\"\n          : \"border-b\"\n      } `}\n    >\n      <div\n        onClick={() =>\n          (props.editedChoiceData === null ||\n            props.editedChoiceData.reference !== props.itms.reference ||\n            props.editedChoiceData.answer.id !== props.selectedAnswer.id) &&\n          props.updateElementStatus(props.itms, props.selectedAnswer)\n        }\n        className=\"flex flex-row items-center gap-2 w-full cursor-pointer hover:text-blue-600\"\n      >\n        <div className=\"text-3xl\">\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.SingleMultiple ||\n            FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            )!.typeShort === QuestionForHybrid.TrueFalse ? (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <BsCheckCircle className=\"text-blue-600\" />\n              ) : (\n                <BsCircle className=\"text-gray-400\" />\n              )}\n            </div>\n          ) : (\n            <div>\n              {props.selectedAnswer.status === true ? (\n                <IoCheckboxOutline className=\"text-blue-700\" />\n              ) : (\n                <BsSquare className=\"text-gray-500 ml-1 text-2xl\" />\n              )}\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          )!.typeShort !== QuestionForHybrid.TrueFalse && (\n            <div\n              onClick={() => {\n                props.removeElement(props.itms, props.selectedAnswer);\n              }}\n              className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n            >\n              Remove\n            </div>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React from \"react\";\nimport { BsCheckCircle, BsCheckSquareFill, BsCircle } from \"react-icons/bs\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport {\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MultipleChoiceSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MultipleChoiceSubQuestions = (props: MultipleChoiceSubQuestionsProps) => {\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        <div\n          // onClick={() =>\n          //   props.updateElementStatus(props.itms, props.selectedAnswer)\n          // }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {props.editedChoiceData !== null &&\n        props.editedChoiceData.reference === props.itms.reference &&\n        props.editedChoiceData.answer.id === props.selectedAnswer.id ? (\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: {\n                  id: props.selectedAnswer.id,\n                  value:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value),\n                          parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : e.target.value,\n                  status:\n                    FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      props.itms.reference\n                    ) === null\n                      ? \"\"\n                      : FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          props.itms.reference\n                        )!.typeShort === QuestionForHybrid.Numeric\n                      ? [\n                          parseFloat(e.target.value) -\n                            parseFloat(props.selectedAnswer.value[1]),\n                          parseFloat(e.target.value) +\n                            parseFloat(props.selectedAnswer.value[1]),\n                        ]\n                      : props.selectedAnswer.status,\n                },\n              });\n            }}\n            placeholder=\"Type answer here\"\n            className=\"input-gray-lg w-full mr-2 my-1\"\n            value={\n              FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : FindSubQuestionData(\n                    props.selectedQuestionItem.sub_question,\n                    props.itms.reference\n                  )!.typeShort === QuestionForHybrid.Numeric\n                ? props.editedChoiceData.answer.value[0]\n                : props.editedChoiceData.answer.value\n            }\n          ></textarea>\n        ) : (\n          <div\n            className={`${\n              props.selectedAnswer.status === true\n                ? \"text-blue-800 font-bold\"\n                : \"text-gray-800\"\n            } px-3 py-2 text-base`}\n          >\n            {FindSubQuestionData(\n              props.selectedQuestionItem.sub_question,\n              props.itms.reference\n            ) === null\n              ? \"\"\n              : FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                )!.typeShort === QuestionForHybrid.Numeric\n              ? props.selectedAnswer.value[0]\n              : props.selectedAnswer.value}\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (props.editedChoiceData === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer: props.selectedAnswer,\n              });\n              props.setShowLanguages(false);\n            } else {\n              console.log(props.editedChoiceData.answer);\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [props.editedChoiceData.answer],\n                }\n              );\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultipleChoiceSubQuestions;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport {\n  BsCheckCircle,\n  BsCheckSquareFill,\n  BsCircle,\n  BsSquare,\n} from \"react-icons/bs\";\nimport { HiArrowNarrowRight } from \"react-icons/hi\";\nimport { ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoCheckboxOutline } from \"react-icons/io5\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../../../interfaces\";\nimport { toMatching } from \"../../../../../../DoExam/QuestionDetails/ConvertingAnswers\";\nimport { FindSubQuestionData } from \"../Embedded\";\n\ninterface MatchingSubQuestionsProps {\n  selectedAnswer: QuestionAnswerFormat;\n  itms: QuestionAnswerInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateElementStatus: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  editedChoiceData: {\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null;\n  setEditedChoiceData: (\n    data: {\n      reference: number;\n      answer: QuestionAnswerFormat;\n    } | null\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  removeElement: (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst MatchingSubQuestions = (props: MatchingSubQuestionsProps) => {\n  const [editedMatching, setEditedMatching] =\n    useState<MatchingQuestionAnswerInterface | null>(\n      props.editedChoiceData === null ? null : props.editedChoiceData.answer\n    );\n  return (\n    <div className=\"group w-full flex flex-row items-center justify-between border-b\">\n      <div className=\"flex flex-row items-center gap-2 w-full\">\n        {console.log(\"Check edite: \", editedMatching)}\n        <div\n          onClick={() =>\n            props.updateElementStatus(props.itms, props.selectedAnswer)\n          }\n          className=\"text-3xl\"\n        >\n          {FindSubQuestionData(\n            props.selectedQuestionItem.sub_question,\n            props.itms.reference\n          ) === null ? (\n            <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n          ) : (\n            <div>\n              <BsCheckCircle className=\"text-blue-600\" />\n            </div>\n          )}\n        </div>\n        {editedMatching !== null ? (\n          <div className=\"w-full mr-2\">\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : e.target.value,\n                  status: editedMatching === null ? \"\" : editedMatching.status,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mt-1\"\n              value={editedMatching === null ? \"\" : editedMatching.value}\n            ></textarea>\n            <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                setEditedMatching({\n                  id: props.selectedAnswer.id,\n                  value: editedMatching === null ? \"\" : editedMatching.value,\n                  status: editedMatching === null ? \"\" : e.target.value,\n                });\n              }}\n              placeholder=\"Type answer here\"\n              className=\"input-gray-lg w-full mr-2 mb-1\"\n              value={editedMatching === null ? \"\" : editedMatching.status}\n            ></textarea>\n          </div>\n        ) : (\n          <div>\n            <div className={`text-gray-800 px-3 pt-2 text-base`}>\n              {FindSubQuestionData(\n                props.selectedQuestionItem.sub_question,\n                props.itms.reference\n              ) === null\n                ? \"\"\n                : props.selectedAnswer.value}\n            </div>\n            <div\n              className={`text-blue-600 font-bold px-3 pb-2 text-base flex flex-row items-center gap-2`}\n            >\n              <div>\n                <HiArrowNarrowRight className=\"text-3xl\" />\n              </div>\n              <div>\n                {FindSubQuestionData(\n                  props.selectedQuestionItem.sub_question,\n                  props.itms.reference\n                ) === null\n                  ? \"\"\n                  : props.selectedAnswer.status}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-row items-center gap-2\">\n        <div\n          onClick={() => {\n            if (editedMatching === null) {\n              props.setEditedChoiceData({\n                reference: props.itms.reference,\n                answer:\n                  props.editedChoiceData !== null\n                    ? props.editedChoiceData.answer\n                    : props.selectedAnswer,\n              });\n              props.editedChoiceData !== null\n                ? setEditedMatching(props.editedChoiceData.answer)\n                : setEditedMatching(props.selectedAnswer);\n              props.setShowLanguages(false);\n            } else {\n              props.updateAnswerHybrid(\n                props.selectedQuestionItem,\n                props.itms.reference,\n                {\n                  _id: props.itms._id,\n                  reference: props.itms.reference,\n                  answer: [editedMatching],\n                }\n              );\n              setEditedMatching(null);\n              props.setEditedChoiceData(null);\n              props.setShowLanguages(true);\n            }\n          }}\n          className=\"px-3 py-1 rounded bg-blue-50 text-blue-600 group-hover:bg-blue-600 group-hover:text-white cursor-pointer text-center\"\n        >\n          Update\n        </div>\n        {FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          props.itms.reference\n        ) === null ? (\n          <div className=\"text-yellow-800 text-xl\">Invalid Answer type</div>\n        ) : (\n          <div\n            onClick={() => {\n              props.removeElement(props.itms, props.selectedAnswer);\n            }}\n            className=\"px-3 py-1 rounded bg-yellow-50 text-yellow-800 hover:bg-yellow-100 cursor-pointer text-center\"\n          >\n            Remove\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSubQuestions;\n","import React, { useState } from \"react\";\nimport { BsCheckCircle, BsCircle } from \"react-icons/bs\";\nimport {\n  LanguageInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport {\n  QuestionForHybrid,\n  questionTypeElementsType,\n} from \"@mastrecruit/common\";\nimport { MdAdd } from \"react-icons/md\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport MultipleChoiceSubQuestions from \"./SubQuestions/MultipleChoiceSubQuestions\";\nimport NumericSubQuestions from \"./SubQuestions/NumericSubQuestions\";\nimport MatchingSubQuestions from \"./SubQuestions/MatchingSubQuestions\";\n\ninterface HybridAnsProps {\n  selectedKey: SelectedKeysEdit | null;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  selectedQuestionItem: QuestionItemInterface;\n  selectedQuestionType: questionTypeElementsType | null;\n  subQuestion: SubQuestionInterface;\n  setShowLanguages: (status: boolean) => void;\n}\n\nexport const FindSubQuestionData = (\n  subQuestions: SubQuestionInterface[],\n  reference_number: number\n): SubQuestionInterface | null => {\n  let findRef = subQuestions.find(\n    (item) => item.reference === reference_number\n  );\n  if (findRef !== undefined) {\n    return findRef;\n  }\n  return null;\n};\n\nconst Hybrid = (props: HybridAnsProps) => {\n  const [newChoiceData, setNewChoiceData] =\n    useState<QuestionAnswerFormat | null>(null);\n  const [editedChoiceData, setEditedChoiceData] = useState<{\n    reference: number;\n    answer: QuestionAnswerFormat;\n  } | null>(null);\n  const [addNewChoiceData, setAddNewChoiceData] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const updateElementStatus = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    let newDataTest: QuestionAnswerFormat[] = [];\n    for (let findData of itms.answer) {\n      if (findData.id === answer.id) {\n        newDataTest.push({\n          id: findData.id,\n          value: findData.value,\n          status: !findData.status,\n        });\n      }\n    }\n    props.updateAnswerHybrid(props.selectedQuestionItem, itms.reference, {\n      _id: itms._id,\n      reference: itms.reference,\n      answer: newDataTest,\n    });\n  };\n  const removeElement = (\n    itms: QuestionAnswerInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (\n      window.confirm(\"Are you sure do you want to remove this element?\") ===\n      true\n    ) {\n      if (\n        answer.status === true &&\n        FindSubQuestionData(\n          props.selectedQuestionItem.sub_question,\n          itms.reference\n        )?.typeShort === QuestionForHybrid.SimpleCalculate\n      ) {\n        alert(\"You can not remove correct answer!\");\n      } else {\n        let questionItems: QuestionAnswerInterface[] = [];\n        for (let findDel of props.selectedQuestionItem.answers) {\n          questionItems.push({\n            _id: findDel._id,\n            reference: findDel.reference,\n            answer: findDel.answer.filter((itm) => itm.id !== answer.id),\n          });\n        }\n        let newQuestionUpdated: QuestionItemInterface = {\n          description: props.selectedQuestionItem.description,\n          language: props.selectedQuestionItem.language,\n          status: props.selectedQuestionItem.status,\n          title: props.selectedQuestionItem.title,\n          answers: questionItems,\n          _id: props.selectedQuestionItem._id,\n          sub_question: props.selectedQuestionItem.sub_question,\n        };\n        props.updateAnswerHybrid(newQuestionUpdated, itms.reference, {\n          _id: itms._id,\n          reference: itms.reference,\n          answer: itms.answer.filter((itm) => itm.id !== answer.id),\n        });\n      }\n    }\n  };\n  return (\n    <div>\n      {props.selectedQuestionItem.answers.length === 0 ? (\n        <div className=\" text-lg text-gray-400 font-extrabold\">\n          No answers added!\n        </div>\n      ) : (\n        props.selectedQuestionItem.answers\n          .filter((itm) => itm.reference === props.subQuestion.reference)\n          .map((itms, i) => (\n            <div\n              key={i + 1}\n              className={`bg-white ${\n                props.selectedQuestionItem.answers.length === i + 1 ? \"\" : \"\"\n              } px-3 py-2 mb-2`}\n            >\n              <div className=\"flex flex-row items-center justify-between gap-2\">\n                <div className=\"flex flex-row items-center gap-3 w-full\">\n                  <div className=\"w-full flex flex-col\">\n                    {itms.answer.map((item, t) => (\n                      <div\n                        key={t + 1}\n                        className=\"w-full flex flex-row items-center justify-between\"\n                      >\n                        {/* MultipleChoice, SingleMultiple, CalculatedMultipleChoice, TrueFalse */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.MultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SingleMultiple ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort ===\n                            QuestionForHybrid.CalculatedMultipleChoice ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.TrueFalse) && (\n                          <MultipleChoiceSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Matching */}\n                        {FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Matching && (\n                          <MatchingSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n\n                        {/* Numeric, ShortAnswer, Essay, SimpleCalculate, Calculated */}\n                        {(FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )?.typeShort === QuestionForHybrid.Numeric ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.ShortAnswer ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Essay ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.SimpleCalculate ||\n                          FindSubQuestionData(\n                            props.selectedQuestionItem.sub_question,\n                            itms.reference\n                          )?.typeShort === QuestionForHybrid.Calculated) && (\n                          <NumericSubQuestions\n                            selectedAnswer={item}\n                            itms={itms}\n                            selectedQuestionItem={props.selectedQuestionItem}\n                            updateElementStatus={updateElementStatus}\n                            editedChoiceData={editedChoiceData}\n                            setEditedChoiceData={setEditedChoiceData}\n                            updateAnswerHybrid={props.updateAnswerHybrid}\n                            removeElement={removeElement}\n                            setShowLanguages={props.setShowLanguages}\n                          />\n                        )}\n                      </div>\n                    ))}\n\n                    {FindSubQuestionData(\n                      props.selectedQuestionItem.sub_question,\n                      itms.reference\n                    ) === null ? (\n                      <div className=\"text-yellow-800 text-xl\">\n                        Invalid Answer type\n                      </div>\n                    ) : (\n                      (FindSubQuestionData(\n                        props.selectedQuestionItem.sub_question,\n                        itms.reference\n                      )!.typeShort === QuestionForHybrid.SingleMultiple ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.MultipleChoice ||\n                        FindSubQuestionData(\n                          props.selectedQuestionItem.sub_question,\n                          itms.reference\n                        )!.typeShort === QuestionForHybrid.Matching) &&\n                      (addNewChoiceData === false ? (\n                        <div\n                          onClick={() => {\n                            setNewChoiceData(null);\n                            setAddNewChoiceData(true);\n                            props.setShowLanguages(false);\n                          }}\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center gap-3\"\n                        >\n                          <div>\n                            <MdAdd className=\"text-3xl\" />\n                          </div>\n                          <span className=\"text-base\">Add new answer</span>\n                        </div>\n                      ) : (\n                        <div className=\"bg-gray-100 rounded p-2 animate__animated animate__fadeIn animate__fast\">\n                          <div className=\"text-lg\">Add new answer</div>\n                          <div className=\"flex flex-col mt-2\">\n                            <textarea\n                              onChange={(\n                                e: React.ChangeEvent<HTMLTextAreaElement>\n                              ) => {\n                                setNewChoiceData({\n                                  id:\n                                    newChoiceData === null\n                                      ? uuidv4()\n                                      : newChoiceData.id,\n                                  value: e.target.value,\n                                  status:\n                                    newChoiceData === null\n                                      ? FindSubQuestionData(\n                                          props.selectedQuestionItem\n                                            .sub_question,\n                                          itms.reference\n                                        )!.typeShort ===\n                                        QuestionForHybrid.Matching\n                                        ? \"\"\n                                        : false\n                                      : newChoiceData.status,\n                                });\n                                setError(\"\");\n                              }}\n                              className=\"input-gray-lg w-full\"\n                              placeholder=\"Type new answer\"\n                              value={\n                                newChoiceData !== null\n                                  ? newChoiceData.value\n                                  : \"\"\n                              }\n                            ></textarea>\n                            {FindSubQuestionData(\n                              props.selectedQuestionItem.sub_question,\n                              itms.reference\n                            )!.typeShort === QuestionForHybrid.Matching && (\n                              <textarea\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLTextAreaElement>\n                                ) => {\n                                  setNewChoiceData({\n                                    id:\n                                      newChoiceData === null\n                                        ? uuidv4()\n                                        : newChoiceData.id,\n                                    value:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : newChoiceData.value,\n                                    status:\n                                      newChoiceData === null\n                                        ? \"\"\n                                        : e.target.value,\n                                  });\n                                  setError(\"\");\n                                }}\n                                className=\"input-gray-lg w-full mt-2\"\n                                placeholder=\"Type new answer matching\"\n                                value={\n                                  newChoiceData !== null\n                                    ? newChoiceData.status\n                                    : \"\"\n                                }\n                              ></textarea>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row items-center justify-between\">\n                            <div\n                              onClick={() => {\n                                setNewChoiceData(null);\n                                setAddNewChoiceData(false);\n                                props.setShowLanguages(true);\n                              }}\n                              className=\"btn bg-white hover:bg-gray-200 text-gray-900 cursor-pointer mt-2 mx-1\"\n                            >\n                              Cancel\n                            </div>\n                            <div className=\"flex flex-row items-center justify-end gap-3 pt-2\">\n                              {FindSubQuestionData(\n                                props.selectedQuestionItem.sub_question,\n                                itms.reference\n                              )!.typeShort !== QuestionForHybrid.Matching && (\n                                <div\n                                  onClick={() => {\n                                    setNewChoiceData({\n                                      id:\n                                        newChoiceData === null\n                                          ? uuidv4()\n                                          : newChoiceData.id,\n                                      value:\n                                        newChoiceData === null\n                                          ? \"\"\n                                          : newChoiceData.value,\n                                      status:\n                                        newChoiceData !== null &&\n                                        newChoiceData.status === true\n                                          ? false\n                                          : true,\n                                    });\n                                    setError(\"\");\n                                  }}\n                                  className=\"flex flex-row items-center gap-2 bg-white rounded px-2 py-1 cursor-pointer\"\n                                >\n                                  <div>\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true ? (\n                                      <BsCheckCircle className=\"text-blue-600 text-3xl\" />\n                                    ) : (\n                                      <BsCircle className=\"text-gray-700 text-3xl\" />\n                                    )}\n                                  </div>\n                                  <div\n                                    className={`text-base font-bold w-20 ${\n                                      newChoiceData !== null &&\n                                      newChoiceData.status === true\n                                        ? \"text-blue-600\"\n                                        : \"text-gray-900\"\n                                    }`}\n                                  >\n                                    {newChoiceData !== null &&\n                                    newChoiceData.status === true\n                                      ? \"Correct\"\n                                      : \"Incorrect\"}\n                                  </div>\n                                </div>\n                              )}\n                              <div\n                                onClick={() => {\n                                  if (newChoiceData === null) {\n                                    setError(\"Please fill answer\");\n                                  } else {\n                                    if (newChoiceData.value === \"\") {\n                                      setError(\"Please fill answer\");\n                                    } else {\n                                      props.updateAnswerHybrid(\n                                        props.selectedQuestionItem,\n                                        itms.reference,\n                                        {\n                                          _id: uuidv4(),\n                                          reference: itms.reference,\n                                          answer: [newChoiceData],\n                                        }\n                                      );\n                                      setNewChoiceData(null);\n                                      setAddNewChoiceData(false);\n                                      setError(\"\");\n                                      props.setShowLanguages(true);\n                                    }\n                                  }\n                                }}\n                                className=\"btn bg-blue-600 hover:bg-blue-800 text-white cursor-pointer\"\n                              >\n                                Add new\n                              </div>\n                            </div>\n                          </div>\n                          {error !== \"\" && (\n                            <div\n                              onClick={() => setError(\"\")}\n                              className=\"bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded mt-2 text-base animate__animated animate__zoomIn animate__faster cursor-pointer\"\n                            >\n                              {error}\n                            </div>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n                {/* <div className=\"btn bg-blue-100 text-blue-600\">Add new</div> */}\n              </div>\n            </div>\n          ))\n      )}\n    </div>\n  );\n};\n\nexport default Hybrid;\n","import { QuestionForHybrid } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\n\ninterface HybridSubQuestionsProps {\n  subQuestion: SubQuestionInterface;\n  itemNumber: number;\n  questionAnswers: QuestionAnswerInterface[];\n  editSubQuestion: (subQuestion: SubQuestionInterface) => void;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  selectedQuestionItem: QuestionItemInterface;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst HybridSubQuestions = (props: HybridSubQuestionsProps) => {\n  const [display, setDisplay] = useState<boolean>(false);\n  const [editedMarksData, setEditedMarksData] = useState<{\n    reference: number;\n    description: string;\n    marks: string;\n  } | null>(null);\n  const translateClass = \" transform rotate-180\";\n  return (\n    <div>\n      <div className=\"bg-white mb-2 rounded border\">\n        <div\n          onClick={() =>\n            (editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference) &&\n            setDisplay(!display)\n          }\n          className=\"group flex flex-row items-center justify-between py-2 px-3 gap-3 cursor-pointer hover:bg-blue-50\"\n        >\n          <div className=\"flex flex-row gap-3 items-center w-full\">\n            <div>\n              <div className=\"bg-gray-100 text-blue-600 group-hover:bg-white text-2xl h-10 w-10 rounded-full flex items-center justify-center\">\n                {props.itemNumber}\n              </div>\n            </div>\n            <div className=\"w-full\">\n              {editedMarksData === null ||\n              editedMarksData.reference !== props.subQuestion.reference ? (\n                <span className=\"text-lg group-hover:text-blue-700\">\n                  {props.subQuestion.description}\n                </span>\n              ) : (\n                <div className=\"w-full\">\n                  <textarea\n                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                      setEditedMarksData({\n                        reference: props.subQuestion.reference,\n                        description: e.target.value,\n                        marks: editedMarksData.marks,\n                      });\n                    }}\n                    className=\"input-gray-lg border border-gray-600 w-full\"\n                    value={editedMarksData.description}\n                  ></textarea>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-row items-center gap-2\">\n            {editedMarksData === null ||\n            editedMarksData.reference !== props.subQuestion.reference ? (\n              <div\n                onClick={() => {\n                  props.selectedQuestionItem.sub_question.find(\n                    (itm) => itm.reference === props.subQuestion.reference\n                  ) &&\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: props.subQuestion.description,\n                      marks: props.selectedQuestionItem.sub_question\n                        .find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        )!\n                        .marks.toString(),\n                    });\n                  setDisplay(true);\n                  props.setShowLanguages(false);\n                }}\n                className={`flex flex-row hover:text-blue-700 item-center gap-2 pl-3 cursor-pointer`}\n              >\n                <div className=\"py-1 px-3 bg-gray-100 group-hover:bg-white text-base rounded-xl font-semibold flex items-center justify-center w-max h-max\">\n                  {\n                    props.selectedQuestionItem.sub_question.find(\n                      (itm) => itm.reference === props.subQuestion.reference\n                    )?.marks\n                  }{\" \"}\n                  marks\n                </div>\n                <div className=\"rounded-full flex items-center justify-center h-10 w-10 cursor-pointer bg-gray-100 group-hover:bg-white group-hover:text-blue-700\">\n                  <MdModeEdit className=\"text-2xl\" />\n                </div>\n              </div>\n            ) : (\n              <div className=\"group flex flex-row items-center gap-2 my-1\">\n                <input\n                  className=\"input-white w-full border border-gray-600\"\n                  type=\"text\"\n                  placeholder=\"Reference marks\"\n                  value={editedMarksData.marks}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setEditedMarksData({\n                      reference: props.subQuestion.reference,\n                      description: editedMarksData.description,\n                      marks: e.target.value,\n                    });\n                  }}\n                />\n                <div\n                  onClick={() => {\n                    if (editedMarksData !== undefined) {\n                      let currentAnswer =\n                        props.selectedQuestionItem.answers.find(\n                          (itm) => itm.reference === props.subQuestion.reference\n                        );\n                      if (currentAnswer !== undefined) {\n                        let newSubQuestions: SubQuestionInterface[] = [];\n                        for (let newSubQuestion of props.selectedQuestionItem\n                          .sub_question) {\n                          if (\n                            newSubQuestion.reference ===\n                            editedMarksData.reference\n                          ) {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              {\n                                _id: newSubQuestion._id,\n                                description: editedMarksData.description,\n                                typeShort: newSubQuestion.typeShort,\n                                type: newSubQuestion.type,\n                                marks: parseFloat(editedMarksData.marks),\n                                reference: newSubQuestion.reference,\n                              },\n                            ];\n                          } else {\n                            newSubQuestions = [\n                              ...newSubQuestions,\n                              newSubQuestion,\n                            ];\n                          }\n                        }\n                        props.updateAnswerHybrid(\n                          {\n                            description: props.selectedQuestionItem.description,\n                            language: props.selectedQuestionItem.language,\n                            status: props.selectedQuestionItem.status,\n                            title: props.selectedQuestionItem.title,\n                            answers: props.selectedQuestionItem.answers,\n                            _id: props.selectedQuestionItem._id,\n                            sub_question:\n                              newSubQuestions.length ===\n                              props.selectedQuestionItem.sub_question.length\n                                ? newSubQuestions\n                                : props.selectedQuestionItem.sub_question,\n                          },\n                          props.subQuestion.reference,\n                          currentAnswer\n                        );\n                        setEditedMarksData(null);\n                      }\n                      props.setShowLanguages(true);\n                    }\n                  }}\n                  className=\"bg-blue-600 group-hover:bg-blue-800 text-white font-bold text-base flex items-center justify-center px-3 py-1 rounded cursor-pointer\"\n                >\n                  Save\n                </div>\n              </div>\n            )}\n            <div>\n              <div\n                className={`bg-gray-100 group-hover:bg-white text-3xl h-10 w-10 rounded-full flex items-center justify-center transition transform${\n                  display === true ? translateClass : \"\"\n                }`}\n              >\n                <IoIosArrowDown />\n              </div>\n            </div>\n          </div>\n        </div>\n        {display === true && (\n          <div className=\"bg-white border-t py-3 px-3 rounded-b\">\n            <Hybrid\n              selectedKey={null}\n              wholeQuestion={props.wholeQuestion}\n              selectedLanguage={props.selectedLanguage}\n              updateAnswerHybrid={props.updateAnswerHybrid}\n              selectedQuestionItem={props.selectedQuestionItem}\n              selectedQuestionType={null}\n              subQuestion={props.subQuestion}\n              setShowLanguages={props.setShowLanguages}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HybridSubQuestions;\n","import React, { useState } from \"react\";\nimport { HiCheck } from \"react-icons/hi\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n  QuestionLanguages,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  SubQuestionInterface,\n} from \"../../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"../EditQuestion\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validateCalculatedFormula } from \"../../../../../../utils/question_bank\";\nimport EditorComponent from \"../../../../../../components/EditorComponent/EditorComponent\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport Embedded from \"../AnswersQuestionTypes/Embedded\";\nimport Hybrid from \"../AnswersQuestionTypes/Hybrid\";\nimport HybridSubQuestions from \"./HybridSubQuestions\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst EditHybrid = (props: QuestionAnswerProps) => {\n  const [addedAnswer, setAddedAnswer] = useState<\n    { lang: LanguageInterface; answer: QuestionAnswerFormat }[]\n  >([]);\n  const [showAddAnswerStatus, setShowAddAnswer] = useState<boolean>(false);\n  const checkCalculateType =\n    props.selectedQuestionType ===\n    questionTypeElementsType.CalculatedMultipleChoice\n      ? true\n      : false;\n  const AddAnswer = () => {\n    if (addedAnswer !== null) {\n      if (addedAnswer.length !== QuestionLanguages.length) {\n        alert(\"Please fill question answer!\" + addedAnswer.length);\n      } else {\n        for (let answer of addedAnswer) {\n          let selectedQL = props.wholeQuestion.find(\n            (itm) => itm.language === answer.lang.key\n          );\n          if (selectedQL !== undefined) {\n            props.addAnswerSingleMultiple(selectedQL, answer.answer);\n          }\n        }\n        setAddedAnswer([]);\n        setShowAddAnswer(false);\n      }\n    }\n  };\n  const handleAnswer = (\n    lang: LanguageInterface,\n    answer: QuestionAnswerFormat\n  ) => {\n    if (addedAnswer.find((itm) => itm.lang.key === lang.key) === undefined) {\n      setAddedAnswer([...addedAnswer, { lang: lang, answer: answer }]);\n    } else {\n      setAddedAnswer([\n        ...addedAnswer.filter((itm) => itm.lang.key !== lang.key),\n        { lang: lang, answer: answer },\n      ]);\n    }\n  };\n\n  const handleStatus = (status: boolean) => {\n    if (addedAnswer.length > 0) {\n      let backup = [];\n      for (let itm of addedAnswer) {\n        backup.push({\n          lang: itm.lang,\n          answer: {\n            value: itm.answer.value,\n            status: status,\n            id: itm.answer.id,\n          },\n        });\n      }\n      setAddedAnswer(backup);\n    }\n  };\n\n  const editSubQuestion = (subQuestion: SubQuestionInterface) => {\n    console.log(\"Edited SubQuestion: \", subQuestion);\n  };\n\n  let totalMarks = 0;\n\n  for (let tot of props.selectedQuestionItem.sub_question) {\n    totalMarks += tot.marks;\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col mb-3 text-sm gap-2 bg-white px-2 py-2 rounded\">\n        {showAddAnswerStatus === true && (\n          <label className=\"text-gray-600 font-bold\">Add question Answer</label>\n        )}\n\n        {showAddAnswerStatus === false ? (\n          <div className=\"flex flex-row items-center gap-3 animate__animated animate__fadeIn animate__fast\">\n            <div></div>\n            <div className=\"w-full flex flex-row items-center justify-between pr-2 py-1\">\n              <div className=\"text-gray-600 font-bold flex flex-row items-center text-2xl\">\n                Questions list ({props.selectedQuestionItem.sub_question.length}\n                )\n              </div>\n              <div className=\"flex flex-row gap-2 items-center\">\n                {props.selectedKey !== null &&\n                  props.selectedKey === SelectedKeysEdit.QuestionAnswer && (\n                    <>\n                      <div className=\"flex flex-row items-center justify-end gap-2\">\n                        <span className=\"font-bold text-gray-600\">Marks</span>\n                        <input\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            props.updateMarks(parseInt(e.target.value))\n                          }\n                          type=\"number\"\n                          placeholder=\"Marks\"\n                          value={props.marks}\n                          className=\"input-gray-lg h-10\"\n                        />\n                      </div>\n                      <div\n                        onClick={() => props.setSelectedKey(null)}\n                        className=\"bg-blue-100 text-blue-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-200 hover:text-blue-700\"\n                      >\n                        <HiCheck className=\"text-3xl\" />\n                      </div>\n                    </>\n                  )}\n                {props.selectedKey !== SelectedKeysEdit.QuestionAnswer && (\n                  <>\n                    <div className=\"px-4 py-2 rounded-full bg-blue-100 text-blue-600 font-bold\">\n                      Total Marks: {totalMarks}\n                    </div>\n                    {/* <div\n                      onClick={() =>\n                        props.setSelectedKey(SelectedKeysEdit.QuestionAnswer)\n                      }\n                      className=\"bg-gray-100 text-gray-600 rounded-full flex items-center justify-center h-12 w-12 cursor-pointer hover:bg-blue-100 hover:text-blue-600\"\n                    >\n                      <MdModeEdit className=\"text-3xl\" />\n                    </div> */}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-2 gap-3 bg-white rounded animate__animated animate__fadeIn animate__fast\">\n            <div className=\"flex flex-col gap-2\">\n              {QuestionLanguages.map((item, i) => (\n                <div key={i + 1} className=\"flex flex-col gap-2\">\n                  <span className=\"font-bold text-blue-600\">{item.value}</span>\n                  {checkCalculateType === false ? (\n                    <div>\n                      <EditorComponent\n                        key={i + 1}\n                        id={\"createMultiple\" + (i + 1)}\n                        item={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        handleItem={(data: string) => {\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: data,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          });\n                        }}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-col w-full\">\n                      <textarea\n                        value={\n                          addedAnswer.length > 0\n                            ? addedAnswer.find(\n                                (itm) => itm.lang.key === item.key\n                              )?.answer.value\n                            : \"\"\n                        }\n                        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                          handleAnswer(item, {\n                            id:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.id\n                                : uuidv4(),\n                            value: e.target.value,\n                            status:\n                              addedAnswer.length > 0\n                                ? addedAnswer[0].answer.status\n                                : false,\n                          })\n                        }\n                        placeholder=\"Formula\"\n                        className={`${\n                          checkCalculateType === true\n                            ? validateCalculatedFormula(\n                                addedAnswer.length > 0\n                                  ? addedAnswer.find(\n                                      (itm) => itm.lang.key === item.key\n                                    )?.answer.value\n                                  : \"\"\n                              ).status === true\n                              ? \"input-gray-lg border-gray-500 focus:border-blue-600\"\n                              : \"input-gray-lg-danger border-yellow-600 focus:border-yellow-700\"\n                            : \"input-gray-lg\"\n                        }`}\n                      ></textarea>\n                      <span\n                        className={`${\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).status === true\n                            ? \"text-green-600\"\n                            : \"text-yellow-700\"\n                        } text-xs font-bold`}\n                      >\n                        {\n                          validateCalculatedFormula(\n                            addedAnswer.length > 0\n                              ? addedAnswer.find(\n                                  (itm) => itm.lang.key === item.key\n                                )?.answer.value\n                              : \"\"\n                          ).msg\n                        }\n                      </span>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex flex-row mt-3 items-center justify-end gap-2\">\n              <div\n                onClick={() =>\n                  handleStatus(\n                    addedAnswer.length > 0\n                      ? !addedAnswer[0].answer.status\n                      : false\n                  )\n                }\n                className={`flex flex-row items-center gap-2 cursor-pointer ${\n                  addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } hover:text-blue-600`}\n              >\n                {addedAnswer.length > 0 &&\n                addedAnswer[0].answer.status === false ? (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span className=\"font-bold text-xl\">\n                  {addedAnswer.length > 0 &&\n                  addedAnswer[0].answer.status === true\n                    ? \"True\"\n                    : \"False\"}\n                </span>\n              </div>\n              <div\n                onClick={() => AddAnswer()}\n                className=\"btn bg-blue-600 text-white hover:bg-blue-800 cursor-pointer w-24 text-center\"\n              >\n                Add\n              </div>\n              <div\n                onClick={() => setShowAddAnswer(false)}\n                className=\"btn bg-gray-500 text-white hover:bg-gray-700 cursor-pointer w-24 text-center\"\n              >\n                Cancel\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {props.selectedQuestionItem.sub_question.length > 0 &&\n        props.selectedQuestionItem.sub_question.map((item, i) => (\n          <HybridSubQuestions\n            key={i + 1}\n            itemNumber={i + 1}\n            subQuestion={item}\n            questionAnswers={props.selectedQuestionItem.answers}\n            editSubQuestion={editSubQuestion}\n            wholeQuestion={props.wholeQuestion}\n            selectedLanguage={props.selectedLanguage}\n            selectedQuestionItem={props.selectedQuestionItem}\n            updateAnswerHybrid={props.updateAnswerHybrid}\n            setShowLanguages={props.setShowLanguages}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default EditHybrid;\n","import React from \"react\";\nimport {\n  LanguageInterface,\n  MatchingQuestionAnswerInterface,\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerFormat,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces/question\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\nimport EditMatching from \"./EditQuestionTypes/EditMatching\";\nimport EditMultipleChoice from \"./EditQuestionTypes/EditMultipleChoice\";\nimport EditSimpleCalculate from \"./EditQuestionTypes/EditSimpleCalculate\";\nimport EditTrueFalse from \"./EditQuestionTypes/EditTrueFalse\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport EditEmbedded from \"./EditQuestionTypes/EditEmbedded\";\nimport EditHybrid from \"./EditQuestionTypes/EditHybrid\";\n\ninterface QuestionAnswerProps {\n  selectedQuestionType: questionTypeElementsType | null;\n  selectedQuestionItem: QuestionItemInterface;\n  wholeQuestion: QuestionItemInterface[];\n  selectedLanguage: LanguageInterface;\n  updateAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerSimpleCalculate: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumerical: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateAnswerNumericalValue: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    editedAnswer: NumericalQuestionAnswerInterface\n  ) => void;\n  updateShortAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  updateEssayAnswer: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: QuestionAnswerFormat\n  ) => void;\n  addAnswerSingleMultiple: (\n    question: QuestionItemInterface,\n    addedAnswer: QuestionAnswerFormat\n  ) => void;\n  removeAnswerSingleMultiple: (\n    question: QuestionItemInterface[],\n    removedAnswer: QuestionAnswerFormat\n  ) => void;\n  selectedKey: SelectedKeysEdit | null;\n  setSelectedKey: (selectedKey: SelectedKeysEdit | null) => void;\n  editSingleMultipleStatus: (answer_id: string, status: boolean) => void;\n  editTrueFalseStatus: (answer_id: string, status: boolean) => void;\n  editMatchingValue: (\n    question: QuestionItemInterface,\n    editedAnswerIndex: string,\n    editedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  editMatchingStatus: (\n    question: QuestionItemInterface,\n    answer_id: string,\n    status: string\n  ) => void;\n  marks: number;\n  updateMarks: (marks: number) => void;\n  addAnswerMatchingQuestion: (\n    question: QuestionItemInterface,\n    addedAnswer: MatchingQuestionAnswerInterface\n  ) => void;\n  updateAnswerEmbedded: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  updateAnswerHybrid: (\n    question: QuestionItemInterface,\n    reference_number: number,\n    editedAnswer: QuestionAnswerInterface\n  ) => void;\n  setShowLanguages: (status: boolean) => void;\n}\n\nconst QuestionAnswer = (props: QuestionAnswerProps) => {\n  return (\n    <div>\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SingleMultiple ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.MultipleChoice ||\n        props.selectedQuestionType ===\n          questionTypeElementsType.CalculatedMultipleChoice) && (\n        <EditMultipleChoice\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.TrueFalse && (\n        <EditTrueFalse\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editTrueFalseStatus={props.editTrueFalseStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Matching && (\n        <EditMatching\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          addAnswerMatchingQuestion={props.addAnswerMatchingQuestion}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editMatchingValue={props.editMatchingValue}\n          editMatchingStatus={props.editMatchingStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {(props.selectedQuestionType ===\n        questionTypeElementsType.SimpleCalculate ||\n        props.selectedQuestionType === questionTypeElementsType.Numeric ||\n        props.selectedQuestionType === questionTypeElementsType.ShortAnswer ||\n        props.selectedQuestionType === questionTypeElementsType.Essay) && (\n        <EditSimpleCalculate\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          updateAnswerSimpleCalculate={props.updateAnswerSimpleCalculate}\n          updateAnswerNumerical={props.updateAnswerNumerical}\n          updateAnswerNumericalValue={props.updateAnswerNumericalValue}\n          updateShortAnswer={props.updateShortAnswer}\n          updateEssayAnswer={props.updateEssayAnswer}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Embedded && (\n        <EditEmbedded\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerEmbedded={props.updateAnswerEmbedded}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n      {props.selectedQuestionType === questionTypeElementsType.Hybrid && (\n        <EditHybrid\n          selectedQuestionType={props.selectedQuestionType}\n          selectedQuestionItem={props.selectedQuestionItem}\n          wholeQuestion={props.wholeQuestion}\n          selectedLanguage={props.selectedLanguage}\n          updateAnswerSingleMultiple={props.updateAnswerSingleMultiple}\n          addAnswerSingleMultiple={props.addAnswerSingleMultiple}\n          removeAnswerSingleMultiple={props.removeAnswerSingleMultiple}\n          selectedKey={props.selectedKey}\n          setSelectedKey={props.setSelectedKey}\n          editSingleMultipleStatus={props.editSingleMultipleStatus}\n          marks={props.marks}\n          updateMarks={props.updateMarks}\n          updateAnswerHybrid={props.updateAnswerHybrid}\n          setShowLanguages={props.setShowLanguages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default QuestionAnswer;\n","import React from \"react\";\nimport EditorComponent from \"../../../../../components/EditorComponent/EditorComponent\";\nimport {\n  LanguageInterface,\n  QuestionItemInterface,\n} from \"../../../../../interfaces\";\nimport { SelectedKeysEdit } from \"./EditQuestion\";\n\ninterface HandleInputProps {\n  languages: LanguageInterface[];\n  questionItems: QuestionItemInterface[];\n  selectedKey: SelectedKeysEdit;\n  handleUpdateQuestionDetails: (question: QuestionItemInterface) => void;\n}\n\nconst HandleInput = (props: HandleInputProps) => {\n  if (props.selectedKey === SelectedKeysEdit.Title) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div\n            key={i + 1}\n            className=\"flex flex-col animate__animated animate__fadeInDown animate__fast\"\n          >\n            <span className=\"font-bold truncate text-gray-800 flex flex-row items-center gap-2 text-base\">\n              {item.value}:\n            </span>\n            <input\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: check.description,\n                  language: check.language,\n                  status: check.status,\n                  title: e.target.value,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.title\n              }\n              type=\"text\"\n              className=\"input-gray-lg w-full mt-1\"\n            />\n          </div>\n        ))}\n      </div>\n    );\n  } else if (props.selectedKey === SelectedKeysEdit.Description) {\n    return (\n      <div>\n        {props.languages.map((item, i) => (\n          <div className=\"flex flex-col items-start animate__animated animate__fadeInDown animate__fast bg-gray-100 mb-4 p-2 rounded\">\n            <span className=\"font-bold w-24 truncate text-blue-600 flex flex-row items-center gap-2\">\n              {item.value}\n            </span>\n            <EditorComponent\n              key={i + 1}\n              id={props.selectedKey + i + 1}\n              item={\n                props.questionItems.find((itm) => itm.language === item.key) ===\n                undefined\n                  ? \"\"\n                  : props.questionItems.find(\n                      (itm) => itm.language === item.key\n                    )!.description\n              }\n              handleItem={(e: any) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  _id: check._id,\n                  description: e,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answers: check.answers,\n                  sub_question: check.sub_question,\n                });\n              }}\n            />\n            {/* <textarea\n              key={i + 1}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                let check = props.questionItems.find(\n                  (itm) => itm.language === item.key\n                );\n                if (check === undefined) {\n                  check = props.questionItems[0];\n                }\n                props.handleUpdateQuestionDetails({\n                  description: e.target.value,\n                  language: check.language,\n                  status: check.status,\n                  title: check.title,\n                  answer: check.answer,\n                });\n              }}\n              value={\n                props.questionItems.find((itm) => itm.language === item.key)\n                  ?.description\n              }\n              className=\"input-gray-lg w-full mt-3\"\n            ></textarea> */}\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default HandleInput;\n","import React from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { course } from \"../../../../../interfaces\";\n\ninterface QuestionChaptersProps {\n  selectedCourse: course | null | undefined;\n  addedChapters: string[];\n  setAddChapter: (chapter: string) => void;\n}\n\nconst QuestionChapters = (props: QuestionChaptersProps) => {\n  if (props.selectedCourse === undefined || props.selectedCourse === null) {\n    return (\n      <div>\n        <div className=\"text-6xl text-center text-red-800 font-bold rounded bg-red-100 px-3 py-4\">\n          Invalid course selected!\n        </div>\n      </div>\n    );\n  } else if (\n    props.selectedCourse !== undefined &&\n    props.selectedCourse !== null &&\n    props.selectedCourse.chapters?.length === 0\n  ) {\n    return (\n      <div>\n        <div className=\"text-3xl text-center text-yellow-800 font-bold rounded bg-yellow-100 px-3 py-4\">\n          No chapter available for this course!\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"px-2 pb-2\">\n        <div className=\"text-sm text-gray-500 font-bold\">Selected course</div>\n        <div className=\"bg-blue-50 text-blue-600 font-bold rounded px-3 py-2\">\n          {props.selectedCourse.course_code} -{\" \"}\n          {props.selectedCourse.course_name}\n        </div>\n        <div className=\"flex flex-col gap-2 mt-3\">\n          {props.selectedCourse.chapters !== undefined &&\n          props.selectedCourse.chapters.length === 0 ? (\n            <div>No chapters found!</div>\n          ) : (\n            props.selectedCourse.chapters &&\n            props.selectedCourse.chapters.map((item, i) => (\n              <div\n                key={i + 1}\n                onClick={() => props.setAddChapter(item.id)}\n                className={`${\n                  props.addedChapters.find((itm) => itm === item.id)\n                    ? \"text-blue-600\"\n                    : \"text-gray-600\"\n                } border rounded px-2 py-2 flex flex-row items-center gap-3 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600 cursor-pointer`}\n              >\n                {props.addedChapters.find((itm) => itm === item.id) ? (\n                  <ImCheckboxChecked className=\"text-2xl cursor-pointer\" />\n                ) : (\n                  <ImCheckboxUnchecked className=\"text-2xl cursor-pointer\" />\n                )}\n                <span>{item.name}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default QuestionChapters;\n","import React, { useState } from \"react\";\nimport { MdLanguage } from \"react-icons/md\";\nimport { RiCloseCircleFill } from \"react-icons/ri\";\nimport {\n  LanguageInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../interfaces/question\";\nimport { CgMoreO } from \"react-icons/cg\";\n\ninterface ChangeLanguageProps {\n  setSelectedLanguage: (lang: LanguageInterface) => void;\n  selectedLanguage: LanguageInterface;\n  languagesList?: QuestionLanguage[];\n}\n\nconst ChangeLanguage = (props: ChangeLanguageProps) => {\n  const [visible, setVisible] = useState<boolean>(\n    props.languagesList !== undefined && props.languagesList.length > 1\n      ? true\n      : false\n  );\n  return (\n    <div\n      className={`fixed bottom-0 z-50 left-1 bg-blue-600 ${\n        visible === false ? \"text-blue-800\" : \"text-white\"\n      } hover:text-white rounded-t-lg w-auto ${\n        visible === true\n          ? \"animate__animated animate__fadeInUp animate__faster\"\n          : \"animate__animated animate__fadeInDown animate__faster\"\n      } bg-white`}\n    >\n      <div\n        className={`flex flex-col px-3 py-2 rounded-t-lg ${\n          visible === true\n            ? \"bg-blue-700\"\n            : \"bg-white shadow-lg border border-gray-300\"\n        } hover:bg-blue-800 cursor-pointer`}\n      >\n        <div className=\"flex flex-row items-center justify-between\">\n          <div\n            onClick={() => setVisible(!visible)}\n            className=\"font-bold text-lg flex flex-row gap-2 items-center\"\n          >\n            <MdLanguage className=\"text-2xl\" />\n            Choose language\n          </div>\n          {visible === false ? (\n            <div className=\"flex flex-row items-center\">\n              <CgMoreO\n                onClick={() => setVisible(!visible)}\n                className=\"text-2xl ml-3\"\n              />\n            </div>\n          ) : (\n            <RiCloseCircleFill\n              onClick={() => setVisible(!visible)}\n              className=\"text-3xl ml-3 -my-5 text-yellow-300\"\n            />\n          )}\n        </div>\n      </div>\n      {visible && (\n        <div className={`flex flex-col`}>\n          <div className=\"\">\n            {props.languagesList === undefined\n              ? QuestionLanguages\n              : QuestionLanguages.filter(\n                  (itm) =>\n                    props.languagesList &&\n                    props.languagesList.find((test) => test === itm.key)\n                ).map((item, i) => (\n                  <div\n                    onClick={() => props.setSelectedLanguage(item)}\n                    key={i + 1}\n                    className={`flex flex-row items-center justify-start ${\n                      props.selectedLanguage.key === item.key\n                        ? \"text-blue-600 bg-blue-50 rounded m-2 font-bold animate__animated animate__zoomIn animate__faster\"\n                        : \"rounded m-2 text-white\"\n                    } text-center text-sm px-3 py-2 cursor-pointer hover:bg-blue-50 hover:text-blue-600 hover:border-blue-600`}\n                  >\n                    {item.value}\n                  </div>\n                ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChangeLanguage;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst MultipleChoice = (props: MultipleChoiceProps) => {\n  const checkAnswer = (\n    item: MultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: MultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    // Problem here!\n    item: MultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        // Check type of question\n        let temp: MultipleChoiceQuestionAnswerInterface[] = [];\n        if (props.type === questionTypeElementsType.SingleMultiple) {\n          for (let t of selAns.answer) {\n            temp = [\n              ...temp,\n              {\n                id: t.id,\n                value: t.value,\n                status: false,\n              },\n            ];\n          }\n          addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n        }\n        let newAnswersMultiple: MultipleChoiceQuestionAnswerInterface[] = [];\n\n        for (let xItem of temp.length === 0 ? selAns.answer : temp) {\n          if (xItem.id === item.id) {\n            newAnswersMultiple = [\n              ...newAnswersMultiple,\n              {\n                id: xItem.id,\n                value: xItem.value,\n                status:\n                  props.type === questionTypeElementsType.SingleMultiple\n                    ? true\n                    : !xItem.status,\n              },\n            ];\n          } else {\n            newAnswersMultiple = [...newAnswersMultiple, xItem];\n          }\n\n          addAnswerItemFn(\n            newAnswersMultiple,\n            props.selectedQuestionAnswer.selectedAns\n          );\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            title=\"Click to choose this option\"\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.type === questionTypeElementsType.SingleMultiple ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.type === questionTypeElementsType.SingleMultiple ? (\n              <MdRadioButtonUnchecked className=\"text-2xl truncate\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <div\n              dangerouslySetInnerHTML={{ __html: item.value }}\n              className=\"ml-2\"\n            ></div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default MultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  TrueFalseQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface TrueFalseProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: TrueFalseQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst TrueFalse = (props: TrueFalseProps) => {\n  const checkAnswer = (item: TrueFalseQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: TrueFalseQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n\n  const addAnswer = (\n    //This has a problem\n    item: TrueFalseQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let temp: TrueFalseQuestionAnswerInterface[] = [];\n        for (let t of selAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, selAns);\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let x of temp.length === 0 ? selAns.answer : temp) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: !x.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: TrueFalseQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <MdRadioButtonChecked className=\"text-2xl\" />\n            ) : (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">{item.value}</span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default TrueFalse;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  SimpleCalculatedQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface SimpleCalculatedProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: SimpleCalculatedQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst SimpleCalculated = (props: SimpleCalculatedProps) => {\n  const checkAnswer = (\n    item: SimpleCalculatedQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: [\n              {\n                id: newAnswers[0].id,\n                value: [newAnswers[0].value],\n                status: newAnswers[0].status,\n              },\n            ],\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default SimpleCalculated;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  ShortAnswerQuestionAnswerInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface ShortAnswerProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: ShortAnswerQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst ShortAnswer = (props: ShortAnswerProps) => {\n  const checkAnswer = (item: ShortAnswerQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: ShortAnswerQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: item.value,\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer === undefined ? (\n        <div\n          className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n        >\n          <textarea\n            value={\"\"}\n            className={`px-3 py-2 rounded focus:outline-none focus:border-none border text-gray-700 border-gray-500 bg-gray-50`}\n            style={{ minHeight: \"80px\" }}\n          ></textarea>\n        </div>\n      ) : (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"80px\" }}\n            ></textarea>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default ShortAnswer;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  NumericalQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface NumericalProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: NumericalQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Numerical = (props: NumericalProps) => {\n  const checkAnswer = (item: NumericalQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value[0] !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string[]; status: number[] }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: number[] },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      addAnswerItemFn(\n        [\n          {\n            id: props.selectedQuestionAnswer.selectedAns.answer[0].id,\n            value: [item.value],\n            status: props.selectedQuestionAnswer.selectedAns.answer[0].status,\n          },\n        ],\n        props.selectedQuestionAnswer.selectedAns\n      );\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value[0]\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        // props.answerQuestionFn({\n        //   question_id: props.selectedQuestionAnswer.question_id,\n        //   status: true,\n        //   answer: [\n        //     {\n        //       id: props.selectedQuestionAnswer.answers[0].id,\n        //       value: [\"\"],\n        //       status: props.selectedQuestionAnswer.answers[0].status,\n        //     },\n        //   ],\n        // });\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: [\"\"],\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <input\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              type=\"text\"\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold border-blue-600\"\n                  : \"border text-gray-700 border-gray-500\"\n              }`}\n            />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Numerical;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  CalculatedMultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { getRandomArbitrary } from \"../../utils/utils\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface CalculatedMultipleChoiceProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: CalculatedMultipleChoiceQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst CalculatedMultipleChoice = (props: CalculatedMultipleChoiceProps) => {\n  const checkAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface\n  ): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status === true) {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswerItemFn = (\n    newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: CalculatedMultipleChoiceQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      // Check type of question\n      let temp: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.filter(\n          (itm) => itm.status === true\n        ).length === 1\n      ) {\n        for (let t of props.selectedQuestionAnswer.selectedAns.answer) {\n          temp = [\n            ...temp,\n            {\n              id: t.id,\n              value: t.value,\n              status: false,\n            },\n          ];\n        }\n        addAnswerItemFn(temp, props.selectedQuestionAnswer.selectedAns);\n      }\n      let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n      for (let x of temp.length === 0\n        ? props.selectedQuestionAnswer.selectedAns.answer\n        : temp) {\n        if (x.id === item.id) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: item.id,\n              value: item.value,\n              status:\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1\n                  ? true\n                  : !x.status,\n            },\n          ];\n        } else {\n          newAnswers = [...newAnswers, x];\n        }\n      }\n      addAnswerItemFn(newAnswers, props.selectedQuestionAnswer.selectedAns);\n    }\n  };\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: CalculatedMultipleChoiceQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: false,\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div>\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() =>\n              addAnswer(item, props.selectedQuestionAnswer.question_id)\n            }\n            className={`px-2 py-2 border-b ${\n              checkAnswer(item) === true\n                ? \"border bg-blue-100 border-white text-blue-600 hover:border-blue-600 rounded font-bold\"\n                : \"border-b bg-white border-gray-100 hover:bg-gray-100\"\n            } flex flex-row justify-left items-center rounded cursor-pointer`}\n          >\n            {checkAnswer(item) === true ? (\n              <>\n                {props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.answers.filter(\n                  (itm) => itm.status === true\n                ).length === 1 ? (\n                  <MdRadioButtonChecked className=\"text-2xl\" />\n                ) : (\n                  <ImCheckboxChecked className=\"text-2xl\" />\n                )}\n              </>\n            ) : props.selectedQuestionAnswer.answers !== undefined &&\n              props.selectedQuestionAnswer.answers.filter(\n                (itm) => itm.status === true\n              ).length === 1 ? (\n              <MdRadioButtonUnchecked className=\"text-2xl\" />\n            ) : (\n              <ImCheckboxUnchecked className=\"text-2xl\" />\n            )}\n            <span className=\"ml-2\">\n              {item.value.length > 2\n                ? item.value\n                : item.value.length === 2\n                ? getRandomArbitrary(item.value[0], item.value[1])\n                    .toFixed(2)\n                    .toString()\n                : item.value[0]}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CalculatedMultipleChoice;\n","import React, { useEffect } from \"react\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  EssayQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n} from \"../../../../interfaces/question\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface EssayQuestionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: EssayQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Essay = (props: EssayQuestionProps) => {\n  const checkAnswer = (item: EssayQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.value !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n  const addAnswerItemFn = (\n    newAnswers: { id: string; value: string; status: boolean }[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n  const addAnswer = (\n    item: { id: string; value: string; status: boolean },\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        addAnswerItemFn(\n          [\n            {\n              id: selAns.answer[0].id,\n              value: item.value,\n              status: selAns.answer[0].status,\n            },\n          ],\n          selAns\n        );\n      }\n    }\n  };\n  const answeredValue = () => {\n    let answer = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    let checkB: QuestionAnswerInterface | undefined = undefined;\n    checkB =\n      answer === undefined\n        ? undefined\n        : answer.answers.find(\n            (tes) =>\n              tes.reference ===\n              props.selectedQuestionAnswer.selectedAns.reference\n          );\n    return answer !== undefined && checkB !== undefined\n      ? checkB.answer.length !== 0 && checkB.answer[0].value\n      : \"\";\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: [\n                  {\n                    id: props.selectedQuestionAnswer.answers[0].id,\n                    value: \"\",\n                    status: props.selectedQuestionAnswer.answers[0].status,\n                  },\n                ],\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`-mx-2 -my-2 flex flex-col justify-left rounded cursor-pointer`}\n          >\n            <textarea\n              onChange={(e) => {\n                addAnswer(\n                  {\n                    id: item.id,\n                    value: e.target.value,\n                    status: item.status,\n                  },\n                  props.selectedQuestionAnswer.question_id\n                );\n              }}\n              value={answeredValue()}\n              className={`px-3 py-2 rounded focus:outline-none focus:border-none ${\n                checkAnswer(item) === true\n                  ? \"border-2 text-blue-600 font-bold bg-white border-blue-600\"\n                  : \"border text-gray-700 border-gray-500 bg-gray-50\"\n              }`}\n              style={{ minHeight: \"300px\" }}\n            ></textarea>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Essay;\n","import React from \"react\";\nimport { MdArrowBack, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { RiCheckboxCircleFill } from \"react-icons/ri\";\nimport {\n  MatchingQuestionAnswerInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces\";\n\ninterface MatchingSelectProps {\n  selectedAnswer: MatchingQuestionAnswerInterface;\n  selectedStatus: string | null;\n  selectedQuestionAnswer: {\n    question_id: string;\n    answers: MatchingQuestionAnswerInterface[];\n    shuffledAnswers: MatchingQuestionAnswerInterface[];\n  };\n  checkAnswer: (item: MatchingQuestionAnswerInterface) => boolean;\n  addAnswer: (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => void;\n  closeWindow: (status: boolean) => void;\n  findWord: (lang: QuestionLanguage, status: string | false) => string;\n  selectedLanguage: QuestionLanguage;\n  checkIfSelected: (x: string) => any;\n}\n\nconst MatchingSelect = (props: MatchingSelectProps) => {\n  return (\n    // <div className=\"\">\n    <div className=\"bg-gray-200 rounded-b animate__animated animate__fadeInUp animate__faster -mx-2 mt-2\">\n      <div className=\"text-lg font-bold px-3 pt-2 flex flex-row items-center justify-between\">\n        <div className=\"flex flex-row items-center gap-3\">\n          <div\n            title=\"Click to close this window\"\n            onClick={() => props.closeWindow(false)}\n            className=\"h-10 w-10 text-center bg-gray-50 border border-white hover:border-blue-400 text-gray-900 rounded-full flex items-center justify-center cursor-pointer hover:bg-blue-100 hover:text-blue-700\"\n          >\n            <MdArrowBack className=\"text-2xl\" />\n          </div>\n          <span className=\"text-gray-800\">Choose correct matching</span>\n        </div>\n      </div>\n      <div className=\"bg-gray-200 p-2 mx-0\">\n        {props.selectedQuestionAnswer.shuffledAnswers.map((item, i) => (\n          <div\n            key={i + 1}\n            onClick={() => {\n              props.addAnswer(\n                {\n                  id: props.selectedAnswer.id,\n                  value: props.selectedAnswer.value,\n                  status: item.status,\n                },\n                props.selectedQuestionAnswer.question_id\n              );\n              props.closeWindow(false);\n            }}\n            className={`${\n              item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              )\n                ? \"border-2 border-white bg-blue-100 font-bold text-blue-700\"\n                : \"border text-gray-500 hover:text-gray-900 hover:font-extrabold\"\n            } cursor-pointer rounded bg-white hover:bg-blue-50 hover:border-white p-3 mb-2 flex flex-row items-center gap-3`}\n          >\n            <div>\n              {item.status ===\n              props.findWord(\n                props.selectedLanguage,\n                props.checkIfSelected(props.selectedAnswer.id)\n              ) ? (\n                <RiCheckboxCircleFill className=\"text-3xl text-blue-600\" />\n              ) : (\n                <MdRadioButtonUnchecked className=\"text-3xl\" />\n              )}\n            </div>\n            <div dangerouslySetInnerHTML={{ __html: item.status }}></div>\n          </div>\n        ))}\n      </div>\n    </div>\n    // </div>\n  );\n};\n\nexport default MatchingSelect;\n","import React, { useEffect, useState } from \"react\";\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport {\n  MatchingQuestionAnswerInterface,\n  MatchingStatuses,\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../../interfaces/question\";\nimport MatchingSelect from \"./MatchingSelect\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\n\ninterface MatchingProps {\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: MatchingQuestionAnswerInterface[] | undefined;\n    shuffledAnswers: MatchingQuestionAnswerInterface[] | undefined;\n    selectedAns: QuestionAnswerInterface;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n}\n\nconst Matching = (props: MatchingProps) => {\n  const [displayWindow, setDisplayWindow] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] =\n    useState<MatchingQuestionAnswerInterface | null>(null);\n  const addAnswerItemFn = (\n    newAnswers: MatchingQuestionAnswerInterface[],\n    questionAnswer: QuestionAnswerInterface\n  ) => {\n    if (props.selectedQuestionAnswer.question_id !== null) {\n      props.answerQuestionFn({\n        question_id: props.selectedQuestionAnswer.question_id,\n        status: false,\n        answers: [\n          {\n            _id: questionAnswer._id,\n            reference: questionAnswer.reference,\n            answer: newAnswers,\n          },\n        ],\n      });\n    }\n  };\n\n  const checkAnswer = (item: MatchingQuestionAnswerInterface): boolean => {\n    let res = false;\n    if (props.available_answers.length > 0) {\n      let check = props.available_answers.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n      if (check !== undefined) {\n        let checkA = check.answers.find(\n          (tes) =>\n            tes.reference === props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (checkA !== undefined) {\n          let x = checkA.answer.find((itm) => itm.id === item.id);\n          if (x !== undefined && x.status !== \"\") {\n            res = true;\n          }\n        }\n      }\n    }\n    return res;\n  };\n\n  const addAnswer = (\n    item: MatchingQuestionAnswerInterface,\n    question_id: string | null\n  ) => {\n    let oldAnswers = props.available_answers.find(\n      (itm) => itm.question_id === question_id\n    );\n    if (oldAnswers !== undefined) {\n      let selAns = oldAnswers.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let x of selAns.answer) {\n          if (x.id === item.id) {\n            newAnswers = [\n              ...newAnswers,\n              {\n                id: item.id,\n                value: item.value,\n                status: item.status,\n              },\n            ];\n          } else {\n            newAnswers = [...newAnswers, x];\n          }\n        }\n        addAnswerItemFn(newAnswers, selAns);\n      }\n    }\n  };\n\n  useEffect(() => {\n    let test = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (\n      test === undefined ||\n      (test !== undefined && test.answers[0].answer.length === 0)\n    ) {\n      if (\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer !== undefined &&\n        props.selectedQuestionAnswer.question_id !== null\n      ) {\n        let newAnswers: MatchingQuestionAnswerInterface[] = [];\n        for (let a of props.selectedQuestionAnswer.answers) {\n          newAnswers = [\n            ...newAnswers,\n            {\n              id: a.id,\n              value: a.value,\n              status: \"\",\n            },\n          ];\n        }\n        props.selectedQuestionAnswer.question !== undefined &&\n          props.answerQuestionFn({\n            question_id: props.selectedQuestionAnswer.question_id,\n            status: true,\n            answers: [\n              {\n                _id: props.selectedQuestionAnswer.selectedAns._id,\n                reference: props.selectedQuestionAnswer.selectedAns.reference,\n                answer: newAnswers,\n              },\n            ],\n          });\n      }\n    }\n  }, [props]);\n\n  const checkAnswerStatus = (\n    selectedQuestionId: string,\n    selectedLang: QuestionLanguage,\n    ansi: MatchingQuestionAnswerInterface\n  ) => {\n    if (props.selectedExam !== null) {\n      let testing = props.selectedExam.questions.find(\n        (test) => test.question_id === selectedQuestionId\n      );\n      if (testing !== undefined) {\n        for (let lang of QuestionLanguages) {\n          let testLang = testing.question.find(\n            (itm) => itm.language === lang.key\n          );\n          if (testLang !== undefined) {\n            let checkE = testLang.answers.find(\n              (tes) =>\n                tes.reference ===\n                props.selectedQuestionAnswer.selectedAns.reference\n            );\n            if (checkE !== undefined) {\n              let testAnswerLang = checkE.answer.find(\n                (it) => it.status.toString() === ansi.status\n              );\n              if (testAnswerLang !== undefined) {\n                return testAnswerLang.status.toString();\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const checkIfSelected = (x: string) => {\n    let temp = props.available_answers.find(\n      (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n    );\n    if (temp !== undefined) {\n      let selAns = temp.answers.find(\n        (tester) =>\n          tester.reference ===\n          props.selectedQuestionAnswer.selectedAns.reference\n      );\n      if (selAns !== undefined) {\n        let ans = selAns.answer.find((itm) => itm.id === x);\n        if (ans !== undefined && ans.status !== \"\") {\n          if (props.selectedQuestionAnswer.question_id !== null) {\n            return checkAnswerStatus(\n              props.selectedQuestionAnswer.question_id,\n              props.selectedLanguage,\n              ans\n            );\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const ReturnMatchingStatus = (): MatchingStatuses[] => {\n    let res: MatchingStatuses[] = [];\n    let question: QuestionInterface | undefined =\n      props.selectedExam?.questions.find(\n        (itm) => itm.question_id === props.selectedQuestionAnswer.question_id\n      );\n    if (question !== undefined) {\n      for (let item of question.question) {\n        let selAns = item.answers.find(\n          (tester) =>\n            tester.reference ===\n            props.selectedQuestionAnswer.selectedAns.reference\n        );\n        if (selAns !== undefined) {\n          for (let ans of selAns.answer) {\n            res = [\n              ...res,\n              {\n                id: ans.id,\n                lang: item.language,\n                status: ans.status.toString(),\n              },\n            ];\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return res;\n  };\n\n  const findWord = (lang: QuestionLanguage, status: string | false) => {\n    let res: string = \"\";\n    let arr: MatchingStatuses[] = ReturnMatchingStatus();\n    if (arr.length > 0) {\n      let item = arr.find((itm) => itm.status === status)?.id;\n      if (item !== undefined) {\n        let newItem = arr.find(\n          (itm) => itm.id === item && itm.lang === lang\n        )?.status;\n        if (newItem !== undefined) {\n          res = newItem;\n        }\n      }\n    }\n    return res;\n  };\n\n  const translateClass = \" transform rotate-90\";\n\n  return (\n    <div className=\"\">\n      {props.selectedQuestionAnswer !== null &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.selectedQuestionAnswer.answers.map((item, i) => (\n          <div\n            key={i + 1}\n            className={`${\n              checkAnswer(item) === true\n                ? \"px-2 mb-2 py-2 md:py-0\"\n                : \"px-2 py-2\"\n            } ${checkAnswer(item) === true ? \"border rounded\" : \"border-b\"} ${\n              checkAnswer(item) === true ? \"text-blue-600 border-blue-200\" : \"\"\n            } grid grid-cols-12`}\n          >\n            <div\n              className={`col-span-12 ${\n                checkAnswer(item) === true ? \"md:col-span-6\" : \"md:col-span-8\"\n              } flex flex-row items-center gap-2`}\n            >\n              {checkAnswer(item) === true ? (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center w-8 h-8 bg-gray-100 text-gray-500 text-xl font-normal rounded-full\">\n                  {i + 1}\n                </div>\n              )}\n              <div\n                dangerouslySetInnerHTML={{ __html: item.value }}\n                className={`ml-2 ${\n                  selectedAnswer !== null &&\n                  selectedAnswer.id === item.id &&\n                  displayWindow === true\n                    ? \"text-blue-600 font-extrabold\"\n                    : \"text-gray-600\"\n                }`}\n              ></div>\n            </div>\n            {checkAnswer(item) === true ? (\n              <div\n                title=\"Click to change selected choice\"\n                onClick={() => {\n                  setSelectedAnswer(item);\n                  setDisplayWindow(!displayWindow);\n                }}\n                className=\"flex flex-row items-center gap-2 col-span-12 md:col-span-6 cursor-pointer md:hover:bg-blue-50 py-4 pr-2 -mr-2 rounded-r md:pl-4 md:border-l border-blue-200\"\n              >\n                <BsFillCaretRightFill\n                  className={`text-xl transition transform${\n                    selectedAnswer !== null &&\n                    selectedAnswer.id === item.id &&\n                    displayWindow === true\n                      ? translateClass\n                      : \"\"\n                  }`}\n                />\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: findWord(\n                      props.selectedLanguage,\n                      checkIfSelected(item.id)\n                    ),\n                  }}\n                ></div>\n              </div>\n            ) : (\n              <div className=\"col-span-12 md:col-span-4 flex items-center md:justify-start mt-2 md:mt-0\">\n                <div\n                  onClick={() => {\n                    setSelectedAnswer(item);\n                    setDisplayWindow(!displayWindow);\n                  }}\n                  title={\n                    checkAnswer(item) === true\n                      ? \"Click to change selected choice\"\n                      : \"Click to choose correct matching\"\n                  }\n                  className={`btn text-sm ${\n                    checkAnswer(item) === true ||\n                    (selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true)\n                      ? \"bg-blue-50\"\n                      : \"bg-yellow-100 hover:bg-yellow-200\"\n                  } text-center cursor-pointer`}\n                >\n                  {checkAnswer(item) === true\n                    ? findWord(props.selectedLanguage, checkIfSelected(item.id))\n                    : selectedAnswer !== null &&\n                      selectedAnswer.id === item.id &&\n                      displayWindow === true\n                    ? \"Close matching list\"\n                    : \"Choose matching\"}\n                </div>\n              </div>\n            )}\n            <div className=\"col-span-12 md:col-span-12\">\n              {props.selectedQuestionAnswer.question_id !== null &&\n                props.selectedQuestionAnswer.answers !== undefined &&\n                props.selectedQuestionAnswer.shuffledAnswers !== undefined &&\n                selectedAnswer !== null &&\n                displayWindow === true &&\n                selectedAnswer.id === item.id && (\n                  <MatchingSelect\n                    selectedAnswer={selectedAnswer}\n                    selectedStatus={null}\n                    selectedQuestionAnswer={{\n                      question_id: props.selectedQuestionAnswer.question_id,\n                      answers: props.selectedQuestionAnswer.answers,\n                      shuffledAnswers:\n                        props.selectedQuestionAnswer.shuffledAnswers,\n                    }}\n                    checkAnswer={checkAnswer}\n                    addAnswer={addAnswer}\n                    closeWindow={setDisplayWindow}\n                    findWord={findWord}\n                    selectedLanguage={props.selectedLanguage}\n                    checkIfSelected={checkIfSelected}\n                  />\n                )}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Matching;\n","import React from 'react'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { schoolLevelsStoreInterface } from '../../../../actions/school_levels'\n\ninterface SchoolLevelSelectProps {\n  schoolLevels: schoolLevelsStoreInterface;\n  school_levels: string[];\n  setSchool_levels: (item: string[]) => void;\n  loading: boolean;\n}\n\nconst SchoolLevelSelect = (props: SchoolLevelSelectProps) => {\n  return (\n    <div className=\"rounded flex flex-col gap-2 overflow-y-auto border pb-3 px-3\" style={{height: '80vh'}}>\n      <div className=\"flex flex-row items-center gap-2\">\n        <span className=\"text-sm text-gray-600 font-bold mt-2 mb-1\">Choose school level</span><span className=\"text-xs text-gray-500 italic mt-2 mb-1\">(Optional)</span>\n      </div>\n      {props.schoolLevels.school_levels?.map((item, i) => (\n        <div onClick={() => props.loading === false && props.setSchool_levels(props.school_levels.find(itm => itm === item.school_level_id) ? props.school_levels.filter(x => x !== item.school_level_id) :[...props.school_levels, item.school_level_id])} key={i + 1}className={`flex flex-row items-center gap-3 p-3 rounded cursor-pointer ${props.school_levels.find(itm => itm === item.school_level_id) ? \"bg-blue-50 text-blue-600\" : props.loading === true ? \"bg-gray-100 text-gray-400\" : \"bg-gray-100 text-gray-600\"} ${props.loading === true ? \"hover:bg-gray-100 hover:text-gray-400\" : \"hover:bg-blue-100 hover:text-blue-600\"}`}>\n          {props.school_levels.find(itm => itm === item.school_level_id) ?\n          <ImCheckboxChecked className=\"text-3xl\" /> :\n          <ImCheckboxUnchecked className=\"text-3xl\" />}\n          <div className=\"flex flex-col gap-0\">\n            <span className=\"font-extrabold text-lg\">{item.school_level_name}</span>\n            <span className=\"text-xs -mt-1\">{item.description}</span>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default SchoolLevelSelect\n","import { useState } from \"react\";\nimport * as Interfaces from \"../../../../interfaces/index\";\nimport { FiChevronDown, FiChevronRight } from \"react-icons/fi\";\nimport { searchItem } from \"../ApplicationPositions\";\n\ninterface SchoolLevelsItemPropsInterface {\n  educationCategoryDetails: Interfaces.education_category;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (\n    educationCategory: Interfaces.education_category | null,\n    schoolLevel: Interfaces.school_level | null\n  ) => void;\n}\n\nconst SchoolLevelsItem = (\n  props: SchoolLevelsItemPropsInterface\n): JSX.Element => {\n  const [levelsDropDown, setLevelsDropDown] = useState<boolean>(false);\n  const initializeItem = (levelsDropDown: boolean, props: any) => {\n    if (\n      (props.searchLevel !== null && props.searchLevel.schoolLevel === null) ||\n      (props.searchLevel !== null &&\n        props.educationCategoryDetails.education_institute_id !==\n          props.searchLevel.educationCategory.education_institute_id) ||\n      props.setSearchLevel === null\n    ) {\n      levelsDropDown === false && props.setSearchLevel(null, null);\n      levelsDropDown === false &&\n        props.setSearchLevel(props.educationCategoryDetails, null);\n    }\n  };\n  const activateItem = (levelsDropDown: boolean, props: any) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(props.educationCategoryDetails, null);\n  };\n  const activateLevelItem = (\n    educationCate: Interfaces.education_category,\n    item: Interfaces.school_level\n  ) => {\n    props.setSearchLevel(null, null);\n    props.setSearchLevel(educationCate, item);\n  };\n  return (\n    <div className=\"flex flex-col\">\n      <div\n        onClick={() => {\n          setLevelsDropDown(!levelsDropDown);\n          initializeItem(levelsDropDown, props);\n        }}\n        className=\"flex flex-row justify-between items-center py-2 px-2 bg-blue-100 rounded cursor-pointer hover:bg-blue-200 mb-2\"\n      >\n        <div className=\"flex flex-col pl-1\">\n          <span className=\"uppercase text-blue-600 text-lg font-bold\">\n            {props.educationCategoryDetails.education_category_title}\n          </span>\n          <span className=\"text-xs\">\n            {props.educationCategoryDetails.description}\n          </span>\n        </div>\n        <div className=\"px-1 py-1 rounded-full flex items-center justify-center cursor-pointer text-blue-600 bg-blue-100 hover:bg-white hover:text-blue-800\">\n          {levelsDropDown === false ? (\n            <FiChevronRight className=\"text-2xl\" />\n          ) : (\n            <FiChevronDown className=\"text-2xl\" />\n          )}\n        </div>\n      </div>\n      {levelsDropDown === true && (\n        <div className=\"flex flex-col\">\n          <div\n            onClick={() => activateItem(levelsDropDown, props)}\n            className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n              props.searchLevel !== null &&\n              props.searchLevel.educationCategory !== null &&\n              props.searchLevel.educationCategory.education_institute_id ===\n                props.educationCategoryDetails.education_institute_id &&\n              props.searchLevel.schoolLevel === null\n                ? \"border-blue-500\"\n                : \"border-blue-100\"\n            } hover:border-blue-500`}\n          >\n            <div className=\"flex flex-col pl-1\">\n              <span className=\"text-blue-700 text-sm font-bold\">\n                All levels\n              </span>\n            </div>\n          </div>\n          {/* {console.log(\"Institute: \", props.educationCategoryDetails)} */}\n          {props.schoolLevels === null\n            ? \"Loading...\"\n            : props.schoolLevels.length === 0\n            ? \"No levels found\"\n            : props.schoolLevels.map(\n                (item, i) =>\n                  item.education_institute.find(\n                    (itm) =>\n                      itm ===\n                      props.educationCategoryDetails.education_institute_id\n                  ) && (\n                    <div\n                      onClick={() =>\n                        activateLevelItem(props.educationCategoryDetails, item)\n                      }\n                      key={i + 1}\n                      className={`flex flex-row justify-between items-center py-2 px-2 bg-blue-50 rounded cursor-pointer hover:bg-blue-50 mb-2 ml-5 border ${\n                        props.searchLevel !== null &&\n                        props.searchLevel.schoolLevel !== null &&\n                        props.searchLevel.schoolLevel === item &&\n                        props.searchLevel.educationCategory !== null &&\n                        props.searchLevel.educationCategory\n                          .education_institute_id ===\n                          props.educationCategoryDetails.education_institute_id\n                          ? \"border-blue-500\"\n                          : \"border-blue-100\"\n                      } hover:border-blue-500`}\n                    >\n                      <div className=\"flex flex-col pl-1\">\n                        <span className=\"text-blue-700 text-sm font-bold\">\n                          {item.school_level_name}\n                        </span>\n                      </div>\n                    </div>\n                  )\n              )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchoolLevelsItem;\n","import SchoolLevelsItem from './SchoolLevelsItem'\nimport * as Interfaces from '../../../../interfaces/index';\nimport { searchItem } from '../ApplicationPositions';\nimport Loading from '../../../../components/Loading/Loading';\n\ninterface SchoolLevelsFilterPropsInterface {\n  educationCategories: Interfaces.education_category[] | null;\n  schoolLevels: Interfaces.school_level[] | null;\n  searchLevel: searchItem | null;\n  setSearchLevel: (educationCategory: Interfaces.education_category | null, schoolLevel: Interfaces.school_level | null) => void\n  setSchoolLevelFilterFn: (status: boolean) => void;\n}\n\nconst SchoolLevelsFilter = (props: SchoolLevelsFilterPropsInterface) => {\n  return (\n    <div className=\"col-span-12 md:col-span-4 md:static w-full top-2\">\n      <div className=\"bg-white shadow rounded-sm px-2 py-2\">\n        {console.log(props.educationCategories)}\n        {props.educationCategories === null ? <Loading /> :\n        props.educationCategories.length === 0 ? \"No Education categories available\" :\n        props.educationCategories.map((item, i) => (\n          <SchoolLevelsItem \n            key={i + 1} educationCategoryDetails={item} \n            schoolLevels={props.schoolLevels}\n            searchLevel={props.searchLevel}\n            setSearchLevel={props.setSearchLevel}\n            />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SchoolLevelsFilter\n","import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      {\n        editMode === false ? (\n          <div\n            onClick={() =>\n              props.select === true && props.callBack(props.question)\n            }\n            className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n              props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n            } hover:border-blue-600 mb-3`}\n          >\n            <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n              <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n                <div>\n                  {props.select === false ? (\n                    <div className=\"font-bold text-blue-600\">\n                      ({props.number})\n                    </div>\n                  ) : props.status === true ? (\n                    <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n                  ) : (\n                    <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className=\"text-xs text-blue-600 font-bold w-max\">\n                    {props.questionTypes.questionTypes &&\n                      props.questionTypes.questionTypes.find(\n                        (itm) => itm.id && itm.id === props.question.type\n                      )?.title}\n                  </span>\n                  <span className=\"font-bold\">\n                    {props.question.question[0].title}\n                  </span>\n                  <div\n                    className=\"w-full text-xs\"\n                    dangerouslySetInnerHTML={{\n                      __html: props.question.question[0].description,\n                    }}\n                  ></div>\n                </div>\n              </div>\n              {props.select === false && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => setSelectedQuestion(props.question)}\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() => setEditMode(true)}\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.select === false && props.callBack(props.question)\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          // <Modal\n          //   title=\"\"\n          //   backDrop={true}\n          //   theme={Themes.default}\n          //   close={() => setEditMode(false)}\n          //   backDropClose={true}\n          //   widthSizeClass={ModalSize.extraLarge}\n          //   displayClose={false}\n          //   padding={{ title: false }}\n          // >\n          <div className=\"pt-0 fixed top-0 z-50 left-0 h-full overflow-scroll animate__animated animate__zoomIn shadow-xl bg-white w-full\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        )\n        // </Modal>\n      }\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  SubQuestionInterface,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\n\n// All question types except Embedded and Hybrid\n\ninterface AnswersTypesCollectionProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n  item: SubQuestionInterface;\n  hybrid: boolean;\n}\n\nconst AnswersTypesCollection = (props: AnswersTypesCollectionProps) => {\n  return (\n    <div>\n      {/* TrueFalse */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.TrueFalse &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <TrueFalse\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toTrueFalse(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.Calculated ||\n          props.item.typeShort === QuestionForHybrid.SimpleCalculate) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <SimpleCalculated\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toSimpleCalculated(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        (props.item.typeShort === QuestionForHybrid.SingleMultiple ||\n          props.item.typeShort === QuestionForHybrid.MultipleChoice) &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <MultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Calculated MultipleChoice */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.CalculatedMultipleChoice &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <CalculatedMultipleChoice\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toCalculatedMultipleChoice(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n\n      {/* Matching */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Matching &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Matching\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toMatching(itm.answer),\n                shuffledAnswers: Shuffle(toMatching(itm.answer)),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n              selectedExam={props.selectedExam}\n              selectedLanguage={props.selectedLanguage}\n            />\n          ))}\n      {/* Esssay */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Essay &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Essay\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toEssay(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* Numerical */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.Numeric &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <Numerical\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toNumerical(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n      {/* ShortAnswer */}\n      {props.wholeQuestion !== undefined &&\n        props.selectedQuestionAnswer.answers !== undefined &&\n        props.item.typeShort === QuestionForHybrid.ShortAnswer &&\n        props.selectedQuestionAnswer.answers\n          .filter((test) => test.reference === props.item.reference)\n          .map((itm, i) => (\n            <ShortAnswer\n              key={i + 1}\n              type={props.type}\n              available_answers={props.available_answers}\n              selectedQuestionAnswer={{\n                question_id: props.selectedQuestionAnswer.question_id,\n                question: props.selectedQuestionAnswer.question,\n                answers: toShortAnswer(itm.answer),\n                selectedAns: itm,\n              }}\n              answerQuestionFn={props.answerQuestionFn}\n            />\n          ))}\n    </div>\n  );\n};\n\nexport default AnswersTypesCollection;\n","import React, { useEffect } from \"react\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../../../actions\";\nimport {\n  MultipleChoiceQuestionAnswerInterface,\n  QuestionAnswerInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n} from \"../../../../interfaces/question\";\nimport {\n  questionTypeElementsType,\n  QuestionForHybrid,\n} from \"@mastrecruit/common\";\nimport Hybrid from \"./Hybrid\";\nimport TrueFalse from \"./TrueFalse\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"../ConvertingAnswers\";\nimport SimpleCalculated from \"./SimpleCalculated\";\nimport MultipleChoice from \"./MultipleChoice\";\nimport CalculatedMultipleChoice from \"./CalculatedMultipleChoice\";\nimport Matching from \"./Matching\";\nimport { Shuffle } from \"../../../../utils/functions\";\nimport { CandidateExam } from \"../../../../interfaces/exam\";\nimport Essay from \"./Essay\";\nimport Numerical from \"./Numerical\";\nimport ShortAnswer from \"./ShortAnswer\";\nimport AnswersTypesCollection from \"./AnswersTypesCollection\";\n\ninterface HybridProps {\n  type: questionTypeElementsType | null;\n  available_answers: QuestionAnswersStore[];\n  selectedQuestionAnswer: {\n    question_id: string | null;\n    question: QuestionItemInterface | undefined;\n    answers: QuestionAnswerInterface[] | undefined;\n  };\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  wholeQuestion: QuestionItemInterface | undefined;\n  selectedExam: CandidateExam | null;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst HybridAnswers = (props: HybridProps) => {\n  let str = \"a\";\n  // useEffect(() => {\n  //   if (props.selectedQuestionAnswer.question_id !== null) {\n  //     // Check if question is already there in answersList\n  //     let checkAnswerAvail = props.available_answers.find(\n  //       (item) => item.question_id === props.selectedQuestionAnswer.question_id\n  //     );\n  //     if (props.wholeQuestion !== undefined) {\n  //       let answersRes: QuestionAnswerInterface[] = [];\n  //       if (checkAnswerAvail === undefined) {\n  //         answersRes = props.wholeQuestion.answers;\n  //       } else {\n  //         for (let newAns of props.wholeQuestion.answers) {\n  //           if (\n  //             checkAnswerAvail.answers.find(\n  //               (item) => item._id === newAns._id\n  //             ) === undefined\n  //           ) {\n  //             console.log(\"Ans not duplicted: \", newAns);\n  //             answersRes = [\n  //               ...answersRes,\n  //               {\n  //                 _id: newAns._id,\n  //                 reference: newAns.reference,\n  //                 answer: [],\n  //               },\n  //             ];\n  //           }\n  //         }\n  //       }\n  //       props.answerQuestionFn({\n  //         question_id: props.selectedQuestionAnswer.question_id,\n  //         status: false, //Check if submitted online\n  //         answers: answersRes,\n  //       });\n  //     }\n  //   }\n  // }, [props]);\n  return (\n    <div>\n      {props.wholeQuestion !== undefined &&\n        props.wholeQuestion.sub_question.length > 0 &&\n        props.wholeQuestion.sub_question.map((item, i) => {\n          let stri = String.fromCharCode(str.charCodeAt(str.length - 1) + i);\n          return (\n            <div\n              title=\"Click to choose this option\"\n              key={i + 1}\n              className={`px-2 py-2\n             bg-white\n            rounded mb-2`}\n            >\n              <div className=\"flex flex-row items-center w-full gap-2 mb-2\">\n                <div>\n                  <div className=\"flex items-center justify-center h-8 w-8 rounded-full bg-gray-100 border border-gray-400 font-bold\">\n                    {stri}\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center justify-between w-full gap-2\">\n                  <div className=\"font-bold\">{item.description}</div>\n                  <div>\n                    <div className=\"bg-blue-100 text-blue-600 px-3 py-1 rounded-full font-bold\">\n                      {item.marks} marks\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"border-t px-2 py-2\">\n                <AnswersTypesCollection\n                  type={props.type}\n                  available_answers={props.available_answers}\n                  selectedQuestionAnswer={props.selectedQuestionAnswer}\n                  answerQuestionFn={props.answerQuestionFn}\n                  wholeQuestion={props.wholeQuestion}\n                  selectedExam={props.selectedExam}\n                  selectedLanguage={props.selectedLanguage}\n                  item={item}\n                  hybrid={true}\n                />\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default HybridAnswers;\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n\nexport interface ExamItemResponseFull {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  course_id: string;\n  course_code: string;\n  course_name: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      this.props.prepareExam.examsList === null ||\n      this.props.prepareExam.examsList.length === 0\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.setLoading\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) =>\n              itm.period === this.props.periods.selected_period?.session_plan_id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                preparedExams={this.props.prepareExam.examsList}\n                selected_course_id={\n                  this.props.course.selected_course &&\n                  this.props.course.selected_course.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => {\n              if (\n                this.props.periods.selected_period !== null &&\n                this.props.periods.selected_period.is_active === true\n              ) {\n                this.setState({ selectPeriod: false });\n              } else {\n                alert(\"Please choose active session\");\n              }\n            }}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Confirm exam preparation\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.submitExamPreparation()}\n                  className=\"btn bg-blue-600 text-white cursor-pointer\"\n                >\n                  Submit exam\n                </div>\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n})(_PrepareExam);\n","import React from \"react\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title:\n        props.actionType === PrepareActionTypes.Prepare\n          ? \"Prepare questions\"\n          : \"Edit questions\",\n      description: \"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    },\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session: {props.periods.selected_period.session_plan_name}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => props.setSelectCourse(true)}\n                    className={`btn ${\n                      props.course.selected_course === null\n                        ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                        : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                    } h-max flex items-center justify-center cursor-pointer py-2`}\n                  >\n                    {props.course.selected_course === null\n                      ? \"Choose course\"\n                      : \"Change course\"}\n                  </div>\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addEditExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../../interfaces/question\";\nimport NoResult, {\n  NoResultThemes,\n} from \"../../../components/NoResult/NoResult\";\nimport Questions from \"../../../components/Questions/Questions\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport QuestionItem from \"../../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../../interfaces/application\";\nimport ApplicationPeriods from \"../../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../../components/Alert/Alert\";\nimport {\n  ExamItemResponse,\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport EditQuestion from \"../../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"../PrepareExamSteps\";\nimport Switch from \"../../../components/Switch/Switch\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { PrepareActionTypes } from \"../PrepareExam\";\nimport { DATE_DATA, validateTwoTime } from \"../../../utils/functions\";\nimport { ExamTimeStatus, validateExamDate } from \"../../../utils/question_bank\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addEditExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  selectedExam: ExamItemResponse;\n  setSelectedExam: (exam: ExamItemResponse | null) => void;\n  findExamDetails: (\n    exam_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setLoadingProps: (state: boolean) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  submitExam: boolean;\n}\n\nclass _EditExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: this.props.selectedExam.questions_per_page,\n      exam_date: this.props.selectedExam.exam_date,\n      start_time: this.props.selectedExam.start_time,\n      end_time: this.props.selectedExam.end_time,\n      duration_hours: (this.props.selectedExam.duration / 60) | 0,\n      duration_minutes: this.props.selectedExam.duration % 60,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: this.props.selectedExam.discription,\n      termes: this.props.selectedExam.termes,\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step2,\n      proctoringRules: [\n        {\n          rule: \"right_click_enabled\",\n          status: this.props.selectedExam.rules.right_click_enabled,\n          caption: \"Enable right click\",\n        },\n        {\n          rule: \"copy_enabled\",\n          status: this.props.selectedExam.rules.copy_enabled,\n          caption: \"Enable copy\",\n        },\n        {\n          rule: \"paste_enabled\",\n          status: this.props.selectedExam.rules.paste_enabled,\n          caption: \"Enable paste\",\n        },\n        {\n          rule: \"stop_candidate_when_comeback\",\n          status: this.props.selectedExam.rules.stop_candidate_when_comeback,\n          caption: \"Enable Candidate when coming back\",\n        },\n        {\n          rule: \"allow_to_leave_browser\",\n          status: this.props.selectedExam.rules.allow_to_leave_browser,\n          caption: \"Enable to leave browser\",\n        },\n      ],\n      submitExam: false,\n    };\n  }\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      this.props.addEditExamQuestion(question);\n    } else {\n      alert(\n        \"You can not add questions while its time has ended or being done!\"\n      );\n    }\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      validateExamDate(\n        this.props.selectedExam.exam_date,\n        this.props.selectedExam.start_time,\n        this.props.selectedExam.end_time\n      ) === ExamTimeStatus.Waiting\n    ) {\n      if (\n        window.confirm(\n          \"Are you sure do you want to remove question from the exam questions paper?\"\n        ) === true\n      ) {\n        this.props.addEditExamQuestion(question);\n      }\n    } else {\n      alert(\n        \"You can not remove questions while its time has ended or being done!\"\n      );\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.selectedCourse === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        });\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.selectedCourse === null) {\n        return false;\n      }\n      if (\n        this.props.prepareExam.selectedExam === null ||\n        this.props.prepareExam.selectedExam.questions.length === 0\n      ) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = true;\n    // if (\n    //   this.props.prepareExam.selectedExam === null ||\n    //   this.props.prepareExam.selectedExam.questions.length !== 0\n    // ) {\n    //   conf = window.confirm(\n    //     \"Are you sure do you want to change course? You will loose your selected questions\"\n    //   );\n    // }\n    if (this.props.prepareExam.selectedExam !== null && conf === true) {\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (\n      this.props.prepareExam.selectedExam == null ||\n      this.props.prepareExam.selectedExam.questions.length === 0 ||\n      this.props.course.selected_course === null\n    ) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.selectedCourse === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.selectedExam === null ||\n      this.props.prepareExam.selectedExam.questions.length === 0\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n    this.setState({ loading: true });\n    try {\n      await axios.put(`${API.QBank}/exam/${this.props.selectedExam.id}`, {\n        period: this.props.periods.selected_period.session_plan_id,\n        course: this.props.selectedCourse.course_id,\n        questions: this.examQuestionsIds(\n          this.props.prepareExam.selectedExam.questions\n        ),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.selectedExam.questions) {\n        this.props.addEditExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period.session_plan_id,\n          this.props.setLoadingProps\n        );\n      } else {\n        this.props.auth.application_session &&\n          this.props.loadExamsListByPeriod(\n            this.props.auth.application_session.session_plan_id,\n            this.props.setLoadingProps\n          );\n      }\n      this.setState({ redirectToExams: true });\n      this.props.setSelectedExam(null);\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has updated successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.selectedCourse === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (\n      this.props.course.courses !== null &&\n      this.props.course.selected_course === null\n    ) {\n      let myCourse = this.props.course.courses.find(\n        (itm) => itm.course_id === this.props.selectedExam.course\n      );\n      if (myCourse !== undefined) {\n        this.props.setSelectedCourse(myCourse);\n        this.chooseCourse(myCourse);\n      }\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n    if (this.props.selectedCourse !== null) {\n      this.props.findExamDetails(this.props.selectedExam.id, this.setLoading);\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    this.props.setSelectedPeriod(period);\n    this.props.loadExamsListByPeriod(period.session_plan_id, this.setLoading);\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.EditExam}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={DATE_DATA(this.state.exam_date, \"YYYY-MM-DD\")}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option value={item} key={i + 1}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-blue-600 text-lg\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.props.prepareExam.selectedExam !== null &&\n                            this.findTotalMarks(\n                              this.props.prepareExam.selectedExam.questions\n                            )}\n                        </span>\n                        {validateExamDate(\n                          this.props.selectedExam.exam_date,\n                          this.props.selectedExam.start_time,\n                          this.props.selectedExam.end_time\n                        ) === ExamTimeStatus.Waiting && (\n                          <div\n                            onClick={() =>\n                              this.props.selectedCourse === null\n                                ? this.setState({ selectCourse: true })\n                                : this.setState({ addQuestionModal: true })\n                            }\n                            className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                          >\n                            <MdAdd className=\"text-2xl\" /> Add question\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.selectedExam === null ? (\n                        <div>Loading...</div>\n                      ) : this.props.prepareExam.selectedExam.questions\n                          .length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.selectedExam.questions.map(\n                          (item, i) => (\n                            <QuestionItem\n                              key={i + 1}\n                              question={item}\n                              callBack={this.removeToQuestionPaper}\n                              status={true}\n                              questionTypes={this.props.questionTypes}\n                              select={false}\n                              number={i + 1}\n                              questionsList={\n                                this.props.prepareExam.selectedExam!.questions\n                              }\n                            />\n                          )\n                        )\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <button\n                      onClick={() => this.props.setSelectedExam(null)}\n                      type=\"button\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </button>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to questions\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true && (\n          <Modal\n            title=\"Choose course\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectCourse: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"-mt-2\">\n              <Courses\n                setSelectedCourse={this.chooseCourse}\n                selected_course_id={\n                  this.props.selectedCourse &&\n                  this.props.selectedCourse.course_id\n                }\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title=\"Add exam questions\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.selectedCourse === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.selectedCourse}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true && (\n          <Modal\n            title=\"Choose a period\"\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ selectPeriod: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            <div className=\"px-2 mt-6\">\n              <ApplicationPeriods\n                applicationPeriods={this.props.periods.applicationPeriods}\n                setSelectedPeriod={this.GetExamsByPeriod}\n                showPeriodFilter={this.showPeriodFilter}\n              />\n            </div>\n          </Modal>\n        )}\n        {this.state.submitExam === true && (\n          <Modal\n            title={\n              <div className=\"text-blue-600 font-bold text-xl\">\n                Editing Exam\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ submitExam: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.large}\n            displayClose={true}\n            padding={{ title: true, body: true }}\n          >\n            <div className=\"mb-3 -mt-6\">\n              <div className=\"md:col-span-12 flex flex-col\">\n                <div className=\"bg-gray-100 rounded p-4\">\n                  <span className=\"text-gray-900 text-lg font-bold\">\n                    Exam proctoring rules\n                  </span>\n                  <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                    {this.state.proctoringRules.map((item, i) => (\n                      <div\n                        key={i + 1}\n                        className={`flex flex-row items-center justify-between ${\n                          this.state.proctoringRules.length === i + 1\n                            ? \"\"\n                            : \"border-b\"\n                        } ${\n                          item.status === true\n                            ? \"text-blue-600 font-bold\"\n                            : \"text-gray-600\"\n                        } py-2`}\n                      >\n                        <div className=\"flex flex-col\">\n                          <div className=\"flex flex-row items-center gap-3\">\n                            <RiSettingsFill className=\"text-xl\" />\n                            <span className=\"\">{item.caption}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-row items-center justify-end gap-2\">\n                          <span\n                            className={`text-sm ${\n                              item.status === true\n                                ? \"text-blue-600 font-bold\"\n                                : \"text-gray-500\"\n                            }`}\n                          >\n                            {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                          </span>\n                          <Switch\n                            value={item.status}\n                            onChange={() =>\n                              this.changeProctoringRule(item.rule)\n                            }\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div\n              className=\"my-4\"\n              onClick={() => this.setState({ formErr: null })}\n            >\n              {this.state.formErr !== null &&\n                this.state.formErr.element !== \"\" && (\n                  <Alert\n                    title={\"Missing info\"}\n                    description={this.state.formErr.msg}\n                    theme={AlertInterface.danger}\n                  />\n                )}\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n              <div className=\"flex flex-row items-center mt-3\">\n                <div\n                  onClick={() => this.setState({ submitExam: false })}\n                  className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                >\n                  Cancel\n                </div>\n              </div>\n              <div className=\"flex flex-row items-center mt-3\">\n                {this.props.prepareExam.selectedExam &&\n                validateExamDate(\n                  this.props.prepareExam.selectedExam!.exam_date,\n                  this.props.prepareExam.selectedExam!.start_time,\n                  this.props.prepareExam.selectedExam!.end_time\n                ) === ExamTimeStatus.Waiting ? (\n                  <div\n                    onClick={() => this.submitExamPreparation()}\n                    className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  >\n                    Confirm edit exam\n                  </div>\n                ) : (\n                  <div>Can not edit</div>\n                )}\n              </div>\n            </div>\n          </Modal>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const EditExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addEditExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  findExamDetails,\n  loadExamsListByPeriod,\n})(_EditExam);\n"],"sourceRoot":""}