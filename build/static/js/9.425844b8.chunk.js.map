{"version":3,"sources":["components/Questions/Questions.tsx","components/Questions/QuestionItem.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx","containers/PrepareExam/PrepareExamSteps.tsx","components/Switch/Switch.tsx"],"names":["Questions","connect","auth","course","schoolLevels","questionBank","questionTypes","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","setSelectedCourse","loadQuestionTypes","props","useState","loading","setLoading","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","questions","res","temp","filter","itm","type","length","item","chapters","find","x","useEffect","className","onChange","e","target","value","map","i","id","title","undefined","selectedCourse","name","questionsList","course_id","to","question","callBack","status","questionPaper","question_id","select","number","QuestionItem","editMode","setEditMode","selectedQuestion","setSelectedQuestion","onClick","dangerouslySetInnerHTML","__html","description","unSelectQuestion","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","questionAnswers","answerQuestionFn","answer","preview","submitQuestionAnswer","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","key","PrepareActionTypes","getHoursList","hrs","getMinutesList","mins","_PrepareExam","changeActionType","setState","actionType","changeProctoringRule","state","proctoringRules","rule","newData","selected","caption","addQuestionToPaper","addExamQuestion","removeToQuestionPaper","window","confirm","showPeriodFilter","selectPeriod","setStep","step","PrepareExamStepsEnum","Step2","periods","selected_period","is_active","formErr","element","msg","selected_course","selectCourse","submitExam","prepareExam","currentStep","StepStatus","Step1","exam_date","start_time","end_time","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","a","validateTwoTime","EditExam","axios","post","API","QBank","period","_id","exam_status","Created","duration","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","redirectToExams","PushPopupAlert","PopupAlertTheme","success","response","data","errors","message","console","log","componentDidMount","showInstitutes","setShowInstitutes","applicationPeriods","loadApplicationPeriods","examsList","loadExamsListByPeriod","selectedEducationCategory","session_plan","editQuestion","findTotalMarks","total","marks","handleChangeTermes","setSelectCourse","setSelectPeriod","GetExamsByPeriod","setSelectedPeriod","alert","Prepare","addQuestionModal","proctoringDefaultRules","this","qts","stepStatus","preparedExams","parseInt","disabled","NoResultThemes","Dark","AlertInterface","danger","large","selected_course_id","body","onSelect","Component","PrepareExam","system","loadExamsList","PrepareExamSteps","Steps","course_name","capitalizeFirstWord","session_plan_name","Switch"],"mappings":"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","file":"static/js/9.425844b8.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport QuestionItem from \"./QuestionItem\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] =\n    useState<string>(\"\");\n\n  const filteredQuestions = (\n    questionType: string,\n    QuestionChapter: string,\n    questions: QuestionInterface[]\n  ) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(\n        (itm) => itm.type === questionType\n      );\n      if (temp.length > 0) {\n        res = temp.filter((item) =>\n          item.chapters.find((x) => x === QuestionChapter)\n        );\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter((itm) => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter((item) =>\n        item.chapters.find((x) => x === QuestionChapter)\n      );\n    }\n    return res;\n  };\n\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? (\n            <Loading />\n          ) : props.questionTypes.questionTypes.length === 0 ? (\n            <div>No Question types found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionType(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Question type</option>\n              {props.questionTypes.questionTypes.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.title}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">\n            Question Chapters\n          </span>\n          {props.selectedCourse.chapters === undefined ? (\n            <div>Not found!</div>\n          ) : props.selectedCourse.chapters!.length === 0 ? (\n            <div className=\"text-yellow-700\">No Question chapters found!</div>\n          ) : (\n            <select\n              onChange={(e) => {\n                setFilterQuestionChapter(e.target.value);\n              }}\n              className=\"input-white border border-gray-400\"\n            >\n              <option value=\"\">Choose Chapter</option>\n              {props.selectedCourse.chapters!.map((item, i) => (\n                <option key={i + 1} value={item.id}>\n                  {item.name}\n                </option>\n              ))}\n            </select>\n          )}\n        </div>\n      </div>\n      {loading === true ? (\n        <Loading />\n      ) : filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).length === 0 ? (\n        <div className=\"text-yellow-700 font-bold flex flex-col\">\n          <div>No questions uploaded!</div>{\" \"}\n          <Link\n            className=\"btn bg-blue-600 text-white mt-4 w-max\"\n            to=\"/upload-questions\"\n          >\n            Upload Questions\n          </Link>\n        </div>\n      ) : (\n        filteredQuestions(\n          filterQuestionType,\n          filterQuestionChapter,\n          props.questionsList.filter(\n            (itm) => itm.course === props.selectedCourse.course_id\n          )\n        ).map((item, i) => (\n          <QuestionItem\n            key={i + 1}\n            question={item}\n            callBack={props.callBack}\n            status={\n              props.questionPaper.find(\n                (itm) => itm.question_id === item.question_id\n              )\n                ? true\n                : false\n            }\n            questionTypes={props.questionTypes}\n            select={true}\n            number={i + 1}\n            questionsList={props.questionsList}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n  };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","import React, { Fragment, useState } from \"react\";\nimport { CgDetailsMore } from \"react-icons/cg\";\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from \"react-icons/im\";\nimport { IoMdTrash } from \"react-icons/io\";\nimport { MdEdit } from \"react-icons/md\";\nimport { QuestionAnswersStore } from \"../../actions\";\nimport { questionTypesStoreInterface } from \"../../actions/questionTypes\";\nimport EditQuestion from \"../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { QuestionInterface } from \"../../interfaces/question\";\nimport Modal, { ModalSize, Themes } from \"../Modal/Modal\";\nimport QuestionPreview from \"../QuestionPreview/QuestionPreview\";\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [selectedQuestion, setSelectedQuestion] =\n    useState<QuestionInterface | null>(null);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  };\n  const answerQuestionFn = (answer: QuestionAnswersStore) => {};\n  return (\n    <Fragment>\n      {\n        editMode === false ? (\n          <div\n            onClick={() =>\n              props.select === true && props.callBack(props.question)\n            }\n            className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${\n              props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"\n            } hover:border-blue-600 mb-3`}\n          >\n            <div className=\"flex flex-row items-center justify-between w-full gap-2 md:gap-10\">\n              <div className=\"flex flex-row items-center gap-3 w-full truncate\">\n                <div>\n                  {props.select === false ? (\n                    <div className=\"font-bold text-blue-600\">\n                      ({props.number})\n                    </div>\n                  ) : props.status === true ? (\n                    <ImCheckboxChecked className=\"text-xl text-blue-600\" />\n                  ) : (\n                    <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />\n                  )}\n                </div>\n                <div className=\"flex flex-col\">\n                  <span className=\"text-xs text-blue-600 font-bold w-max\">\n                    {props.questionTypes.questionTypes &&\n                      props.questionTypes.questionTypes.find(\n                        (itm) => itm.id && itm.id === props.question.type\n                      )?.title}\n                  </span>\n                  <span className=\"font-bold\">\n                    {props.question.question[0].title}\n                  </span>\n                  <div\n                    className=\"w-full text-xs\"\n                    dangerouslySetInnerHTML={{\n                      __html: props.question.question[0].description,\n                    }}\n                  ></div>\n                </div>\n              </div>\n              {props.select === false && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  <div\n                    onClick={() => setSelectedQuestion(props.question)}\n                    className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <CgDetailsMore className=\"text-3xl text-gray-700\" />\n                  </div>\n                  <div\n                    onClick={() => setEditMode(true)}\n                    className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <MdEdit className=\"text-3xl text-blue-700\" />\n                  </div>\n                  <div\n                    onClick={() =>\n                      props.select === false && props.callBack(props.question)\n                    }\n                    className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\"\n                  >\n                    <IoMdTrash className=\"text-3xl text-yellow-700\" />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          // <Modal\n          //   title=\"\"\n          //   backDrop={true}\n          //   theme={Themes.default}\n          //   close={() => setEditMode(false)}\n          //   backDropClose={true}\n          //   widthSizeClass={ModalSize.extraLarge}\n          //   displayClose={false}\n          //   padding={{ title: false }}\n          // >\n          <div className=\"pt-0 fixed top-0 z-50 left-0 h-full overflow-scroll animate__animated animate__zoomIn shadow-xl bg-white w-full\">\n            <EditQuestion\n              selectedQuestion={props.question}\n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion}\n            />\n          </div>\n        )\n        // </Modal>\n      }\n\n      {selectedQuestion !== null && (\n        <Modal\n          title={\n            <div className=\"text-2xl font-extrabold text-blue-600\">\n              Question preview\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setSelectedQuestion(null)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <QuestionPreview\n            questionAnswers={[]}\n            answerQuestionFn={answerQuestionFn}\n            selectedQuestion={selectedQuestion}\n            setSelectedQuestion={setSelectedQuestion}\n            preview={true}\n            submitQuestionAnswer={false}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nexport default QuestionItem;\n","import { ExamProctoringRules } from \"../actions/candidate_exam\";\n\nexport enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n};\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER),\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC),\n  },\n  {\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc),\n  },\n  {\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I),\n  },\n];\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n  Editing = \"Editing\",\n  Paused = \"Paused\",\n  Removed = \"Removed\",\n  Done = \"Done\",\n}\n\nexport interface prepare_exam_request {\n  period: string;\n  course: string;\n  questions: string[];\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n\nexport interface ExamItemResponseFull {\n  questions: string[];\n  exam_total_marks?: number;\n  status: number;\n  period: string;\n  course: string;\n  course_id: string;\n  course_code: string;\n  course_name: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n  rules: ExamProctoringRules;\n}\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n  ExamProctoringRules,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setShowInstitutes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport {\n  QuestionInterface,\n  uploadQuestionsResponse,\n} from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport {\n  EXAM_QUESTIONS_NUMBERING,\n  PrepareExamStatus,\n  QuestionNumberFormat,\n} from \"../../interfaces/prepare_exam\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\nimport Switch from \"../../components/Switch/Switch\";\nimport { proctoringDefaultRules } from \"../../utils/question_bank\";\nimport { RiSettingsFill } from \"react-icons/ri\";\nimport { validateTwoTime } from \"../../utils/functions\";\nimport { education_category } from \"../../interfaces\";\nimport InitializeInstitution from \"../../components/InitializeInstitution/InitializeInstitution\";\n\nexport const getHoursList = () => {\n  let hrs: number[] = [];\n  for (let x = 0; x <= 24; x++) {\n    hrs = [...hrs, x];\n  }\n  return hrs;\n};\nexport const getMinutesList = () => {\n  let mins: number[] = [];\n  for (let x = 0; x <= 59; x++) {\n    mins = [...mins, x];\n  }\n  return mins;\n};\n\nexport enum PrepareActionTypes {\n  Prepare = \"Prepare\",\n  EditExam = \"EditExam\",\n}\n\ninterface AppPropsProps {\n  auth: Auth;\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  schoolLevels: schoolLevelsStoreInterface;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (\n    course_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  loadExamsList: (callback: (loading: boolean) => void) => void;\n  loadExamsListByPeriod: (\n    period_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  setShowInstitutes: (status: boolean) => void;\n  setSelectedEducationCategory: (data: education_category) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  actionType: PrepareActionTypes;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n  proctoringRules: {\n    rule: string;\n    status: boolean;\n    caption: string;\n  }[];\n  rules: ExamProctoringRules;\n  submitExam: boolean;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      actionType: PrepareActionTypes.Prepare,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\",\n        msg: \"\",\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"23:59\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n      proctoringRules: proctoringDefaultRules,\n      rules: {\n        right_click_enabled: false,\n        copy_enabled: false,\n        paste_enabled: false,\n        stop_candidate_when_comeback: false,\n        allow_to_leave_browser: false,\n      },\n      submitExam: false,\n    };\n  }\n\n  changeActionType = (type: PrepareActionTypes) => {\n    this.setState({ actionType: type });\n  };\n\n  changeProctoringRule = (key: string) => {\n    let item = this.state.proctoringRules.find((itm) => itm.rule === key);\n    if (item !== undefined) {\n      let newData: { rule: string; status: boolean; caption: string }[] = [];\n      for (let selected of this.state.proctoringRules) {\n        if (selected.rule === key) {\n          newData = [\n            ...newData,\n            {\n              rule: key,\n              status: !selected.status,\n              caption: selected.caption,\n            },\n          ];\n        } else {\n          newData = [...newData, selected];\n        }\n      }\n      this.setState({ proctoringRules: newData });\n    }\n  };\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  };\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (\n      window.confirm(\n        \"Are you sure do you want to remove question to question paper?\"\n      )\n    ) {\n      this.props.addExamQuestion(question);\n    }\n  };\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        });\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n          submitExam: false,\n        });\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          },\n        });\n      }\n    }\n    this.setState({ currentStep: step });\n  };\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (\n        this.state.duration_hours === 0 &&\n        this.state.duration_minutes === 0\n      ) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n    }\n\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (\n        this.props.periods.selected_period === null ||\n        this.props.periods.selected_period.is_active === false\n      ) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\n        \"Are you sure do you want to change course? You will loose your selected questions\"\n      );\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step2 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  };\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    if (questions.length === 0) return [];\n    for (let question of questions) {\n      ids = [...ids, question.question_id];\n    }\n    return ids;\n  };\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (\n      this.props.periods.selected_period === null ||\n      this.props.periods.selected_period.is_active === false\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      });\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        submitExam: false,\n        selectCourse: true,\n      });\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        },\n      });\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        },\n      });\n    }\n    if (validateTwoTime(this.state.start_time, this.state.end_time) === false) {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please end time should be greater than start time\",\n        },\n      });\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        },\n      });\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        },\n      });\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        },\n      });\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        },\n      });\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        },\n      });\n    }\n    if (\n      this.props.prepareExam.questions.length === 0 &&\n      this.state.actionType === PrepareActionTypes.EditExam\n    ) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        },\n      });\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        },\n      });\n    }\n\n    this.setState({ loading: true });\n    try {\n      await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period._id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + this.state.duration_hours * 60,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n        rules: {\n          right_click_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"right_click_enabled\"\n          )?.status,\n          copy_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"copy_enabled\"\n          )?.status,\n          paste_enabled: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"paste_enabled\"\n          )?.status,\n          stop_candidate_when_comeback: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"stop_candidate_when_comeback\"\n          )?.status,\n          allow_to_leave_browser: this.state.proctoringRules.find(\n            (itm) => itm.rule === \"allow_to_leave_browser\"\n          )?.status,\n        },\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success,\n      });\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({\n                formErr: {\n                  element: \"main\",\n                  msg: error.response.data.errors[0].message,\n                },\n              });\n            } else {\n              this.setState({\n                formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n              });\n            }\n          } else {\n            this.setState({\n              formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n            });\n          }\n        } else {\n          this.setState({\n            formErr: { element: \"main\", msg: \"Failed to update Question!\" },\n          });\n        }\n      }\n      console.log(\"Exam err: \", { ...error });\n    }\n    this.setState({ loading: false });\n  };\n\n  componentDidMount = () => {\n    if (this.props.schoolLevels.showInstitutes === true) {\n      this.props.setShowInstitutes(false);\n    }\n    if (\n      (this.props.questionTypes.questionTypes === null ||\n        this.props.questionTypes.questionTypes.length === 0) &&\n      this.state.actionType === PrepareActionTypes.EditExam\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (\n      this.props.periods.applicationPeriods === null ||\n      this.props.periods.applicationPeriods.length === 0\n    ) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (\n      this.props.periods.selected_period !== null &&\n      this.props.periods.selected_period.is_active === false\n    ) {\n      this.setState({ selectPeriod: true });\n    } else {\n      if (this.props.course.selected_course === null) {\n        this.setState({ selectCourse: true });\n      }\n    }\n    if (\n      this.props.course.selected_course !== null &&\n      this.state.actionType === PrepareActionTypes.EditExam\n    ) {\n      this.props.loadQuestionBank(\n        this.props.course.selected_course.course_id,\n        this.setLoading\n      );\n    }\n    if (\n      (this.props.prepareExam.examsList === null ||\n        this.props.prepareExam.examsList.length === 0) &&\n      this.state.actionType === PrepareActionTypes.EditExam\n    ) {\n      if (this.props.periods.selected_period !== null) {\n        this.props.loadExamsListByPeriod(\n          this.props.periods.selected_period._id,\n          this.setLoading\n        );\n      } else {\n        this.props.schoolLevels.selectedEducationCategory !== null &&\n          this.props.schoolLevels.selectedEducationCategory.session_plan !==\n            null &&\n          this.props.loadExamsListByPeriod(\n            this.props.schoolLevels.selectedEducationCategory.session_plan._id,\n            this.setLoading\n          );\n      }\n    }\n  };\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  };\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  };\n  handleChangeTermes = (value: string) => {\n    // console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    });\n  };\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status });\n  };\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status });\n  };\n  GetExamsByPeriod = (period: ApplicationPeriodGet) => {\n    if (period !== null && period.is_active === true) {\n      this.props.setSelectedPeriod(period);\n      this.props.loadExamsListByPeriod(period._id, this.setLoading);\n      this.setState({ formErr: null });\n    } else {\n      alert(\"Please choose active session\");\n      this.setState({ selectPeriod: true });\n    }\n  };\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />;\n    }\n    if (this.props.prepareExam.examsList !== null) {\n      if (\n        this.props.prepareExam.examsList\n          .filter(\n            (itm) => itm.period === this.props.periods.selected_period?._id\n          )\n          .find(\n            (itm) => itm.course === this.props.course.selected_course?.course_id\n          ) !== undefined\n      ) {\n        alert(\"The exam already created!, Please choose another course!\");\n        this.props.setSelectedCourse(null);\n        if (this.props.prepareExam.questions.length > 0) {\n          for (let qts of this.props.prepareExam.questions) {\n            this.props.addExamQuestion(qts);\n          }\n        }\n        // return <Redirect to=\"exams-list\" />;\n      }\n    }\n    return (\n      <Fragment>\n        {this.state.editQuestion === null ? (\n          <div>\n            <PrepareExamSteps\n              currentStep={this.state.currentStep}\n              setStep={this.setStep}\n              course={this.props.course}\n              periods={this.props.periods}\n              setSelectCourse={this.setSelectCourse}\n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus}\n              actionType={PrepareActionTypes.Prepare}\n              preparedExams={this.props.prepareExam.examsList}\n            />\n            {this.state.loading === true ? (\n              <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n                <div className=\"text-gray-600 mb-3 px-4\">\n                  Performing action, Please wait...\n                </div>\n                <Loading />\n              </div>\n            ) : (\n              <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n                {this.state.currentStep === PrepareExamStepsEnum.Step1 && (\n                  <div className=\"grid md:grid-cols-12 gap-4\">\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam date\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            exam_date: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.exam_date}\n                        type=\"date\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"exam_date\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"exam_date\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Hours)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_hours: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_hours}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_hours\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getHoursList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_hours\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-3 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Duration(Minutes)\n                      </span>\n                      <select\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                          this.setState({\n                            duration_minutes: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.duration_minutes}\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"duration_minutes\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        {getMinutesList().map((item, i) => (\n                          <option key={i + 1}>{item}</option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"duration_minutes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam start time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            start_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.start_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"start_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"start_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-6 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam ending time\n                      </span>\n                      <input\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            end_time: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.end_time}\n                        type=\"time\"\n                        className={`input-white h-10 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"end_time\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"end_time\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Number of questions per page\n                      </span>\n                      <input\n                        disabled={true}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          this.setState({\n                            questions_per_page: parseInt(e.target.value),\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.questions_per_page}\n                        type=\"number\"\n                        className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"questions_per_page\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"questions_per_page\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"hidden md:col-span-6 flex-col\">\n                      <span className=\"text-gray-500 font-semibold\">\n                        Questions number format: {this.state.number_format}\n                      </span>\n                      <select\n                        onChange={(e) => {\n                          this.setState({\n                            number_format: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        disabled={true}\n                        className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"number_format\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      >\n                        <option value=\"\">Select Numbering format</option>\n                        {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                          <option\n                            selected={\n                              item.key === this.state.number_format\n                                ? true\n                                : false\n                            }\n                            key={i + 1}\n                            value={item.key}\n                          >\n                            {item.value}\n                          </option>\n                        ))}\n                      </select>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"number_format\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam description\n                      </span>\n                      <textarea\n                        onChange={(\n                          e: React.ChangeEvent<HTMLTextAreaElement>\n                        ) => {\n                          this.setState({\n                            discription: e.target.value,\n                            formErr: null,\n                          });\n                        }}\n                        value={this.state.discription}\n                        className={`input-white min-h-8 border-gray-400 ${\n                          this.state.formErr !== null &&\n                          this.state.formErr.element === \"discription\"\n                            ? \"border-2 border-red-600\"\n                            : \"border\"\n                        }`}\n                      ></textarea>\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"discription\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                    <div className=\"md:col-span-12 flex flex-col\">\n                      {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n                      <span className=\"text-gray-700 font-semibold\">\n                        Exam terms and conditions\n                      </span>\n                      {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n                      <ReactQuill\n                        value={this.state.termes}\n                        className=\"rounded mb-10\"\n                        onChange={this.handleChangeTermes}\n                      />\n                      {this.state.formErr !== null &&\n                        this.state.formErr.element === \"termes\" && (\n                          <div className=\"text-red-600 text-xs font-bold italic mt-2\">\n                            {this.state.formErr.msg}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                )}\n                {this.state.currentStep === PrepareExamStepsEnum.Step2 && (\n                  <div className=\"border rounded px-2 py-2 mt-4\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                      <span className=\"font-bold text-black text-2xl\">\n                        Question paper\n                      </span>\n                      <div className=\"flex flex-row gap-2\">\n                        <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">\n                          Total marks:{\" \"}\n                          {this.findTotalMarks(\n                            this.props.prepareExam.questions\n                          )}\n                        </span>\n                        <div\n                          onClick={() =>\n                            this.props.periods.selected_period === null ||\n                            this.props.periods.selected_period.is_active ===\n                              false\n                              ? this.setState({ selectPeriod: true })\n                              : this.props.course.selected_course === null\n                              ? this.setState({ selectCourse: true })\n                              : this.setState({ addQuestionModal: true })\n                          }\n                          className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"\n                        >\n                          <MdAdd className=\"text-2xl\" /> Add question\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col mt-2\">\n                      {this.props.prepareExam.questions.length === 0 ? (\n                        <div\n                          className={`${\n                            this.state.formErr !== null &&\n                            this.state.formErr.element === \"questions\"\n                              ? \"bg-red-50 border-2 border-red-600 text-red-600\"\n                              : \"bg-gray-100\"\n                          } rounded mt-2`}\n                        >\n                          <NoResult\n                            theme={NoResultThemes.Dark}\n                            value={\"No questions added so far!\"}\n                          />\n                        </div>\n                      ) : (\n                        this.props.questionTypes &&\n                        this.props.prepareExam.questions.map((item, i) => (\n                          <QuestionItem\n                            key={i + 1}\n                            question={item}\n                            callBack={this.removeToQuestionPaper}\n                            status={true}\n                            questionTypes={this.props.questionTypes}\n                            select={false}\n                            number={i + 1}\n                            questionsList={this.props.prepareExam.questions}\n                          />\n                        ))\n                      )}\n                    </div>\n                  </div>\n                )}\n                <div\n                  className=\"my-4\"\n                  onClick={() => this.setState({ formErr: null })}\n                >\n                  {this.state.formErr !== null &&\n                    this.state.formErr.element !== \"\" && (\n                      <Alert\n                        title={\"Missing info\"}\n                        description={this.state.formErr.msg}\n                        theme={AlertInterface.danger}\n                      />\n                    )}\n                </div>\n                <div className=\"flex flex-row items-center justify-between mt-4\">\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 ? (\n                    <Link\n                      to=\"/exams-list\"\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Cancel\n                    </Link>\n                  ) : (\n                    <div\n                      onClick={() => this.setStep(PrepareExamStepsEnum.Step1)}\n                      className=\"btn border cursor-pointer\"\n                    >\n                      Back to details\n                    </div>\n                  )}\n                  {this.state.currentStep === PrepareExamStepsEnum.Step1 &&\n                  this.state.actionType === PrepareActionTypes.EditExam ? (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setStep(PrepareExamStepsEnum.Step2)}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Continue\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex flex-row items-center\">\n                      <div\n                        onClick={() => this.setState({ submitExam: true })}\n                        className=\"btn bg-blue-600 text-white cursor-pointer\"\n                      >\n                        Review & Save\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : this.props.questionBank.questions === null ? (\n          <Loading />\n        ) : this.props.questionBank.questions.length === 0 ? (\n          <div>No Questions available!</div>\n        ) : (\n          <EditQuestion\n            selectedQuestion={this.state.editQuestion}\n            questionsList={this.props.questionBank.questions}\n            unSelectQuestion={this.unSelectQuestion}\n          />\n        )}\n        {this.state.selectCourse === true &&\n          this.props.schoolLevels.showInstitutes === false &&\n          this.props.schoolLevels.selectedEducationCategory !== null && (\n            <Modal\n              title=\"Choose course\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.setState({ selectCourse: false })}\n              backDropClose={true}\n              widthSizeClass={ModalSize.large}\n              displayClose={true}\n              padding={{ title: true }}\n            >\n              <div className=\"-mt-2\">\n                <Courses\n                  setSelectedCourse={this.chooseCourse}\n                  preparedExams={this.props.prepareExam.examsList}\n                  selected_course_id={\n                    this.props.course.selected_course &&\n                    this.props.course.selected_course.course_id\n                  }\n                />\n              </div>\n            </Modal>\n          )}\n        {this.state.addQuestionModal === true && (\n          <Modal\n            title={\n              <div className=\"flex flex-row items-center gap-3\">\n                {this.props.questionBank.questions !== null &&\n                  this.props.questionBank.questions.length > 0 && (\n                    <Link\n                      to={\"/upload-questions\"}\n                      className=\"btn bg-blue-100 hover:bg-blue-200 text-blue-700 cursor-pointer\"\n                    >\n                      Upload new\n                    </Link>\n                  )}\n                <span>Add Exam Questions</span>\n              </div>\n            }\n            backDrop={true}\n            theme={Themes.default}\n            close={() => this.setState({ addQuestionModal: false })}\n            backDropClose={true}\n            widthSizeClass={ModalSize.extraLarge}\n            displayClose={true}\n            padding={{ title: true }}\n          >\n            {this.props.course.selected_course === null ? (\n              <div>Please choose a course</div>\n            ) : this.props.questionBank.questions === null ? (\n              <Loading />\n            ) : (\n              <Questions\n                selectedCourse={this.props.course.selected_course}\n                callBack={this.addQuestionToPaper}\n                questionsList={this.props.questionBank.questions}\n                questionPaper={this.props.prepareExam.questions}\n              />\n            )}\n          </Modal>\n        )}\n        {this.state.selectPeriod === true &&\n          this.props.schoolLevels.showInstitutes === false &&\n          this.props.schoolLevels.selectedEducationCategory !== null && (\n            <Modal\n              title=\"Choose a period\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => {\n                if (\n                  this.props.periods.selected_period !== null &&\n                  this.props.periods.selected_period.is_active === true\n                ) {\n                  this.setState({ selectPeriod: false });\n                } else {\n                  alert(\"Please choose active session\");\n                }\n              }}\n              backDropClose={true}\n              widthSizeClass={ModalSize.large}\n              displayClose={true}\n              padding={{ title: true }}\n            >\n              <div className=\"px-2 mt-6\">\n                <ApplicationPeriods\n                  applicationPeriods={this.props.periods.applicationPeriods}\n                  setSelectedPeriod={this.GetExamsByPeriod}\n                  showPeriodFilter={this.showPeriodFilter}\n                />\n              </div>\n            </Modal>\n          )}\n        {this.state.submitExam === true &&\n          this.props.schoolLevels.showInstitutes === false &&\n          this.props.schoolLevels.selectedEducationCategory !== null && (\n            <Modal\n              title={\n                <div className=\"text-blue-600 font-bold text-xl\">\n                  Confirm exam preparation\n                </div>\n              }\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.setState({ submitExam: false })}\n              backDropClose={true}\n              widthSizeClass={ModalSize.large}\n              displayClose={true}\n              padding={{ title: true, body: true }}\n            >\n              <div className=\"mb-3 -mt-6\">\n                <div className=\"md:col-span-12 flex flex-col\">\n                  <div className=\"bg-gray-100 rounded p-4\">\n                    <span className=\"text-gray-900 text-lg font-bold\">\n                      Exam proctoring rules\n                    </span>\n                    <div className=\"bg-white rounded px-3 flex flex-col mt-3\">\n                      {this.state.proctoringRules.map((item, i) => (\n                        <div\n                          key={i + 1}\n                          className={`flex flex-row items-center justify-between ${\n                            this.state.proctoringRules.length === i + 1\n                              ? \"\"\n                              : \"border-b\"\n                          } ${\n                            item.status === true\n                              ? \"text-blue-600 font-bold\"\n                              : \"text-gray-600\"\n                          } py-2`}\n                        >\n                          <div className=\"flex flex-col\">\n                            <div className=\"flex flex-row items-center gap-3\">\n                              <RiSettingsFill className=\"text-xl\" />\n                              <span className=\"\">{item.caption}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-row items-center justify-end gap-2\">\n                            <span\n                              className={`text-sm ${\n                                item.status === true\n                                  ? \"text-blue-600 font-bold\"\n                                  : \"text-gray-500\"\n                              }`}\n                            >\n                              {item.status === true ? \"Allowed\" : \"Not Allowed\"}\n                            </span>\n                            <Switch\n                              value={item.status}\n                              onChange={() =>\n                                this.changeProctoringRule(item.rule)\n                              }\n                            />\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div\n                className=\"my-4\"\n                onClick={() => this.setState({ formErr: null })}\n              >\n                {this.state.formErr !== null &&\n                  this.state.formErr.element !== \"\" && (\n                    <Alert\n                      title={\"Missing info\"}\n                      description={this.state.formErr.msg}\n                      theme={AlertInterface.danger}\n                    />\n                  )}\n              </div>\n              <div className=\"flex flex-row justify-between items-center\">\n                <div className=\"flex flex-row items-center mt-3\">\n                  <div\n                    onClick={() => this.setState({ submitExam: false })}\n                    className=\"btn bg-white text-gray-600 cursor-pointer border\"\n                  >\n                    Cancel\n                  </div>\n                </div>\n                <div className=\"flex flex-row items-center mt-3\">\n                  <div\n                    onClick={() => this.submitExamPreparation()}\n                    className=\"btn bg-blue-600 text-white cursor-pointer\"\n                  >\n                    Submit exam\n                  </div>\n                </div>\n              </div>\n            </Modal>\n          )}\n        {this.state.loading === false &&\n          this.props.schoolLevels.selectedEducationCategory === null &&\n          this.props.schoolLevels.showInstitutes === false && (\n            <InitializeInstitution\n              schoolLevels={this.props.schoolLevels}\n              setSelectedEducationCategory={(data: education_category) => {\n                this.props.setSelectedEducationCategory(data);\n                if (data.session_plan !== null) {\n                  this.GetExamsByPeriod(data.session_plan);\n                } else {\n                  this.setState({ selectPeriod: true });\n                }\n                this.props.setShowInstitutes(false);\n              }}\n              onSelect={() => {\n                this.props.setShowInstitutes(false);\n              }}\n            />\n          )}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): {\n  auth: Auth;\n  course: courseStoreInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n  questionBank: QuestionBankStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  system: System;\n} => {\n  return {\n    auth: auth,\n    course: course,\n    schoolLevels: schoolLevels,\n    questionBank: questionBank,\n    questionTypes: questionTypes,\n    prepareExam: prepareExam,\n    periods: periods,\n    system: system,\n  };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n  loadExamsList,\n  loadExamsListByPeriod,\n  setShowInstitutes,\n})(_PrepareExam);\n","import React from \"react\";\nimport { MdSettings } from \"react-icons/md\";\nimport { applicationPeriodsStoreInterface } from \"../../actions/application_periods\";\nimport { courseStoreInterface } from \"../../actions/course\";\nimport { ExamItemResponse } from \"../../interfaces/prepare_exam\";\nimport { capitalizeFirstWord } from \"../../shared/dataTest\";\nimport { PrepareActionTypes } from \"./PrepareExam\";\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n  preparedExams?: ExamItemResponse[] | null;\n  actionType: PrepareActionTypes;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: {\n    step: PrepareExamStepsEnum;\n    title: string;\n    description: string;\n    status: boolean;\n  }[] =\n    props.actionType === PrepareActionTypes.EditExam\n      ? [\n          {\n            step: PrepareExamStepsEnum.Step1,\n            title: \"Exam details\",\n            description: \"Fill all exam details\",\n            status: false,\n          },\n          {\n            step: PrepareExamStepsEnum.Step2,\n            title: \"Edit questions\",\n            description: \"Choose questions for the exam\",\n            status: false,\n          },\n        ]\n      : [\n          {\n            step: PrepareExamStepsEnum.Step1,\n            title: \"Exam details\",\n            description: \"Fill all exam details\",\n            status: false,\n          },\n        ];\n\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">\n              {props.actionType === PrepareActionTypes.Prepare\n                ? props.course.selected_course === null\n                  ? \"Prepare exam\"\n                  : \"Exam: \" + props.course.selected_course.course_name\n                : props.course.selected_course === null\n                ? \"Edit the exam\"\n                : \"Exam: \" + props.course.selected_course.course_name}\n            </span>\n            {props.periods.selected_period !== null && (\n              <span\n                className={`text-sm ${\n                  props.periods.selected_period.is_active === true\n                    ? \"text-gray-600\"\n                    : \"text-yellow-600\"\n                }`}\n              >\n                Session:{\" \"}\n                {capitalizeFirstWord(\n                  props.periods.selected_period.session_plan_name\n                )}\n              </span>\n            )}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2 lg:gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div\n                    onClick={() => props.setStep(item.step)}\n                    key={i + 1}\n                    className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${\n                      props.currentStep === item.step\n                        ? props.stepStatus(item.step) === true\n                          ? \"border-blue-300\"\n                          : \"bg-blue-50 border-white\"\n                        : \"cursor-pointer hover:bg-gray-50 border-white\"\n                    }`}\n                  >\n                    <div\n                      className={`w-10 h-10 rounded-full ${\n                        props.stepStatus(item.step) === true\n                          ? \"bg-blue-600 text-white\"\n                          : props.currentStep === item.step\n                          ? \"bg-white text-blue-600 border-2 border-blue-300\"\n                          : \"bg-gray-200\"\n                      } text-center font-bold text-xl flex items-center justify-center`}\n                    >\n                      {Steps.length > 1 ? i + 1 : <MdSettings />}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span\n                        className={`${\n                          props.stepStatus(item.step) === true\n                            ? \"text-blue-600\"\n                            : \"\"\n                        } font-bold text-lg`}\n                      >\n                        {item.title}\n                      </span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">\n                        {item.description}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {props.actionType === PrepareActionTypes.Prepare && (\n                <div className=\"flex flex-row items-center gap-2\">\n                  {false && (\n                    <div\n                      onClick={() => props.setSelectCourse(true)}\n                      className={`btn ${\n                        props.course.selected_course === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-blue-50 hover:bg-blue-100 text-blue-600\"\n                      } h-max flex items-center justify-center cursor-pointer py-2`}\n                    >\n                      {props.course.selected_course === null\n                        ? \"Choose course\"\n                        : \"Change course\"}\n                    </div>\n                  )}\n                  {(props.periods.selected_period === null ||\n                    props.periods.selected_period.is_active === false) && (\n                    <div\n                      onClick={() => props.setSelectPeriod(true)}\n                      className={`btn ${\n                        props.periods.selected_period === null\n                          ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\"\n                          : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"\n                      } h-max flex items-center justify-center py-2 cursor-pointer`}\n                    >\n                      {props.periods.selected_period === null\n                        ? \"Choose period\"\n                        : \"Change Period\"}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrepareExamSteps;\n","import React from \"react\";\n\ninterface SwitchProps {\n  value: boolean;\n  onChange: () => void;\n}\n\nconst Switch = (props: SwitchProps) => {\n  const toggleClass = \" transform translate-x-6\";\n  return (\n    <div\n      onClick={props.onChange}\n      className={`md:w-14 md:h-7 w-12 h-6 flex items-center ${\n        props.value === true ? \"bg-blue-200\" : \"bg-gray-300\"\n      } rounded-full p-1 cursor-pointer`}\n    >\n      {/* Switch */}\n      <div\n        className={`${\n          props.value === true ? \"bg-blue-600\" : \"bg-white\"\n        } md:w-6 md:h-6 h-5 w-5 rounded-full shadow-md transition transform${\n          props.value ? toggleClass : null\n        }`}\n      ></div>\n    </div>\n  );\n};\n\nexport default Switch;\n"],"sourceRoot":""}