{"version":3,"sources":["containers/DoExam/Footer/Footer.tsx","containers/DoExam/Profile/Profile.tsx","containers/DoExam/QuestionDetails/QuestionDetails.tsx","containers/DoExam/DoExamTitle/QuestionsReview.tsx","containers/DoExam/DoExamTitle/DoExamTitle.tsx","components/ProctoringRuleItem/ProctoringRuleItem.tsx","containers/DoExam/DoExam.tsx","assets/profile.png","components/CountDown/CountDownLive.tsx"],"names":["Footer","connect","auth","doExam","candidateExam","system","proctoring","loadExam","addExamAnswer","deleteExamAnswers","SubmitExamAnswers","setSelectedExamQuestion","props","findIndex","question_id","candidate_exam","x","questions","length","selectedIndexPrevious","selected_question","selectedIndexNext","ConfirmSubmitAnswer","exam_id","undefined","find","item","questionAnswered","question_answers","findQuestionType","type","questionTypes","SubmitAnswer","className","onClick","setProfileWindowStatus","windowStatus","profile","events","style","position","top","right","questionsList","selected_exam_id","exam_paper_id","height","submitQuestionAnswer","setSubmitModal","Profile","width","src","userImage","alt","user","fname","lname","n_id","paddingBottom","paddingTop","map","i","event_type_id","description","DATE","time","Date","getHours","getMinutes","getSeconds","QuestionDetails","setQuestionLanguage","loadQuestionTypes","useState","loading","setLoading","selectLang","setSelectLang","QuestionData","res","q","itm","question","testLang","language","getDefaultLanguage","findSelectedQuestionDetails","filterLanguages","langs","selectedQuestionDetails","langItem","testLangQ","QuestionLanguages","l","key","questionSelected","selected_language","addAnswerFunction","data","checkAnswerAvail","console","log","answerQuestionFn","status","answers","filter","reference","useEffect","Loading","LoadingType","white","title","marks","value","questionTypeElementsType","Embedded","EmbeddedQuestion","dangerouslySetInnerHTML","__html","MultipleChoice","SingleMultiple","available_answers","selectedQuestionAnswer","toMultipleChoice","answer","selectedAns","TrueFalse","toTrueFalse","Matching","selectedLanguage","selectedExam","toMatching","shuffledAnswers","Shuffle","SimpleCalculate","SimpleCalculated","toSimpleCalculated","ShortAnswer","toShortAnswer","Numeric","Numerical","toNumerical","CalculatedMultipleChoice","toCalculatedMultipleChoice","Essay","toEssay","Hybrid","HybridAnswers","wholeQuestion","QuestionsReview","submitAnswerState","setSubmitAnswerState","AnsweredQuest","ExamAnsweredQuestions","PendingQuest","ExamPendingQuestions","window","confirm","submitExam","maxHeight","test","FindAnswerHybrid","answersList","FindAnswer","showCorrectAnswer","DoExamTitle","TotalAnswered","NumberOfAnsweredQuestions","answeredPercentage","course_name","course_code","alignSelf","toFixed","start_time","duration","CountDownLive","room_id","timeout","returnString","labels","submitModalStatus","Modal","backDrop","theme","Themes","default","close","backDropClose","widthSizeClass","ModalSize","maxWidth","displayClose","padding","marginTop","ModalMarginTop","small","ProctoringRuleItem","getDetails","examDetails","rule_key","rules","right_click_enabled","copy_enabled","paste_enabled","stop_candidate_when_comeback","allow_to_leave_browser","_DoEam","GetUserTotalMarks","a","setRequestingExamMarks","axios","post","API","DO_EXAM","course","period","user_id","setExamTotalMarks","parseInt","user_marks","setState","requesting_exam_marks","total_exam_marks","setSubmitQuestionAnswer","state","setQuestionsListWindowStatus","setSelectedQuestion","selectedQuestion","setExamQuestionAnswer","setCompletedTest","completedTest","changingExamStatusLoading","changingExamStatus","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","exam_answers","exam_questions","periods","selected_period","check","selected_exam_details","checkUserExam","exam","positions","selected_position","exam_room_details","RequestUserExamDetails","position_id","userExamLocation","district_id","center_id","setLoadExamResultMessage","BackToExamination","RequestUserExamManually","get","loadCandidateExamFromSupervisor","candidateDetailsProctoring","joined","PushPopupAlert","PopupAlertTheme","success","danger","loadUserProfileDetails","FC_GetProfileDetails","msg","componentDidMount","sex","courses","loadCourses","exam_questions_answers","testAnswers","componentWillUnmount","socket","emit","Events","USER_DISCONNECTED_ONLINE_SERVER","setLoadExamResultNoMessage","user_exams_done","exam_paper","CleanCandidateExam","examQuestionIds","temp","sel_question","SubmitExamQuestionAnswer","disability","gender","email","phone_number","in_education","questions_order","userAnswer","position_code","submitWholeExam","put","doneExam","submittedExam","document","fullscreenElement","exitFullscreen","errorToText","startExam","display_exam","start_exam","requestExam","pauseExam","inExam","schoolLevels","selectedEducationCategory","application_session_id","session_plan","_id","done_by","EventsLabels","DONE_EXAM","toString","FC_SaveEvent","error","EXAM_DONE_SERVER","timeOutExam","TIME_OUT","TIME_OUT_SERVER","getExam","REQUEST_EXAM_SERVER","examStatus","loadUserExamErr","added_minutes","group_id","this","to","socket_failed","size","location","reload","ProctoringCandidateOnline","homeProctoring","restartExam","id","CleanCandidateExamAnswers","setExamStatus","UserExamActions","Restart","stopExam","Done","period_id","removeClient","Removed","examAlreadyDone","candidateStopExam","reason","candidateContinueExam","joinedRoom","changeTime","timer","candidateProctoringDetails","requestUserAnswers","ejectCandidate","QuestionsList","selected_course","duration_min","preview","setSelectedCandidateExam","extraLarge","exam_date","termes","medium","Component","DoExam","ChangeExamStatus","loadCandidateExam","setSelectedPeriod","GetUserExamDetails","FC_AddRules","moment","tz","add","_CountDown","interval","timeOutCounter","setInterval","setCountdowm","hours","mins","secs","clearInterval","days","stop_time","setTimeout","startOnlineTimer","on","ADD_TIME_TO_CANDIDATE_CLIENT","event","GET_ROOM_TIME","TimerCountDownResult","remaining_minutes","examStopTime","futureDate","today","clockDuration","diff","Math","floor","asDays","minutes","seconds","formatStyle","separator","React"],"mappings":"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","file":"static/js/45.77858497.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { IoNotifications } from \"react-icons/io5\";\nimport { MdCheckCircle, MdChevronLeft, MdChevronRight } from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  candidateExamStoreInterface,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n  Proctoring,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { API } from \"../../../utils/api\";\nimport { findQuestionType, questionAnswered } from \"../utils/utils\";\n\ninterface FooterInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  SubmitAnswer: () => void;\n  submitQuestionAnswer: boolean;\n  proctoring: Proctoring;\n  setSubmitModal: (status: boolean) => void;\n  setRequestingExamMarks: (status: boolean) => void;\n  setExamTotalMarks: (marks: number) => void;\n}\n\nconst _Footer = (props: FooterInterface) => {\n  const findIndex = (question_id: string): number => {\n    if (props.candidateExam.candidate_exam !== null) {\n      for (\n        let x: number = 0;\n        x < props.candidateExam.candidate_exam.questions.length;\n        x++\n      ) {\n        if (\n          props.candidateExam.candidate_exam.questions[x].question_id ===\n          question_id\n        ) {\n          return x;\n        }\n      }\n      return 0;\n    }\n    return 0;\n  };\n\n  let selectedIndexPrevious: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0\n        ? findIndex(props.candidateExam.selected_question)\n        : props.candidateExam.candidate_exam.questions.length\n      : -1;\n\n  let selectedIndexNext: number =\n    props.candidateExam.selected_question !== null &&\n    props.candidateExam.candidate_exam !== null\n      ? findIndex(props.candidateExam.selected_question) > 0 &&\n        findIndex(props.candidateExam.selected_question) <\n          props.candidateExam.candidate_exam.questions.length - 1\n        ? findIndex(props.candidateExam.selected_question)\n        : findIndex(props.candidateExam.selected_question) === 0\n        ? 0\n        : -1\n      : 0;\n\n  const ConfirmSubmitAnswer = (exam_id: string, question_id: string | null) => {\n    props.setSelectedExamQuestion(exam_id, question_id);\n    if (props.candidateExam.candidate_exam !== null) {\n      let check = props.candidateExam.candidate_exam.questions.find(\n        (item) =>\n          questionAnswered(\n            props.candidateExam.question_answers,\n            item,\n            findQuestionType(item.type, props.questionTypes.questionTypes)!\n          ) === true\n      );\n      if (check !== undefined) {\n        props.SubmitAnswer();\n      }\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-0 flex flex-row justify-between items-center mr-2 px-2 bg-gray-700 rounded w-full\">\n      {/* {console.log(\"Selected: \", selectedIndexNext)} */}\n      <div className=\"flex flex-row items-center\">\n        <div\n          onClick={() =>\n            props.setProfileWindowStatus(!props.windowStatus.profile)\n          }\n          className={`cursor-pointer flex justify-center items-center bg-gray-700 my-2 px-1 rounded`}\n        >\n          <div className=\"group cursor-pointer text-gray-100 hover:text-blue-700 h-full py-2 pl-2 pr-3 rounded shadow-lg bg-gray-600 hover:bg-blue-200 w-max\">\n            <div>\n              <div\n                className={`${\n                  props.proctoring.events.length === 0\n                    ? \"text-white bg-gray-900 group-hover:bg-gray-100 group-hover:text-gray-700\"\n                    : \"bg-red-600 text-white\"\n                } text-xs font-bold p-1 rounded-full flex justify-center items-center shadow-lg h-6 w-6`}\n                style={{ position: \"relative\", top: \"-10px\", right: \"-12px\" }}\n              >\n                {props.proctoring.events.length}\n              </div>\n            </div>\n            {props.proctoring.events.length > 0 ? (\n              <IoNotifications className=\"text-2xl -mt-5\" />\n            ) : (\n              <FaUserCircle className=\"text-2xl -mt-5\" />\n            )}\n          </div>\n          {props.windowStatus.questionsList === true && (\n            <div\n              className={`${\n                props.proctoring.events.length === 0\n                  ? \"text-gray-300\"\n                  : \"text-yellow-500\"\n              } bg-gray-700  px-1 py-1 rounded text-xs ml-1 font-bold`}\n            >\n              {props.proctoring.events.length === 0 ? (\n                <>\n                  No events <br />\n                  are available\n                </>\n              ) : (\n                <>\n                  New events <br />\n                  are available\n                </>\n              )}\n            </div>\n          )}\n        </div>\n\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexPrevious - 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex justify-center items-center\"\n          style={{ height: \"fit-content\" }}\n        >\n          <MdChevronLeft className=\"text-xl\" />{\" \"}\n          <span className=\"hidden md:block\">Previous</span>\n        </button>\n\n        <div className=\"hidden md:flex flex-col text-gray-400 px-2\">\n          <span className=\"font-bold\">\n            Question{\" \"}\n            {props.candidateExam.selected_question &&\n              findIndex(props.candidateExam.selected_question) + 1}\n          </span>\n          {props.submitQuestionAnswer === true ? (\n            <span className=\"text-xs text-yellow-500 animate-pulse font-bold\">\n              Saving question answer...\n            </span>\n          ) : (\n            <span className=\"text-xs\">Auto save is activated</span>\n          )}\n        </div>\n      </div>\n      <div className=\"flex flex-row gap-1\">\n        {/* <div className=\"px-3 py-2 rounded hover:bg-gray-800 shadow-lg cursor-pointer bg-gray-600 text-white flex items-center\"><BiChat className=\"text-2xl\" />&nbsp; <span className=\"hidden md:block\">Discussion</span></div> */}\n        <button\n          onClick={() =>\n            props.candidateExam.candidate_exam &&\n            props.candidateExam.selected_exam_id &&\n            ConfirmSubmitAnswer(\n              props.candidateExam.candidate_exam.exam_paper_id,\n              props.candidateExam.candidate_exam.questions[\n                selectedIndexNext + 1\n              ].question_id\n            )\n          }\n          className=\"btn btn-blue flex items-center px-2 py-2 my-1\"\n        >\n          <span className=\"hidden md:block\">Next</span>{\" \"}\n          <MdChevronRight className=\"text-xl\" />\n        </button>\n        {props.submitQuestionAnswer === true ? (\n          <div className=\"btn bg-gray-600 text-white px-2 py-2 my-1 font-bold border border-gray-600 animate-pulse\">\n            Saving...\n          </div>\n        ) : (\n          <button\n            onClick={() => {\n              props.SubmitAnswer();\n              props.setSubmitModal(true);\n            }}\n            type=\"button\"\n            className=\"bg-green-700 hover:bg-green-600 border border-white text-white rounded flex flex-row justify-center items-center gap-2 px-2 py-2 my-1 mx-2 float-right\"\n          >\n            <MdCheckCircle className=\"text-white text-xl\" />\n            <span className=\"mr-2\">Submit </span>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    system: system,\n    proctoring: proctoring,\n  };\n};\n\nconst Footer = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_Footer);\n\nexport default Footer;\n","import React from \"react\";\nimport { IoClose } from \"react-icons/io5\";\nimport userImage from \"../../../assets/profile.png\";\n\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring } from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { DATE } from \"../../../utils/functions\";\n\ninterface ProfileProps {\n  setProfileWindowStatus: (status: boolean) => void;\n  auth: Auth;\n  proctoring: Proctoring;\n}\n\nconst _Profile = (props: ProfileProps) => {\n  return (\n    <div className=\"h-full bg-gray-800 border-r-4 border-gray-700\">\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"bg-gray-800 pb-5\">\n          <div className=\"rounded-lg flex flex-col justify-center items-center text-center mt-1\">\n            <div className=\"w-full bg-gray-800 py-2 px-2 flex flex-row justify-between items-center\">\n              <span className=\"text-xl text-white font-bold\">My profile</span>\n              <div className=\"rounded-full flex justify-center items-center bg-gray-700 p-1\">\n                <IoClose\n                  onClick={() => props.setProfileWindowStatus(false)}\n                  className=\"text-white text-2xl hover:text-blue-400 cursor-pointer\"\n                />\n              </div>\n            </div>\n            <div\n              className=\"rounded-md bg-gray-600 mb-3 mx-2 flex justify-center items-center overflow-hidden\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            >\n              <img src={userImage} alt=\"\" />\n            </div>\n            <span className=\"text-gray-300 text-xs\">\n              {props.auth.user.fname} {props.auth.user.lname}\n            </span>\n            <span className=\"text-gray-400 text-xs\">\n              ID: {props.auth.user.n_id}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-800 h-full\">\n          <div className=\"flex flex-row justify-between items-center text-white py-2 px-2 bg-gray-700\">\n            <span>Events</span>\n            <span>{props.proctoring.events.length}</span>\n          </div>\n          <div\n            className=\"flex flex-col px-2 text-xs h-screen md:h-full overflow-y-auto\"\n            style={{ paddingBottom: \"550px\", paddingTop: \"10px\" }}\n          >\n            {props.proctoring.events.length === 0 ? (\n              <div className=\"text-white font-bold\">No events found!</div>\n            ) : (\n              props.proctoring.events.map((item, i) => (\n                <div className=\"flex flex-col text-gray-300 border-b py-2 border-gray-700\">\n                  <div\n                    key={i + 1}\n                    className=\"flex flex-row items-center my-1 gap-2\"\n                  >\n                    <div className=\"bg-gray-600 text-white h-6 w-6 px-3 rounded-full flex items-center justify-center\">\n                      {i + 1}\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span>{item.event_type_id}</span>\n                      <span className=\"font-bold\">{item.description}</span>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row justify-between items-center\">\n                    <span className=\"text-gray-500\">\n                      {DATE(item.time, \"DD/MM/YYYY\")}\n                    </span>\n                    <span className=\"bg-gray-600 px-2 rounded-full text-xs font-bold text-yellow-300\">\n                      {new Date(item.time).getHours()} :\n                      {new Date(item.time).getMinutes()} :\n                      {new Date(item.time).getSeconds()}\n                    </span>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  proctoring,\n}: StoreState): { auth: Auth; proctoring: Proctoring } => {\n  return { auth: auth, proctoring: proctoring };\n};\n\nconst Profile = connect(mapStateToProps, {})(_Profile);\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { MdRadioButtonChecked, MdRadioButtonUnchecked } from \"react-icons/md\";\nimport {\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionItemInterface,\n  QuestionLanguage,\n  QuestionLanguages,\n} from \"../../../interfaces/index\";\nimport { newAnswer } from \"../DoExam\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  examDataInterface,\n  System,\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  QuestionAnswersStore,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\n// import { exam_question } from \"../../../interfaces/exam_question\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { LoadingType } from \"../../../components/Loading/LoadingV2\";\nimport MultipleChoice from \"./Answers/MultipleChoice\";\nimport {\n  toCalculatedMultipleChoice,\n  toEssay,\n  toMatching,\n  toMultipleChoice,\n  toNumerical,\n  toShortAnswer,\n  toSimpleCalculated,\n  toTrueFalse,\n} from \"./ConvertingAnswers\";\nimport { findQuestionType } from \"../utils/utils\";\nimport TrueFalse from \"./Answers/TrueFalse\";\nimport Matching from \"./Answers/Matching\";\nimport SimpleCalculated from \"./Answers/SimpleCalculated\";\nimport ShortAnswer from \"./Answers/ShortAnswer\";\nimport Numerical from \"./Answers/Numerical\";\nimport CalculatedMultipleChoice from \"./Answers/CalculatedMultipleChoice\";\nimport { BiWorld } from \"react-icons/bi\";\nimport { AiFillCaretDown } from \"react-icons/ai\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { Shuffle } from \"../../../utils/functions\";\nimport { questionTypeElementsType } from \"@mastrecruit/common\";\nimport { exam_question } from \"../../../interfaces/exam_question\";\nimport { EmbeddedQuestion } from \"../../../components/QuestionPreview/QuestionPreview\";\nimport Essay from \"./Answers/Essay\";\nimport HybridAnswers from \"./Answers/HybridAnswers\";\n\ninterface QuestionDetailsProps {\n  selectedQuestion: exam_question | null;\n  setSelectedQuestion: (question: exam_question) => void;\n  answerQuestionFn: (answer: QuestionAnswersStore) => void;\n  questionAnswers: newAnswer[] | undefined;\n  doExam: examDataInterface;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  setQuestionLanguage: (lang: QuestionLanguage) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  preview: boolean;\n  submitQuestionAnswer: boolean;\n}\n\nconst _QuestionDetails = (props: QuestionDetailsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selectLang, setSelectLang] = useState<boolean>(false);\n  const QuestionData = (): QuestionInterface | null => {\n    let res = null;\n    if (props.candidateExam.candidate_exam !== null) {\n      let q: QuestionInterface | undefined =\n        props.candidateExam.candidate_exam.questions.find(\n          (itm) =>\n            props.candidateExam.selected_question &&\n            itm.question_id === props.candidateExam.selected_question &&\n            itm.question.find(\n              (testLang) => testLang.language === getDefaultLanguage()\n            ) !== undefined\n        );\n      if (q !== undefined) {\n        res = q;\n      }\n    }\n    return res;\n  };\n\n  const findSelectedQuestionDetails = (): QuestionItemInterface[] => {\n    let res: QuestionItemInterface[] = [];\n    if (props.candidateExam.candidate_exam) {\n      let x = props.candidateExam.candidate_exam.questions.find(\n        (itm) => itm.question_id === props.candidateExam.selected_question\n      );\n      if (x !== undefined) {\n        res = x.question;\n      }\n    }\n    return res;\n  };\n\n  const filterLanguages = () => {\n    let langs: {\n      key: QuestionLanguage;\n      value: string;\n    }[] = [];\n    const selectedQuestionDetails =\n      props.candidateExam.candidate_exam?.questions.find(\n        (itm) => itm.question_id === props.candidateExam.selected_question\n      );\n    if (selectedQuestionDetails !== undefined) {\n      for (let langItem of selectedQuestionDetails.question) {\n        let testLangQ = QuestionLanguages.find(\n          (l) => l.key === langItem.language\n        );\n        if (testLangQ !== undefined) {\n          langs = [...langs, testLangQ];\n        }\n      }\n    }\n    return langs;\n  };\n  const getDefaultLanguage = (): QuestionLanguage => {\n    let questionSelected = props.candidateExam.candidate_exam?.questions.find(\n      (itm) => itm.question_id === props.candidateExam.selected_question\n    );\n    let check = questionSelected?.question.find(\n      (item) => item.language === props.candidateExam.selected_language\n    );\n    if (check === undefined && questionSelected !== undefined) {\n      return questionSelected.question[0].language;\n    }\n    return props.candidateExam.selected_language;\n  };\n\n  // Submit answer function\n  const addAnswerFunction = (data: QuestionAnswerInterface) => {\n    let checkAnswerAvail = props.candidateExam.question_answers.find(\n      (itm) => itm.question_id === QuestionData()!.question_id\n    );\n    //\n    // let newData = data.answer;\n    // if (checkAnswerAvail !== undefined) {\n    //   let newDataAnswer:QuestionAnswerInterface | undefined = checkAnswerAvail.answers.find(itm => itm._id === data._id);\n    //   if (newDataAnswer !== undefined) {\n\n    //   }\n    // }\n\n    console.log(\"checkAnswerAvail a: \", checkAnswerAvail);\n    console.log(\"data a: \", data);\n\n    props.answerQuestionFn({\n      question_id: QuestionData()!.question_id,\n      status: false, //Check if submitted online\n      answers:\n        checkAnswerAvail === undefined\n          ? [data]\n          : [\n              ...checkAnswerAvail.answers.filter(\n                (itm) => itm.reference !== data.reference\n              ),\n              data,\n            ],\n      language: props.candidateExam.selected_language,\n    });\n  };\n  useEffect(() => {\n    if (\n      props.questionTypes.questionTypes === null ||\n      props.questionTypes.questionTypes.length === 0\n    ) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-gray-800 h-full\">\n      {loading === true ? (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"rounded bg-white px-4 py-4 mt-5 mx-4\">\n            <div className=\"text-2xl mx-4 mb-3\">Loading...</div>\n            <Loading type={LoadingType.white} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-200 px-3 py-2 rounded my-2 mr-2 h-full overflow-y-auto pb-80 md:pb-60\">\n          <div className=\"flex flex-row gap-2 mt-2\">\n            <div className=\"flex flex-col md:flex-row md:justify-between w-full\">\n              {QuestionData() !== null &&\n                QuestionData()?.question.find(\n                  (itm) => itm.language === getDefaultLanguage()\n                ) && (\n                  <div className=\"text-md flex flex-col w-full\">\n                    <div className=\"flex flex-row justify-between mb-2\">\n                      <div className=\"flex flex-row gap-2 items-center justify-between w-full\">\n                        <span className=\"text-sm text-gray-600\">\n                          {QuestionData() !== null &&\n                            QuestionData()?.question.find(\n                              (itm) => itm.language === getDefaultLanguage()\n                            )?.title}\n                        </span>\n                        <div className=\"text-sm bg-blue-600  rounded-full font-bold px-2 py-1 mx-2 my-1 text-white\">\n                          <span className=\"font-extrabold text-white\">\n                            {QuestionData() !== null && QuestionData()?.marks}\n                          </span>{\" \"}\n                          Mark(s)\n                        </div>\n                      </div>\n                      {/* Languages */}\n                      <div className=\"bg-white rounded h-10 hover:bg-white cursor-pointer w-max\">\n                        <div\n                          onClick={() => setSelectLang(!selectLang)}\n                          className=\"flex flex-row items-center gap-2\"\n                        >\n                          <div className=\"rounded-l\">\n                            <BiWorld className=\"text-2xl my-2 ml-2\" />\n                          </div>\n                          <div\n                            className=\"flex flex-col\"\n                            style={{ width: \"97px\" }}\n                          >\n                            <span className=\"text-xs font-bold italic text-gray-700\">\n                              Language\n                            </span>\n                            <span\n                              title={\n                                filterLanguages().find(\n                                  (itm) => itm.key === getDefaultLanguage()\n                                )?.value\n                              }\n                              className=\"text-sm font-bold text-blue-600 truncate\"\n                              style={{ width: \"97px\" }}\n                            >\n                              {\n                                filterLanguages().find(\n                                  (itm) => itm.key === getDefaultLanguage()\n                                )?.value\n                              }\n                            </span>\n                          </div>\n                          <div\n                            className={`${\n                              selectLang === true\n                                ? \"bg-yellow-800 text-white\"\n                                : \"bg-gray-50 hover:bg-blue-600\"\n                            } h-10 rounded-r border-l border-gray-300 flex flex-row items-center justify-center cursor-pointer hover:text-white hover:border-white`}\n                          >\n                            {selectLang === true ? (\n                              <FaTimes className=\"text-xl my-2 mx-2\" />\n                            ) : (\n                              <AiFillCaretDown className=\"text-xl mb-1 mt-2 mx-2\" />\n                            )}\n                          </div>\n                        </div>\n                        {selectLang === true && (\n                          <div\n                            className=\"relative rounded overflow-hidden\"\n                            style={{ width: \"182px\" }}\n                          >\n                            <div className=\"bg-blue-700 animate__animated animate__fadeIn animate__faster rounded-b w-full right-0 flex flex-col\">\n                              {filterLanguages().map((item, i) => (\n                                <span\n                                  onClick={() => {\n                                    props.setQuestionLanguage(item.key);\n                                    setSelectLang(!selectLang);\n                                  }}\n                                  key={i + 1}\n                                  className={`flex flex-row items-center animate__animated animate__fadeInDown animate__faster text-white text-sm px-2 py-2 border-2 ${\n                                    getDefaultLanguage() === item.key\n                                      ? \"bg-blue-800 font-extrabold border-blue-800\"\n                                      : \"bg-blue-500 text-blue-100 border-blue-500 hover:bg-blue-700 hover:border-blue-700\"\n                                  }`}\n                                >\n                                  {getDefaultLanguage() === item.key ? (\n                                    <MdRadioButtonChecked className=\"text-xl mr-2\" />\n                                  ) : (\n                                    <MdRadioButtonUnchecked className=\"text-xl mr-2\" />\n                                  )}{\" \"}\n                                  {item.value}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    {QuestionData() !== null &&\n                    findQuestionType(\n                      QuestionData()!.type,\n                      props.questionTypes.questionTypes\n                    ) !== null &&\n                    findQuestionType(\n                      QuestionData()!.type,\n                      props.questionTypes.questionTypes\n                    ) === questionTypeElementsType.Embedded ? (\n                      EmbeddedQuestion(\n                        QuestionData()!,\n                        props.questionTypes.questionTypes,\n                        getDefaultLanguage(),\n                        props.candidateExam.question_answers,\n                        addAnswerFunction\n                      )\n                    ) : (\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: QuestionData()!.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )!.description,\n                        }}\n                        className=\"text-lg text-gray-800 font-bold\"\n                      ></div>\n                    )}\n                  </div>\n                )}\n            </div>\n          </div>\n          <div\n            className={`my-4 py-2 px-2 ${\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Embedded\n                ? \"\"\n                : \"bg-white\"\n            }  rounded`}\n            onClick={() => selectLang === true && setSelectLang(false)}\n          >\n            {/* Single and Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              (findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.MultipleChoice ||\n                findQuestionType(\n                  props.candidateExam.candidate_exam?.questions.find(\n                    (itm) =>\n                      itm.question_id === props.candidateExam.selected_question\n                  )?.type,\n                  props.questionTypes.questionTypes\n                ) === questionTypeElementsType.SingleMultiple) && (\n                <MultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n            {/* True and False */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.TrueFalse && (\n                <TrueFalse\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toTrueFalse(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n            {/* Matching Question */}\n            {/* {console.log(\n              \"Type: \",\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              )\n            )} */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Matching && (\n                <Matching\n                  selectedLanguage={getDefaultLanguage()}\n                  selectedExam={props.candidateExam.candidate_exam}\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toMatching(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers[0].answer\n                    ),\n                    shuffledAnswers: Shuffle(\n                      toMatching(\n                        findSelectedQuestionDetails().find(\n                          (itm) => itm.language === getDefaultLanguage()\n                        )!.answers[0].answer\n                      )\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n            {/* Simple Calculated */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.SimpleCalculate && (\n                <SimpleCalculated\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toSimpleCalculated(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n            {/* Short Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.ShortAnswer && (\n                <ShortAnswer\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toShortAnswer(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers.length === 0\n                        ? []\n                        : findSelectedQuestionDetails().find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )!.answers[0].answer\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n            {/* Numerical Answer */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Numeric && (\n                <Numerical\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toNumerical(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n            {/* Calculated Multiple choice */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.CalculatedMultipleChoice && (\n                <CalculatedMultipleChoice\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toCalculatedMultipleChoice(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n            {/* Essay question */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Essay && (\n                <Essay\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: toEssay(\n                      findSelectedQuestionDetails().find(\n                        (itm) => itm.language === getDefaultLanguage()\n                      )!.answers[0].answer\n                    ),\n                    selectedAns: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers[0],\n                  }}\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                />\n              )}\n\n            {/* Hybrid answer unique: it combines th above questions */}\n            {props.candidateExam.selected_question !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) !== null &&\n              findQuestionType(\n                props.candidateExam.candidate_exam?.questions.find(\n                  (itm) =>\n                    itm.question_id === props.candidateExam.selected_question\n                )?.type,\n                props.questionTypes.questionTypes\n              ) === questionTypeElementsType.Hybrid && (\n                <HybridAnswers\n                  type={findQuestionType(\n                    props.candidateExam.candidate_exam?.questions.find(\n                      (itm) =>\n                        itm.question_id ===\n                        props.candidateExam.selected_question\n                    )?.type,\n                    props.questionTypes.questionTypes\n                  )}\n                  available_answers={props.candidateExam.question_answers}\n                  selectedQuestionAnswer={{\n                    question_id: props.candidateExam.selected_question,\n                    question:\n                      QuestionData() !== null\n                        ? QuestionData()?.question.find(\n                            (itm) => itm.language === getDefaultLanguage()\n                          )\n                        : undefined,\n                    answers: findSelectedQuestionDetails().find(\n                      (itm) => itm.language === getDefaultLanguage()\n                    )!.answers,\n                  }}\n                  wholeQuestion={\n                    QuestionData() !== null\n                      ? QuestionData()?.question.find(\n                          (itm) => itm.language === getDefaultLanguage()\n                        )\n                      : undefined\n                  }\n                  answerQuestionFn={(answer: QuestionAnswersStore) => {\n                    console.log(\"Sub ans: \", answer);\n                    addAnswerFunction(answer.answers[0]);\n                  }}\n                  selectedLanguage={getDefaultLanguage()}\n                  selectedExam={props.candidateExam.candidate_exam}\n                />\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n  questionTypes,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  questionTypes: questionTypesStoreInterface;\n} => {\n  return {\n    auth: auth,\n    candidateExam: candidateExam,\n    system: system,\n    questionTypes: questionTypes,\n  };\n};\n\nconst QuestionDetails = connect(mapStateToProps, {\n  setSelectedExamQuestion,\n  setQuestionLanguage,\n  loadQuestionTypes,\n})(_QuestionDetails);\n\nexport default QuestionDetails;\n","import { questionTypeElementsType } from \"@mastrecruit/common\";\nimport React, { useState } from \"react\";\nimport { IoMdInformationCircle } from \"react-icons/io\";\nimport { MdCheckCircle, MdClose } from \"react-icons/md\";\nimport { Auth } from \"../../../actions/auth\";\nimport { candidateExamStoreInterface } from \"../../../actions/candidate_exam\";\nimport { questionTypesStoreInterface } from \"../../../actions/questionTypes\";\nimport { System } from \"../../../actions/system\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport { EmbeddedQuestion } from \"../../../components/QuestionPreview/QuestionPreview\";\nimport { course } from \"../../../interfaces/course\";\nimport {\n  QuestionAnswerInterface,\n  QuestionInterface,\n  QuestionLanguage,\n} from \"../../../interfaces/question\";\nimport {\n  ExamAnsweredQuestions,\n  ExamPendingQuestions,\n  findQuestionType,\n} from \"../utils/utils\";\nimport FindAnswer from \"./FindAnswer\";\nimport FindAnswerHybrid from \"./FindAnswerHybrid\";\n\ninterface QuestionsReviewProps {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  selectedExam: course | null;\n  setSubmitModal: (status: boolean) => void;\n  selectedLanguage: QuestionLanguage;\n}\n\nconst QuestionsReview = (props: QuestionsReviewProps) => {\n  const [submitAnswerState, setSubmitAnswerState] = useState<boolean>(false);\n  const AnsweredQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  const PendingQuest: QuestionInterface[] = props.candidateExam.candidate_exam\n    ? ExamPendingQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : [];\n  if (props.submitQuestionAnswer === true) {\n    return (\n      <div className=\"bg-white rounded mx-4 my-4\">\n        <div className=\"text-gray-600 mx-4\">Saving changes, Please wait...</div>\n        <Loading />\n      </div>\n    );\n  }\n  return (\n    <div\n      className={`pt-4 border-t border-gray-300 ${\n        PendingQuest.length === 0 ? \"bg-gray-100\" : \"bg-white\"\n      }`}\n    >\n      {props.candidateExam.candidate_exam &&\n      AnsweredQuest.length !==\n        props.candidateExam.candidate_exam.questions.length &&\n      PendingQuest.length !== 0 ? (\n        <div>\n          <div className=\"grid md:grid-cols-2 h-full\">\n            <div className=\"md:col-span-2 h-full\">\n              <div className=\"mb-3 rounded-t bg-gray-200 h-full px-2 py-4 -mt-4 pl-4 flex flex-row justify-between\">\n                {/* <RiErrorWarningFill className=\"text-6xl text-gray-400\" /> */}\n                <div className=\"flex flex-col\">\n                  <div className=\"text-2xl text-gray-900 font-extrabold mb-2 text-left\">\n                    Submit with incomplete questions\n                  </div>\n                  <div className=\"text-gray-700 text-sm text-left pb-2\">\n                    Please, make sure to complete the following remaining\n                    questions which are not yet answered. Please, if you proceed\n                    anyway, for these questions, you will not be marked!\n                  </div>\n                </div>\n                <div className=\"mr-4\">\n                  <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n                    <MdClose\n                      className=\"cursor-pointer font-extrabold text-3xl\"\n                      onClick={() => props.setSubmitModal(false)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            {submitAnswerState === false && (\n              <div className=\"md:col-span-2\">\n                <div className=\"\">\n                  <div className=\"border-2 border-yellow-500 bg-yellow-50 px-2 py-3 rounded mx-4\">\n                    {/* <div className=\"text-xl text-center text-gray-700 font-bold\">List of incomplete questions</div> */}\n                    <div className=\"text-center mb-5 text-gray-600 font-bold\">\n                      Pick a question number you want to answer directly\n                    </div>\n                    <div className=\"flex justify-center items-center text-center\">\n                      <div className=\"flex flex-row items-center justify-center gap-4 w-full overflow-x-auto pb-2\">\n                        {props.candidateExam.candidate_exam.questions.map(\n                          (item, i) =>\n                            PendingQuest.find(\n                              (itm) => itm.question_id === item.question_id\n                            )?.question_id !== undefined && (\n                              <div\n                                onClick={() => {\n                                  props.candidateExam.candidate_exam &&\n                                    props.setSelectedExamQuestion(\n                                      props.candidateExam.candidate_exam\n                                        .exam_paper_id,\n                                      item.question_id\n                                    );\n                                  props.setSubmitModal(false);\n                                }}\n                                key={i + 1}\n                                className=\"w-10 h-10 p-4 rounded-full bg-yellow-600 flex justify-center items-center font-bold text-2xl text-white cursor-pointer\"\n                              >\n                                {i + 1}\n                              </div>\n                            )\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row items-center justify-between my-2 gap-3 mx-4 mb-16\">\n                    <div\n                      onClick={() => props.setSubmitModal(false)}\n                      className=\"bg-gray-300 font-bold text-gray-800 flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-400 text-base\"\n                    >\n                      Back to edit\n                    </div>\n                    <div\n                      onClick={() => {\n                        if (\n                          window.confirm(\n                            \"Are you sure do you want submit your exam with question not answered?\"\n                          ) === true\n                        ) {\n                          props.submitExam();\n                        }\n                      }}\n                      className=\"bg-blue-100 text-blue-700 font-bold flex items-center rounded px-3 py-2 cursor-pointer hover:bg-blue-300\"\n                    >\n                      Submit anyway\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"px-4 pb-2\">\n          <div className=\"flex flex-row items-center justify-between mb-4\">\n            <div className=\"text-blue-700 font-bold\">\n              {submitAnswerState === false && (\n                <span>\n                  Hey{\" \"}\n                  <b>\n                    <u>{props.auth.user.fname}</u>\n                  </b>\n                  , All questions have been answered, are you sure do you want\n                  to submit the final answers?\n                </span>\n              )}\n            </div>\n            <div className=\"bg-white hover:text-red-700 hover:bg-red-200 rounded-full p-1 h-10 w-10 flex items-center justify-center\">\n              <MdClose\n                className=\"cursor-pointer font-extrabold text-3xl\"\n                onClick={() => props.setSubmitModal(false)}\n              />\n            </div>\n          </div>\n          {submitAnswerState === false && (\n            <div className=\"flex flex-row items-center justify-between\">\n              <div\n                onClick={() => props.setSubmitModal(false)}\n                className=\"btn cursor-pointer bg-gray-300 hover:bg-gray-400 text-gray-800 flex flex-row gap-2\"\n              >\n                <span className=\"\">Back to edit</span>\n              </div>\n              <div\n                onClick={() => {\n                  setSubmitAnswerState(true);\n                }}\n                className=\"btn cursor-pointer bg-blue-600 hover:bg-blue-800 text-white flex flex-row items-center gap-2 animate__animated animate__zoomIn\"\n              >\n                <MdCheckCircle className=\"text-3xl\" />\n                <span className=\"\">Submit exam</span>\n              </div>\n            </div>\n          )}\n\n          {submitAnswerState === false ? (\n            <div className=\"my-2\">\n              <div className=\"font-extrabold text-xl text-yellow-900 my-2 mt-4\">\n                Verify your answers\n              </div>\n              <div\n                className=\"flex flex-col gap-3 overflow-y-auto\"\n                style={{ maxHeight: \"100%\" }}\n              >\n                {props.candidateExam.candidate_exam === null ? (\n                  <Loading />\n                ) : (\n                  AnsweredQuest.length > 0 &&\n                  AnsweredQuest.map((item, i) => (\n                    <div\n                      key={i + 1}\n                      className=\"bg-white hover:bg-white border border-white hover:border-blue-400 px-2 py-2 rounded  animate__animated animate__fadeIn animate__fast group\"\n                    >\n                      <div className=\"grid md:grid-cols-12 w-full\">\n                        <div className=\"col-span-11 flex flex-row items-center gap-3\">\n                          <div\n                            key={i + 1}\n                            className=\"w-6 h-6 p-2 rounded-full bg-gray-600 flex justify-center items-center font-bold text-lg text-white cursor-pointer\"\n                          >\n                            {i + 1}\n                          </div>\n                          <div className=\"text-sm w-full\">\n                            {item.question.find(\n                              (test) => test.language === props.selectedLanguage\n                            ) !== undefined ? (\n                              findQuestionType(\n                                item.type,\n                                props.questionTypes.questionTypes\n                              ) === questionTypeElementsType.Embedded ? (\n                                EmbeddedQuestion(\n                                  item!,\n                                  props.questionTypes.questionTypes,\n                                  props.selectedLanguage,\n                                  props.candidateExam.question_answers,\n                                  (data: QuestionAnswerInterface) => {}\n                                )\n                              ) : (\n                                <div\n                                  className=\"font-bold text-gray-700 text-base\"\n                                  dangerouslySetInnerHTML={{\n                                    __html: item.question.find(\n                                      (test) =>\n                                        test.language === props.selectedLanguage\n                                    )!.description,\n                                  }}\n                                ></div>\n                              )\n                            ) : (\n                              item.question.length > 0 && (\n                                <div\n                                  className=\"font-bold text-gray-700 text-base max-h-20 truncate\"\n                                  dangerouslySetInnerHTML={{\n                                    __html: item.question[0].description,\n                                  }}\n                                ></div>\n                              )\n                            )}\n                            <div className=\"text-blue-700 font-bold text-sm w-full\">\n                              {findQuestionType(\n                                item.type,\n                                props.questionTypes.questionTypes\n                              ) === questionTypeElementsType.Embedded\n                                ? \"\"\n                                : \"Answer:\"}\n                              &nbsp;{\" \"}\n                              {props.questionTypes.questionTypes !== null &&\n                              findQuestionType(\n                                item.type,\n                                props.questionTypes.questionTypes\n                              ) === questionTypeElementsType.Hybrid ? (\n                                <FindAnswerHybrid\n                                  auth={props.auth}\n                                  candidateExam={props.candidateExam}\n                                  system={props.system}\n                                  setSelectedExamQuestion={\n                                    props.setSelectedExamQuestion\n                                  }\n                                  submitQuestionAnswer={\n                                    props.submitQuestionAnswer\n                                  }\n                                  questionTypes={props.questionTypes}\n                                  loadQuestionTypes={props.loadQuestionTypes}\n                                  submitExam={props.submitExam}\n                                  selectedExam={props.selectedExam}\n                                  setSubmitModal={props.setSubmitModal}\n                                  selectedLanguage={props.selectedLanguage}\n                                  wholeQuestion={item}\n                                  answersList={\n                                    props.candidateExam.question_answers\n                                  }\n                                />\n                              ) : (\n                                props.questionTypes.questionTypes !== null && (\n                                  <FindAnswer\n                                    selectedLanguage={props.selectedLanguage}\n                                    question={item}\n                                    answersList={\n                                      props.candidateExam.question_answers\n                                    }\n                                    questionTypes={\n                                      props.questionTypes.questionTypes\n                                    }\n                                    onClick={() => {\n                                      props.candidateExam.candidate_exam &&\n                                        props.setSelectedExamQuestion(\n                                          props.candidateExam.candidate_exam\n                                            .exam_paper_id,\n                                          item.question_id\n                                        );\n                                      props.setSubmitModal(false);\n                                    }}\n                                    showCorrectAnswer={false}\n                                  />\n                                )\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col-span-12 md:col-span-1 float-right flex items-center justify-end pt-2 md:pt-0\">\n                          <div\n                            onClick={() => {\n                              props.candidateExam.candidate_exam &&\n                                props.setSelectedExamQuestion(\n                                  props.candidateExam.candidate_exam\n                                    .exam_paper_id,\n                                  item.question_id\n                                );\n                              props.setSubmitModal(false);\n                            }}\n                            className=\"bg-blue-100 rounded px-2 py-1 text-center float-right cursor-pointer font-bold text-md text-blue-600 border border-blue-400 group-hover:bg-blue-600 group-hover:text-white group-hover:border-none flex items-center justify-center h-max md:ml-3\"\n                          >\n                            Edit\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className=\"flex flex-row items-center justify-center mb-10 -mt-5\">\n              <div className=\"bg-white rounded-md p-6 animate__animated animate__zoomIn animate__faster w-max border border-gray-300\">\n                <div className=\"flex flex-row items-center justify-center w-full\">\n                  <IoMdInformationCircle className=\"text-7xl\" />\n                </div>\n                <div className=\"text-center text-2xl\">\n                  <span className=\"text-black\">\n                    Are you sure do you want to submit your exam?\n                  </span>\n                </div>\n                <div>\n                  <div className=\"flex flex-row items-center justify-center my-2 gap-3 mx-4 mb-16\">\n                    <div\n                      onClick={() => setSubmitAnswerState(false)}\n                      className=\"bg-gray-200 font-bold text-gray-800 hover:text-white flex items-center rounded px-3 py-2 cursor-pointer hover:bg-gray-600 text-base\"\n                    >\n                      No, back to edit\n                    </div>\n                    <div\n                      onClick={() => {\n                        props.submitExam();\n                      }}\n                      className=\"bg-green-700 hover:bg-green-900 text-white font-bold flex items-center rounded px-3 py-2 cursor-pointer\"\n                    >\n                      Yes, submit exam\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionsReview;\n","import React, { Fragment } from \"react\";\nimport { IoDocumentTextOutline } from \"react-icons/io5\";\nimport Modal, {\n  Themes,\n  ModalSize,\n  ModalMarginTop,\n} from \"../../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  candidateExamStoreInterface,\n  SubmitExamAnswers,\n  System,\n  setSelectedExamQuestion,\n  questionTypesStoreInterface,\n} from \"../../../actions\";\nimport { StoreState } from \"../../../reducers\";\nimport { NumberOfAnsweredQuestions } from \"../utils/utils\";\nimport { course } from \"../../../interfaces\";\nimport QuestionsReview from \"./QuestionsReview\";\n// import { CountDown } from \"../../../components/CountDown/CountDown\";\nimport { CountDownLive } from \"../../../components/CountDown/CountDownLive\";\n\ninterface TestTitleInterface {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  setProfileWindowStatus: (status: boolean) => void;\n  setQuestionsListWindowStatus: (status: boolean) => void;\n  setCompletedTest: (state: boolean) => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  submitQuestionAnswer: boolean;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  submitExam: () => void;\n  SubmitAnswer: () => void;\n  selectedExam: course | null;\n  start_time: string;\n  duration_min: number;\n  timeout: () => void;\n  setSubmitModal: (status: boolean) => void;\n  submitModalStatus: boolean;\n  room_id: string;\n  setRequestingExamMarks: (status: boolean) => void;\n  setExamTotalMarks: (marks: number) => void;\n}\n\nconst _DoExamTitle = (props: TestTitleInterface) => {\n  // const [incompleteQuestions, setIncompleteQuestions] = useState<exam_question[] | []>([]);\n\n  const TotalAnswered: number = props.candidateExam.candidate_exam\n    ? NumberOfAnsweredQuestions(\n        props.candidateExam.question_answers,\n        props.candidateExam.candidate_exam.questions,\n        props.questionTypes\n      )\n    : 0;\n  const answeredPercentage = props.candidateExam.candidate_exam\n    ? (TotalAnswered * 100) /\n      props.candidateExam.candidate_exam.questions.length\n    : 0;\n  return (\n    <Fragment>\n      <div className=\"bg-gray-800\">\n        <div className=\"grid grid-cols-12 md:grid-cols-6\">\n          <div className=\"col-span-6 md:col-span-2 lg:col-span-2 text-white flex flex-row justify-start items-center gap-2\">\n            <div className=\"text-white flex flex-row items-center pl-1 py-3 lg:py-0 w-full\">\n              <div>\n                <IoDocumentTextOutline className=\"text-3xl ml-0\" />\n              </div>\n              <div className=\"mr-3 ml-1 lg:ml-3 flex flex-col w-full\">\n                <span className=\"font-bold text-lg truncate -mb-1\">\n                  {props.selectedExam?.course_name}\n                </span>\n                <span className=\"text-gray-300 text-xs truncate\">\n                  Code: {props.selectedExam?.course_code}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"col-span-6 md:col-span-4 lg:col-span-4\"\n            style={{ alignSelf: \"center\" }}\n          >\n            <div className=\"grid md:grid-cols-8 lg:grid-cols-12\">\n              <div className=\"hidden col-span-3 md:flex flex-col justify-center items-center h-full gap-1\">\n                <div className=\"text-gray-200 text-sm w-full hidden lg:block\">\n                  Completed {TotalAnswered} of{\" \"}\n                  {props.candidateExam.candidate_exam &&\n                    props.candidateExam.candidate_exam.questions.length}\n                </div>\n                <div className=\"bg-gray-600 h-3 w-full rounded-full shadow-md hidden lg:block\">\n                  <div\n                    className=\"bg-gray-400 h-3 w-60 rounded-full shadow-md\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  ></div>\n                </div>\n                <div className=\"h-auto my-2 w-full bg-gray-700 rounded-full flex justify-start items-center shadow-lg lg:hidden\">\n                  <div\n                    className=\"rounded-full bg-gray-500 h-full text-xs flex items-center justify-center font-bold text-white\"\n                    style={{ width: `${answeredPercentage}%` }}\n                  >\n                    <div className=\"relative left-0 bg-gray-500 px-1 rounded-full\">\n                      {answeredPercentage.toFixed(0)}%\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-4 hidden lg:block h-full\">\n                <div className=\"flex flex-row justify-center items-center h-full\">\n                  <div className=\"flex flex-col text-sm justify-center items-center text-gray-400\">\n                    <div>\n                      Start time:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam?.start_time}\n                      </span>\n                    </div>\n                    <div>\n                      Duration:{\" \"}\n                      <span className=\"font-bold text-gray-200\">\n                        {props.candidateExam.candidate_exam &&\n                        props.candidateExam.candidate_exam.duration / 60 > 1\n                          ? (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hours\"\n                          : props.candidateExam.candidate_exam &&\n                            (\n                              props.candidateExam.candidate_exam.duration / 60\n                            ).toFixed(0) + \" hour\"}\n                        {props.candidateExam.candidate_exam &&\n                          props.candidateExam.candidate_exam.duration % 60 >\n                            0 &&\n                          \", \" +\n                            (props.candidateExam.candidate_exam.duration % 60) +\n                            \" mins\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-span-5 bg-gray-800\">\n                <div className=\"flex flex-row justify-between md:justify-end items-center h-full gap-2\">\n                  <div className=\"flex flex-col text-xs items-end justify-start text-gray-200 pl-2 md:pl-0 w-full md:pr-2\">\n                    <span>Counting down</span>\n                    <div className=\"text-lg lg:text-xl font-bold\">\n                      {/* <CountDown\n                        start_time={props.start_time}\n                        duration_min={props.duration_min}\n                        timeout={() => props.timeout()}\n                        returnString={true}\n                        labels\n                      />{\" \"}\n                       */}\n                      <CountDownLive\n                        // start_time={props.start_time}\n                        // duration_min={props.duration_min}\n                        room_id={props.room_id}\n                        timeout={() => props.timeout()}\n                        returnString={true}\n                        labels\n                      />\n                      {/* {this.props.procto} */}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {props.submitModalStatus === true && (\n        <Modal\n          title={\"\"}\n          backDrop={true}\n          theme={\n            props.candidateExam.question_answers.length === 0\n              ? Themes.default\n              : Themes.default\n          }\n          close={() => props.setSubmitModal(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.maxWidth}\n          displayClose={false}\n          padding={{ title: false }}\n          marginTop={ModalMarginTop.small}\n        >\n          <QuestionsReview\n            auth={props.auth}\n            candidateExam={props.candidateExam}\n            system={props.system}\n            setSelectedExamQuestion={props.setSelectedExamQuestion}\n            submitQuestionAnswer={props.submitQuestionAnswer}\n            questionTypes={props.questionTypes}\n            loadQuestionTypes={props.loadQuestionTypes}\n            submitExam={props.submitExam}\n            selectedExam={props.selectedExam}\n            setSubmitModal={props.setSubmitModal}\n            selectedLanguage={props.candidateExam.selected_language}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  candidateExam,\n  system,\n}: StoreState): {\n  auth: Auth;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n} => {\n  return { auth: auth, candidateExam: candidateExam, system: system };\n};\n\nconst DoExamTitle = connect(mapStateToProps, {\n  SubmitExamAnswers,\n  setSelectedExamQuestion,\n})(_DoExamTitle);\n\nexport default DoExamTitle;\n","import React from \"react\";\nimport { MdCheckCircleOutline, MdHighlightOff } from \"react-icons/md\";\nimport { InitialExamDetails } from \"../../actions/candidate_exam\";\n\ninterface ProctoringRuleItemProps {\n  examDetails: () => InitialExamDetails | null;\n  rule_key: string;\n}\n\nconst ProctoringRuleItem = (props: ProctoringRuleItemProps) => {\n  const getDetails = () => {\n    let res: {\n      value: string;\n      status: boolean;\n    } | null = null;\n    if (props.examDetails() !== null) {\n      switch (props.rule_key) {\n        case \"right_click_enabled\":\n          res = {\n            value: \"Right click\",\n            status: props.examDetails()!.rules.right_click_enabled,\n          };\n          break;\n        case \"copy_enabled\":\n          res = {\n            value: \"Copy text\",\n            status: props.examDetails()!.rules.copy_enabled,\n          };\n          break;\n        case \"paste_enabled\":\n          res = {\n            value: \"Paste item or text\",\n            status: props.examDetails()!.rules.paste_enabled,\n          };\n          break;\n        case \"stop_candidate_when_comeback\":\n          res = {\n            value: \"Coming back after leaving\",\n            status: props.examDetails()!.rules.stop_candidate_when_comeback,\n          };\n          break;\n        case \"allow_to_leave_browser\":\n          res = {\n            value: \"Leave browser\",\n            status: props.examDetails()!.rules.allow_to_leave_browser,\n          };\n          break;\n      }\n    }\n    return res;\n  };\n  return (\n    <div className=\"flex flex-row items-center justify-between w-full border-b py-2\">\n      <div\n        className={`flex flex-row items-center ${\n          getDetails()?.status === true\n            ? \"text-blue-600 font-bold\"\n            : \"text-yellow-800 font-bold\"\n        }`}\n      >\n        {getDetails()?.status === true ? (\n          <MdCheckCircleOutline className=\"text-2xl mr-3\" />\n        ) : (\n          <MdHighlightOff className=\"text-2xl mr-3\" />\n        )}\n        <span>{getDetails()?.value}</span>\n      </div>\n      <span\n        className={`rounded-full px-3 py-1 border font-bold ${\n          getDetails()?.status === true\n            ? \"bg-white text-blue-800 border-blue-100\"\n            : \"bg-yellow-50 text-yellow-800 border-yellow-100\"\n        }`}\n      >\n        {getDetails()?.status === true ? \"Allowed\" : \"Prohibited\"}\n      </span>\n    </div>\n  );\n};\n\nexport default ProctoringRuleItem;\n","import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  Socket,\n  FC_AddRules,\n  FT_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n  Proctoring,\n  InitialExamDetails,\n  schoolLevelsStoreInterface,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  EventInterface,\n  Events,\n  EventsLabels,\n  LiveServer__Candidate_Details,\n  LiveServer__Room,\n  question_answer,\n} from \"../../interfaces/index\";\nimport {\n  CandidateExam,\n  CandidateExamQuestionAnswer,\n  ExamInterface,\n  ExamResultsDetails,\n  examStatus,\n  UserExamActions,\n  userExamDetails,\n} from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdCheckCircle, MdInfoOutline } from \"react-icons/md\";\nimport ProctoringRuleItem from \"../../components/ProctoringRuleItem/ProctoringRuleItem\";\nimport { findQuestionType, questionAnswered } from \"./utils/utils\";\nimport { MdSignalWifiConnectedNoInternet4 } from \"react-icons/md\";\n\ninterface DoExamProps {\n  proctoring: Proctoring;\n  FC_GetProfileDetails: Function;\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (selected_exam: InitialExamDetails | null) => void;\n  loadCandidateExam: (\n    exam_id: string,\n    CheckUserExam: (candidateExam: CandidateExam) => void,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (\n    userExamDetails: userExamDetails,\n    callback: (loading: boolean) => void,\n    setLoadExamResultMessage: (msg: string, status: boolean) => void,\n    BackToExamination: (exam: ExamResultsDetails) => void\n  ) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  CleanCandidateExamAnswers: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (\n    answer: CandidateExamQuestionAnswer,\n    callback: (loading: boolean) => void,\n    actionStatus: (msg: string, status: boolean) => void\n  ) => void;\n  GetUserExamDetails: (\n    request: RequestUserExamDetailsInterface,\n    callback: (loading: boolean) => void\n  ) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n  setExamStatus: (\n    user: string,\n    exam_paper_id: string,\n    action: UserExamActions,\n    reason: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_SaveEvent: Function;\n  socket: Socket;\n  FC_AddRules: FT_AddRules;\n  loadCandidateExamFromSupervisor: (\n    candidateExam: CandidateExam,\n    firstTime: boolean\n  ) => void;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  schoolLevels: schoolLevelsStoreInterface;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n  changingExamStatus: boolean;\n  inExam: boolean;\n\n  // Exam counter\n  start_exam: boolean;\n  start_time: string;\n  duration: number;\n  added_minutes: number;\n  group_id: string;\n  submittedExam: boolean;\n  candidateDetailsProctoring: LiveServer__Candidate_Details | null;\n  submitModalStatus: boolean;\n  requesting_exam_marks: boolean;\n  total_exam_marks: number | null;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n      changingExamStatus: false,\n      // timer\n      start_exam: false,\n      start_time: \"\",\n      duration: 0,\n      added_minutes: 0,\n      group_id: \"\",\n      inExam: false,\n      submittedExam: false,\n      candidateDetailsProctoring: null,\n      submitModalStatus: false,\n      requesting_exam_marks: false,\n      total_exam_marks: null,\n    };\n  }\n\n  GetUserTotalMarks = async () => {\n    if (this.props.candidateExam.candidate_exam !== null) {\n      this.setRequestingExamMarks(true);\n      try {\n        const res = await axios.post(`${API.DO_EXAM}/answersheet/users/marks`, {\n          course: this.props.candidateExam.candidate_exam.course,\n          period: this.props.candidateExam.candidate_exam.period,\n          user: this.props.auth.user.user_id,\n        });\n        console.log(\"User total marks: \", res.data);\n        this.setExamTotalMarks(parseInt(res.data.user_marks));\n        this.setRequestingExamMarks(false);\n      } catch (error: any) {\n        console.log(\"Requesting total exam marks err: \", { ...error });\n        this.setRequestingExamMarks(false);\n      }\n    }\n  };\n\n  setRequestingExamMarks = (status: boolean) => {\n    this.setState({ requesting_exam_marks: status });\n  };\n  setExamTotalMarks = (marks: number) => {\n    this.setState({ total_exam_marks: marks });\n  };\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  };\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    console.log(\"sUBMITT: \", answer);\n    this.props.setExamQuestionAnswer(answer);\n    // console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  changingExamStatusLoading = (status: boolean) => {\n    this.setState({ changingExamStatus: status });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check;\n      }\n    }\n    return null;\n  };\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (\n      this.props.positions.selected_position !== null &&\n      this.props.candidateExam.selected_exam_details !== null\n    ) {\n      if (this.props.candidateExam.exam_room_details !== null) {\n        // alert(this.props.candidateExam.exam_room_details.district_id)\n        this.props.RequestUserExamDetails(\n          {\n            user: this.props.auth.user.user_id,\n            position: this.props.positions.selected_position.position_id,\n            exam: exam,\n            userExamLocation: {\n              district_id:\n                this.props.candidateExam.exam_room_details.district_id,\n              center_id: this.props.candidateExam.exam_room_details.center_id,\n              room_id: this.props.candidateExam.exam_room_details.room_id,\n            },\n          },\n          this.setLoading,\n          this.setLoadExamResultMessage,\n          this.props.BackToExamination\n        );\n      }\n    }\n  };\n\n  RequestUserExamManually = async (exam_id: string) => {\n    this.setLoading(true);\n    try {\n      const res = await axios.get<CandidateExam>(\n        `${API.DO_EXAM}/exampaper/${exam_id}`\n      );\n      console.log(\"Loaded from bakend: \", res.data);\n      if (res.data && this.props.candidateExam.candidate_exam === null) {\n        this.props.loadCandidateExamFromSupervisor(\n          res.data,\n          this.state.candidateDetailsProctoring !== null &&\n            this.state.candidateDetailsProctoring.user.joined === true\n            ? true\n            : false\n        );\n        this.props.PushPopupAlert({\n          title: \"Success!\",\n          description: \"Exam loaded from server successfully!\",\n          theme: PopupAlertTheme.success,\n        });\n        this.setLoading(false);\n      }\n    } catch (error) {\n      this.setLoading(false);\n      console.log(\"No exam found!\");\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: \"Failed to load candidate exam\",\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  componentWillUnmount = () => {\n    if (this.props.candidateExam.exam_room_details) {\n      this.props.socket.socket.emit(Events.USER_DISCONNECTED_ONLINE_SERVER, {\n        room_id: this.props.candidateExam.exam_room_details.room_id,\n        user_id: this.props.auth.user.user_id,\n      });\n    }\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      // );\n      let test = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.exam_paper ===\n          this.props.candidateExam.candidate_exam?.exam_paper_id\n      );\n      if (test === undefined) {\n        this.props.CleanCandidateExam(\n          this.props.candidateExam.candidate_exam.exam_paper_id\n        );\n      }\n    }\n  };\n\n  SubmitAnswer = () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.question_answers.length > 0\n    ) {\n      let examQuestionIds: string[] = [];\n      for (let temp of this.props.candidateExam.candidate_exam.questions) {\n        examQuestionIds = [...examQuestionIds, temp.question_id];\n      }\n      for (let answer of this.props.candidateExam.question_answers) {\n        let sel_question =\n          this.props.candidateExam.candidate_exam.questions.find(\n            (item) => item.question_id === answer.question_id\n          );\n        if (\n          answer.status === false &&\n          this.props.candidateExam.exam_room_details &&\n          sel_question !== undefined\n        ) {\n          if (\n            questionAnswered(\n              this.props.candidateExam.question_answers,\n              sel_question,\n              findQuestionType(\n                sel_question.type,\n                this.props.questionTypes.questionTypes\n              )!\n            ) === true\n          ) {\n            //Means updated need to be submitted!\n            this.props.SubmitExamQuestionAnswer(\n              {\n                user: this.props.auth.user.user_id,\n                exam_paper:\n                  this.props.candidateExam.candidate_exam.exam_paper_id,\n                // New updates need to be checked\n                position:\n                  this.props.candidateExam.exam_room_details.position\n                    .position_id,\n                disability: this.props.auth.user.disability,\n                fname: this.props.auth.user.fname,\n                lname: this.props.auth.user.lname,\n                gender: this.props.auth.user.sex,\n                email: this.props.auth.user.email,\n                phone_number: this.props.auth.user.phone_number,\n                in_education:\n                  this.props.auth.user.in_education === null\n                    ? false\n                    : this.props.auth.user.in_education,\n                questions_order: examQuestionIds,\n                // End new updates\n                question: answer.question_id,\n                language:\n                  sel_question.question.find(\n                    (itm) =>\n                      itm.language ===\n                      this.props.candidateExam.selected_language\n                  ) === undefined\n                    ? sel_question.question[0].language\n                    : this.props.candidateExam.selected_language,\n                userAnswer: answer.answers,\n                position_code:\n                  this.props.candidateExam.exam_room_details.position\n                    .position_code === null\n                    ? \"\"\n                    : this.props.candidateExam.exam_room_details.position\n                        .position_code,\n              },\n              this.setSubmitQuestionAnswer,\n              this.setLoadExamResultNoMessage\n            );\n          }\n        }\n      }\n    }\n  };\n\n  submitExam = async () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.exam_room_details !== null\n    ) {\n      let exam_id = this.props.candidateExam.candidate_exam.exam_paper_id;\n      let user_id = this.props.auth.user.user_id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(\n          `${API.DO_EXAM}/answersheet/submit/${user_id}/${exam_id}`\n        );\n        if (res) {\n          this.GetUserTotalMarks();\n          this.doneExam();\n          this.setState({ submittedExam: true });\n          // this.props.CleanCandidateExam(exam_id);\n          // Exit full screen\n          if (document.fullscreenElement) {\n            if (document.exitFullscreen) {\n              document.exitFullscreen();\n            }\n          }\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success,\n          });\n        }\n      } catch (error: any) {\n        // console.log(\"Submit exam err: \", { ...error });\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  };\n\n  setSubmitModal = (status: boolean) => {\n    this.setState({ submitModalStatus: status });\n  };\n\n  startExam = () => {\n    // alert(\"Testing...\" + this.props.candidateExam.selected_exam_id);\n    this.setState({ display_exam: true, start_exam: true });\n    this.props.candidateExam.selected_exam_id !== null &&\n      this.requestExam(\n        this.props.candidateExam.selected_exam_id,\n        (status: boolean, exam: CandidateExam) => {\n          // console.log(\"Testing exam from supervisor: \", exam);\n          console.log(\"Requested exam on socket 1: \", exam);\n\n          if (\n            exam === null &&\n            this.props.candidateExam.selected_exam_id !== null\n          ) {\n            this.RequestUserExamManually(\n              this.props.candidateExam.selected_exam_id\n            );\n          } else {\n            if (status === true) {\n              this.props.loadCandidateExamFromSupervisor(\n                exam,\n                this.state.candidateDetailsProctoring !== null &&\n                  this.state.candidateDetailsProctoring.user.joined === true\n                  ? true\n                  : false\n              );\n            }\n          }\n        }\n      );\n  };\n  pauseExam = () => {\n    this.setState({ display_exam: false, start_exam: false, inExam: false });\n  };\n\n  doneExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.schoolLevels.selectedEducationCategory !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.schoolLevels.selectedEducationCategory.session_plan?._id,\n        description: \"Done the exam\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.DONE_EXAM,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id:\n          this.props.candidateExam.exam_room_details.position.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.EXAM_DONE_SERVER, data);\n    }\n  };\n\n  timeOutExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.schoolLevels.selectedEducationCategory !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.schoolLevels.selectedEducationCategory.session_plan?._id,\n        description: \"Time out\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.TIME_OUT,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id:\n          this.props.candidateExam.exam_room_details.position.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.TIME_OUT_SERVER, data);\n      this.submitExam();\n      // console.log(\"this.submitExam(); ==> timeOutExam()\");\n    }\n  };\n\n  requestExam = (\n    exam_id: string,\n    getExam: (status: boolean, exam: CandidateExam) => void\n  ) => {\n    console.log(\"Requested exam ID: \", exam_id);\n    this.props.socket.socket.emit(Events.REQUEST_EXAM_SERVER, exam_id, getExam);\n  };\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/candidate-exams\" />;\n    }\n\n    if (\n      this.state.loading === true ||\n      this.props.candidateExam.exam_room_details === null\n    ) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Loading, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Submitting your exam, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    // Check socket connection\n    if (this.props.auth.socket_failed === true)\n      return (\n        <div className=\" py-8 mt-2 text-center rounded container mx-auto\">\n          <MdSignalWifiConnectedNoInternet4\n            size={100}\n            className=\"mx-auto text-yellow-500 opacity-70 animate__animated animate__fadeIn animate__infinite animate__slow\"\n          />\n\n          <h3 className=\"pt-6 text-xl text-gray-600\">\n            Your computer is not connected to the <b>Live-server</b>\n          </h3>\n          <p>PLease refresh your browser, or use incognito mode</p>\n        </div>\n      );\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50 w-full\">\n        <Fragment>\n          {/* {console.log(\"Rules: \")} */}\n          {this.state.inExam === false ? (\n            <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n              <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n                <div className=\"text-white text-lg px-4 mb-4\">Confirm</div>\n                <div className=\"flex flex-col items-center justify-center mb-10\">\n                  <Loading />\n                  <div className=\"text-yellow-800 text-xl font-bold my-5\">\n                    Something went wrong, retry again!\n                  </div>\n\n                  <div\n                    onClick={() => window.location.reload()}\n                    className=\"btn bg-yellow-100 text-yellow-800 border border-yellow-600 w-max text-center cursor-pointer\"\n                  >\n                    Click here to reload\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <ProctoringCandidateOnline\n              homeProctoring={false}\n              startExam={() => {\n                this.startExam();\n                this.setState({ start_exam: true });\n              }}\n              restartExam={() => {\n                if (this.props.candidateExam.candidate_exam !== null) {\n                  let id =\n                    this.props.candidateExam.candidate_exam.exam_paper_id;\n                  this.props.CleanCandidateExamAnswers(id);\n\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    id,\n                    UserExamActions.Restart,\n                    \"Exam restarted by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n\n                  // this.props.candidateExam.candidate_exam &&\n                  //   this.props.requestUserAnswers(\n                  //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                  //     this.props.auth.user.user_id,\n                  //     this.setLoading\n                  //   );\n                }\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              stopExam={() => {\n                // EXAM DONE ON WHOLE ROOM\n                // Stop all the room\n                // this.setState({ start_exam: false });\n                // console.log(\"DONE whole room\");\n                this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Done,\n                    \"All candidates ended by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              room_id={this.props.candidateExam.exam_room_details.room_id}\n              exam_id={\n                this.props.candidateExam.candidate_exam === null\n                  ? this.props.candidateExam.selected_exam_id\n                  : this.props.candidateExam.candidate_exam.exam_paper_id\n              }\n              position_id={\n                this.props.candidateExam.exam_room_details.position.position_id\n              }\n              application_session_id={\n                this.props.candidateExam.exam_room_details.period_id\n              }\n              removeClient={() => {\n                // REMOVE INDIVIDUAL\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Removed,\n                    \"Exam stopped by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              examAlreadyDone={() => {\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                // console.log(\"Exam already done\");\n              }}\n              candidateStopExam={(reason: string) => {\n                // PAUSE\n                // console.log(`candidateStopExam: ${reason}`);\n                // this.pauseExam();\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Paused,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n              }}\n              candidateContinueExam={(reason: string) => {\n                // console.log(`candidateContinueExam: ${reason}`);\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Continue,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              joinedRoom={(data: LiveServer__Room) => {\n                // console.log(\"Joined room: \", data);\n                this.setState({\n                  group_id: data.group_id,\n                });\n              }}\n              changeTime={(timer: {\n                duration: number;\n                start_time: string;\n                added_minutes: string;\n              }) => {\n                this.setState({\n                  duration: timer.duration,\n                  start_time: timer.start_time,\n                });\n              }}\n              candidateProctoringDetails={(\n                data: LiveServer__Candidate_Details\n              ) => {\n                this.setState({ candidateDetailsProctoring: data });\n                if (data.user.joined === true) {\n                  this.startExam();\n                  this.props.candidateExam.candidate_exam &&\n                    this.props.requestUserAnswers(\n                      this.props.candidateExam.candidate_exam.exam_paper_id,\n                      this.props.auth.user.user_id,\n                      this.setLoading\n                    );\n                }\n                console.log(\"Joined: \", data.user.joined);\n              }}\n              ejectCandidate={(user_id) => {\n                // window\n              }}\n            >\n              {this.state.start_exam === false ||\n              (this.props.candidateExam.candidate_exam === null &&\n                this.state.inExam === true) ? (\n                // || this.props.proctoring.exam.start_exam === false\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    <MdInfoOutline className=\"text-9xl text-blue-600\" />\n                    <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">\n                      Please wait for the supervisor\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The supervisor will allow you to start your exam, please\n                      wait or contact him/her when forgot to let you start exam!\n                    </div>\n\n                    <Loading />\n                    <div className=\"flex flex-row items-center -mt-2\">\n                      <div\n                        onClick={() => window.location.reload()}\n                        className=\"btn bg-blue-100 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-808\"\n                      >\n                        Reload page\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : this.props.candidateExam.candidate_exam === null ||\n                this.props.candidateExam.candidate_exam === null ||\n                this.props.proctoring.exam.start_exam === false ? (\n                <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n                  <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full flex flex-col items-center justify-center\">\n                    <MdInfoOutline className=\"text-9xl text-blue-600\" />\n                    <div className=\"text-gray-700 text-3xl px-4 text-center font-extrabold\">\n                      Please wait for the supervisor\n                    </div>\n                    <div className=\"text-gray-700 text-sm px-4 mb-4 text-center\">\n                      The supervisor will allow you to start your exam, please\n                      wait or contact him/her when forgot to let you start exam!\n                    </div>\n\n                    <Loading />\n                    <div className=\"flex flex-row items-center -mt-2\">\n                      <div\n                        onClick={() => window.location.reload()}\n                        className=\"btn bg-blue-100 text-blue-600 cursor-pointer hover:bg-blue-200 hover:text-blue-808\"\n                      >\n                        Reload page\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <div className=\"fixed top-0 w-full h-screen bg-blue-900 overflow-y-hidden\">\n                    <div className=\"grid md:grid-cols-12 h-full\">\n                      {this.state.windowStatus.profile === true && (\n                        <div\n                          className={`col-span-6 lg:col-span-2 fixed left-0 md:relative`}\n                        >\n                          <Profile\n                            setProfileWindowStatus={this.setProfileWindowStatus}\n                          />\n                        </div>\n                      )}\n                      <div\n                        className={`col-span-${\n                          this.state.windowStatus.profile === false\n                            ? \"12\"\n                            : \"10\"\n                        } bg-gray-800 shadow-lg h-full`}\n                      >\n                        <div className=\"flex flex-row h-screen bg-gray-800\">\n                          <div className=\"h-full\">\n                            {/* Questions list */}\n                            <div className={`h-full`}>\n                              <QuestionsList\n                                windowStatus={this.state.windowStatus}\n                                setProfileWindowStatus={\n                                  this.setProfileWindowStatus\n                                }\n                                setQuestionsListWindowStatus={\n                                  this.setQuestionsListWindowStatus\n                                }\n                                questionTypes={this.props.questionTypes}\n                                loadQuestionTypes={this.props.loadQuestionTypes}\n                                SubmitAnswer={this.SubmitAnswer}\n                              />\n                            </div>\n                          </div>\n                          <div className=\"w-full h-full\">\n                            {/* Do exam test title */}\n                            <DoExamTitle\n                              room_id={\n                                this.props.candidateExam.exam_room_details\n                                  .room_id\n                              }\n                              submitModalStatus={this.state.submitModalStatus}\n                              setSubmitModal={this.setSubmitModal}\n                              setCompletedTest={this.setCompletedTest}\n                              windowStatus={this.state.windowStatus}\n                              setProfileWindowStatus={\n                                this.setProfileWindowStatus\n                              }\n                              setQuestionsListWindowStatus={\n                                this.setQuestionsListWindowStatus\n                              }\n                              questionTypes={this.props.questionTypes}\n                              loadQuestionTypes={this.props.loadQuestionTypes}\n                              submitQuestionAnswer={\n                                this.state.submitQuestionAnswer\n                              }\n                              submitExam={() => {\n                                this.submitExam();\n                                // console.log(\n                                //   \"this.submitExam() ===> <DoExamTitle />\"\n                                // );\n                              }}\n                              selectedExam={this.props.course.selected_course}\n                              SubmitAnswer={this.SubmitAnswer}\n                              start_time={this.state.start_time}\n                              duration_min={this.state.duration}\n                              timeout={() => this.timeOutExam()}\n                              setRequestingExamMarks={\n                                this.setRequestingExamMarks\n                              }\n                              setExamTotalMarks={this.setExamTotalMarks}\n                            />\n                            {/* Question details */}\n                            <QuestionDetails\n                              questionAnswers={\n                                this.props.doExam.exam_answers\n                                  ?.exam_questions_answers?.questionAnswers\n                              }\n                              answerQuestionFn={this.answerQuestionFn}\n                              selectedQuestion={this.state.selectedQuestion}\n                              setSelectedQuestion={this.setSelectedQuestion}\n                              preview={false}\n                              submitQuestionAnswer={\n                                this.state.submitQuestionAnswer\n                              }\n                              doExam={this.props.doExam}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <Footer\n                      setSubmitModal={this.setSubmitModal}\n                      windowStatus={this.state.windowStatus}\n                      setProfileWindowStatus={this.setProfileWindowStatus}\n                      setQuestionsListWindowStatus={\n                        this.setQuestionsListWindowStatus\n                      }\n                      questionTypes={this.props.questionTypes}\n                      loadQuestionTypes={this.props.loadQuestionTypes}\n                      SubmitAnswer={this.SubmitAnswer}\n                      submitQuestionAnswer={this.state.submitQuestionAnswer}\n                      setRequestingExamMarks={this.setRequestingExamMarks}\n                      setExamTotalMarks={this.setExamTotalMarks}\n                    />\n                  </div>\n                </div>\n              )}\n            </ProctoringCandidateOnline>\n          )}\n          {this.props.candidateExam.candidate_exam === null &&\n            this.state.inExam === false && (\n              <Modal\n                title=\"\"\n                backDrop={true}\n                theme={Themes.default}\n                close={() => this.props.setSelectedCandidateExam(null)}\n                backDropClose={false}\n                widthSizeClass={ModalSize.extraLarge}\n                displayClose={false}\n                padding={{ title: false }}\n              >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? (\n                    <Loading />\n                  ) : (\n                    <div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                        <div className=\"my-2 w-full\">\n                          <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                            {this.props.course.selected_course && (\n                              <div>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_code\n                                  }\n                                  -\n                                </span>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_name\n                                  }\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam date:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails() &&\n                                DATE(\n                                  this.examDetails()!.exam_date,\n                                  \"DD/MM/YYYY\"\n                                )}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Start time:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails()?.start_time}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam duration:\n                            </span>\n                            {this.examDetails() !== null && (\n                              <span className=\"text-blue-600 font-bold\">\n                                {this.examDetails()!.duration / 60 >= 1 &&\n                                  this.examDetails()!.duration / 60 +\n                                    \" hrs\"}{\" \"}\n                                {this.examDetails()!.duration % 60 > 0 && (\n                                  <span>\n                                    {this.examDetails()!.duration % 60} mins\n                                  </span>\n                                )}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                      <div className=\"flex flex-row justify-center items-center\">\n                        {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                      </div>\n                      <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Examination rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <div\n                              dangerouslySetInnerHTML={{\n                                __html: this.examDetails()!.termes,\n                              }}\n                            ></div>\n                          )}\n                        </div>\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Exam Proctoring rules\n                          </div>\n                          {this.examDetails() !== null && (\n                            <>\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"right_click_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"copy_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"paste_enabled\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"stop_candidate_when_comeback\"\n                              />\n                              <ProctoringRuleItem\n                                examDetails={this.examDetails}\n                                rule_key=\"allow_to_leave_browser\"\n                              />\n                            </>\n                          )}\n                        </div>\n                        <span className=\"text-blue-700\">\n                          If you are ready, click to start the exam now, The\n                          system will start to count your time!\n                        </span>\n                      </div>\n                      <div className=\"flex flex-row items-center justify-between mt-2\">\n                        <button\n                          onClick={() =>\n                            this.props.setSelectedCandidateExam(null)\n                          }\n                          className=\"btn bg-gray-50 text-gray-600 border\"\n                        >\n                          Go Back\n                        </button>\n                        <button\n                          onClick={() => {\n                            // alert(\n                            //   \"Requested...\" +\n                            //     this.props.candidateExam.selected_exam_id\n                            // );\n                            this.setState({ inExam: true });\n                            this.props.candidateExam.selected_exam_id !==\n                              null &&\n                              this.requestExam(\n                                this.props.candidateExam.selected_exam_id,\n                                (status: boolean, exam: CandidateExam) => {\n                                  console.log(\n                                    \"Requested exam on socket 2: \",\n                                    exam\n                                  );\n\n                                  if (\n                                    exam === null &&\n                                    this.props.candidateExam\n                                      .selected_exam_id !== null\n                                  ) {\n                                    this.RequestUserExamManually(\n                                      this.props.candidateExam.selected_exam_id\n                                    );\n                                  } else {\n                                    if (status === true) {\n                                      this.props.loadCandidateExamFromSupervisor(\n                                        exam,\n                                        this.state\n                                          .candidateDetailsProctoring !==\n                                          null &&\n                                          this.state.candidateDetailsProctoring\n                                            .user.joined === true\n                                          ? true\n                                          : false\n                                      );\n                                    }\n                                  }\n                                }\n                              );\n                          }}\n                          className=\"btn bg-blue-600 text-white\"\n                        >\n                          I accept, Start exam\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </Modal>\n            )}\n          {this.state.submittedExam === true && (\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.medium}\n              displayClose={false}\n              padding={{ title: false }}\n            >\n              {this.state.requesting_exam_marks === true ||\n              this.state.total_exam_marks === null ? (\n                <div className=\"p-3 py-10 border bg-white rounded-Modal flex flex-col items-center justify-center\">\n                  <Loading />\n                  <div className=\"text-3xl font-light text-black text-center mt-1\">\n                    Calculating your total marks...\n                  </div>\n                </div>\n              ) : (\n                <div className=\"px-5 py-5\">\n                  <div className=\"flex flex-row items-center justify-center\">\n                    <MdCheckCircle className=\"text-7xl text-blue-600\" />\n                  </div>\n                  <div className=\"flex flex-row items-center justify-center\">\n                    <span className=\"text-2xl font-extrabold text-blue-600 text-center\">\n                      Exam submitted, your marks is\n                    </span>\n                  </div>\n                  <div className=\"flex flex-col items-center justify-center\">\n                    <div\n                      className={`${\n                        this.state.total_exam_marks > 50\n                          ? \"bg-green-600 border-2 border-green-700\"\n                          : \"bg-blue-600 border-2 border-blue-700\"\n                      } text-white flex items-center justify-center p-3 rounded-xl text-6xl font-extrabold`}\n                    >\n                      {this.state.total_exam_marks}%\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row items-center justify-center mt-3 mb-5\">\n                    <span className=\"text-center text-gray-500\">\n                      Thank you for attending the exam, Your exam has been\n                      submitted successfully!, click continue to the\n                      applications list, you will open the application to view\n                      your score right now.\n                    </span>\n                  </div>\n                  <div className=\"flex flex-row items-center justify-center\">\n                    <div\n                      onClick={() => {\n                        this.setState({ submittedExam: false });\n                        if (document.fullscreenElement) {\n                          if (document.exitFullscreen) {\n                            document.exitFullscreen();\n                          }\n                        }\n                        this.props.candidateExam.candidate_exam &&\n                          this.props.CleanCandidateExam(\n                            this.props.candidateExam.candidate_exam\n                              .exam_paper_id\n                          );\n                        window.location.reload();\n                      }}\n                      className=\"btn bg-blue-100 text-blue-700 rounded w-max cursor-pointer\"\n                    >\n                      Continue to exams list\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Modal>\n          )}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n  socket,\n  proctoring,\n  schoolLevels,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  positions: positionsStoreInterface;\n  socket: Socket;\n  proctoring: Proctoring;\n  schoolLevels: schoolLevelsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    course: course,\n    periods: periods,\n    questionTypes: questionTypes,\n    positions: positions,\n    socket,\n    proctoring,\n    schoolLevels,\n  };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  FC_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n})(_DoEam);\n","export default __webpack_public_path__ + \"static/media/profile.a9136072.png\";","// import moment, { duration } from \"moment\";\nimport moment, { duration } from \"moment-timezone\";\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Auth, Proctoring, Socket } from \"../../actions\";\nimport { EventInterface, Events, StartExam_Callback } from \"../../interfaces\";\nimport { StoreState } from \"../../reducers\";\nimport { TimeZone } from \"../../utils/app.config\";\n\nmoment.tz.add(\"Kigali/Africa|PST PDT|80 70|0101|1Lzm0 1zb0 Op0\");\n\n// props for the component\ninterface AppProps {\n  auth: Auth;\n  proctoring: Proctoring;\n  room_id: string;\n  timeout: Function;\n\n  returnString?: boolean;\n  separator?: string;\n  labels?: boolean;\n  days?: boolean;\n  socket: Socket;\n}\n\ninterface AppState {\n  loading: boolean;\n  days: number;\n  hours: number;\n  mins: number;\n  secs: number;\n  start_time: Date | null;\n  duration: number;\n  stop_time: any;\n  error: boolean;\n}\n\nclass _CountDown extends React.Component<AppProps, AppState> {\n  interval: any;\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      days: 0,\n      hours: 0,\n      mins: 0,\n      secs: 0,\n      start_time: null,\n      duration: 0,\n      stop_time: null,\n      error: false,\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.startOnlineTimer();\n    }, 1000);\n\n    // * CONTINUE EXAM\n    this.props.socket.socket.on(\n      Events.ADD_TIME_TO_CANDIDATE_CLIENT,\n      (data: any, event: EventInterface) => {\n        if (event.user_id === this.props.auth.user.user_id) {\n          this.startOnlineTimer();\n        }\n      }\n    );\n  }\n\n  startOnlineTimer() {\n    this.props.socket.socket.emit(\n      Events.GET_ROOM_TIME,\n      {\n        user_id: this.props.auth.user.user_id,\n        room_id: this.props.room_id,\n      },\n      (res: StartExam_Callback | null) => {\n        if (res === null) return this.setState({ error: true });\n        console.log({\n          TimerCountDownResult: res,\n        });\n\n        // compute the dates and start running the functions\n        if (res.remaining_minutes === 0) {\n          return this.setState({\n            days: 0,\n            hours: 0,\n            mins: 0,\n            secs: 0,\n          });\n        } else {\n          let examStopTime = moment().add(res.remaining_minutes, \"minutes\");\n\n          console.log({\n            examStopTime,\n          });\n\n          this.setState({\n            stop_time: examStopTime,\n          });\n          this.setCountdowm();\n          this.timeOutCounter();\n\n          // Count down\n          //   this.setCountdowmDates(examStopTime);\n        }\n      }\n    );\n  }\n\n  timeOutCounter = () => {\n    this.interval = setInterval(() => {\n      this.setCountdowm();\n      if (this.state.hours < 0 || this.state.mins < 0 || this.state.secs < 0) {\n        this.props.timeout();\n        clearInterval(this.interval);\n        this.setState({\n          days: 0,\n          hours: 0,\n          mins: 0,\n          secs: 0,\n        });\n      }\n    }, 1000);\n  };\n\n  //   componentDidUpdate(prevProps: AppProps, prevState: AppState): void {\n  //     if (\n  //       prevProps.duration_min !== this.props.duration_min ||\n  //       prevProps.start_time !== this.props.start_time\n  //     ) {\n  //       clearInterval(this.interval);\n  //       this.setState({\n  //         duration: this.props.duration_min,\n  //         start_time: this.props.start_time,\n  //       });\n  //       this.timeOutCounter();\n  //     }\n  //   }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n\n    // this.props.socket.socket.off(Events.GET_ROOM_TIME);\n  }\n\n  formatStyle(value: number): string {\n    return value <= 9 ? `0${value}` : value + \"\";\n  }\n\n  setCountdowm() {\n    const futureDate = moment(this.state.stop_time);\n\n    const today = moment();\n    const clockDuration = duration(futureDate.diff(today));\n\n    const days = Math.floor(clockDuration.asDays());\n    const hours = clockDuration.hours();\n    const mins = clockDuration.minutes();\n    const secs = clockDuration.seconds();\n\n    this.setState({ days, hours, mins, secs });\n  }\n\n  render() {\n    if (this.state.error === true) return null;\n    if (\n      this.props.returnString === undefined ||\n      this.props.returnString === false\n    ) {\n      return (\n        <div className=\"flex items-center\">\n          {this.props.days !== undefined && this.props.days !== false && (\n            <div className=\"m-0 p-0\">\n              {this.props.labels !== undefined &&\n                this.props.labels !== false && (\n                  <span className=\"m-0 text-xs opacity-80\">Days</span>\n                )}\n              <p className=\"m-0  timer-count-down -mt-2\">\n                {this.formatStyle(this.state.days)}\n                {this.props.separator === undefined\n                  ? \":\"\n                  : this.props.separator}\n              </p>\n            </div>\n          )}\n          <div>\n            {this.props.labels !== undefined && this.props.labels !== false && (\n              <span className=\"m-0 text-xs opacity-80\">Hours</span>\n            )}\n            <p className=\"m-0  timer-count-down -mt-2\">\n              {this.formatStyle(this.state.hours)}\n              {this.props.separator === undefined ? \":\" : this.props.separator}\n            </p>\n          </div>\n\n          <div>\n            {this.props.labels !== undefined && this.props.labels !== false && (\n              <span className=\"m-0 text-xs opacity-80\">Min</span>\n            )}\n            <p className=\"m-0  timer-count-down -mt-2\">\n              {this.formatStyle(this.state.mins)}\n              {this.props.separator === undefined ? \":\" : this.props.separator}\n            </p>\n          </div>\n\n          <div>\n            {this.props.labels !== undefined && this.props.labels !== false && (\n              <span className=\"m-0 text-xs opacity-80\">Sec</span>\n            )}\n            <p className=\"m-0  timer-count-down -mt-2\">\n              {this.formatStyle(this.state.secs)}\n            </p>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <span className=\"timer-count-down\">\n          {(this.props.days !== undefined || this.props.days !== false) && (\n            <span>\n              {this.formatStyle(this.state.days)}\n              {this.props.separator === undefined ? \":\" : this.props.separator}\n            </span>\n          )}\n          <span>{this.formatStyle(this.state.hours)}</span>\n          {this.props.separator === undefined ? \":\" : this.props.separator}\n          <span>{this.formatStyle(this.state.mins)}</span>\n          {this.props.separator === undefined ? \":\" : this.props.separator}\n          <span>{this.formatStyle(this.state.secs)}</span>\n        </span>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  socket,\n  proctoring,\n}: StoreState): { auth: Auth; socket: Socket; proctoring: Proctoring } => {\n  return { auth: auth, socket: socket, proctoring: proctoring };\n};\n\nexport const CountDownLive = connect(mapStateToProps, {})(_CountDown);\n"],"sourceRoot":""}