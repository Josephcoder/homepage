{"version":3,"sources":["components/NoResult/NoResult.tsx","components/ApplicationPeriods/ApplicationPeriods.tsx","components/Questions/QuestionItem.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExamSteps.tsx","containers/PrepareExam/PrepareExam.tsx"],"names":["NoResultThemes","NoResult","props","className","theme","Dark","value","undefined","component","ApplicationPeriods","type","placeholder","applicationPeriods","map","item","i","onClick","setSelectedPeriod","showPeriodFilter","is_active","application_session_name","DATE","application_start_date","application_end_date","QuestionItem","useState","editMode","setEditMode","select","callBack","question","number","status","questionTypes","find","itm","id","title","description","alert","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","selectedQuestion","questionsList","unSelectQuestion","Questions","connect","auth","course","schoolLevels","questionBank","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","setSelectedCourse","loadQuestionTypes","loading","setLoading","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","questions","res","temp","filter","length","chapters","x","useEffect","onChange","e","target","selectedCourse","name","course_id","to","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","key","PrepareExamStepsEnum","PrepareExamSteps","Steps","step","Step1","selected_course","course_name","Step2","setStep","currentStep","stepStatus","setSelectCourse","setSelectPeriod","periods","selected_period","getHoursList","hrs","getMinutesList","mins","_PrepareExam","setState","addQuestionToPaper","addExamQuestion","removeToQuestionPaper","window","confirm","selectPeriod","formErr","element","msg","selectCourse","prepareExam","StepStatus","state","exam_date","start_time","end_time","duration_hours","duration_minutes","questions_per_page","number_format","discription","termes","chooseCourse","myCourse","conf","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","a","axios","post","API","QBank","period","application_session_id","exam_status","Created","duration","redirectToExams","PushPopupAlert","PopupAlertTheme","success","response","data","errors","message","console","log","componentDidMount","loadApplicationPeriods","editQuestion","findTotalMarks","total","marks","handleChangeTermes","addQuestionModal","this","Loading","parseInt","disabled","selected","Alert","AlertInterface","danger","EditQuestion","Modal","large","Courses","selected_course_id","Component","PrepareExam","system"],"mappings":"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","file":"static/js/10.e0f94ab6.chunk.js","sourcesContent":["import React from 'react'\nimport { RiSearchLine } from 'react-icons/ri'\n\nexport enum NoResultThemes {\n  Dark = \"Dark\",\n  Light = \"Light\",\n}\n\ninterface NoResultProps {\n  theme: NoResultThemes;\n  value: string;\n  component?: any;\n}\n\nconst NoResult = (props: NoResultProps) => {\n  return (\n    <div className={`flex flex-col py-4 justify-center items-center text-gray-500 border-2 border-white ${props.theme === NoResultThemes.Dark ? \"bg-gray-100\" : \"bg-white\"} rounded`}>\n      <RiSearchLine className=\"text-6xl text-gray-500 animate__animated animate__shakeX\" />\n      <span className=\"text-xl mb-3\">{props.value}</span>\n      {props.component !== undefined &&\n      props.component}\n    </div>\n  )\n}\n\nexport default NoResult\n","import React from 'react'\nimport { FaBusinessTime } from 'react-icons/fa';\nimport { ApplicationPeriodGet } from '../../interfaces/application';\nimport { DATE } from '../../utils/functions';\nimport Loading from '../Loading/Loading';\n\ninterface ApplicationPeriodsProps {\n  applicationPeriods: ApplicationPeriodGet[] | null;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  showPeriodFilter: (status: boolean) => void;\n}\n\nconst ApplicationPeriods = (props: ApplicationPeriodsProps) => {\n  return (\n    <div className=\"-mt-4\">\n      <input type=\"text\" className=\"input-white border -mt-2 mb-3\" placeholder=\"Search by year, name\" />\n      {props.applicationPeriods === null ? <Loading /> : props.applicationPeriods.map((item, i) => (\n        <div onClick={() => {props.setSelectedPeriod(item); props.showPeriodFilter(false)}} key={i + 1} \n          className={`flex flex-col md:flex-row items-start md:items-center md:justify-between rounded border ${item.is_active === true ? \"bg-blue-50 border-blue-100\" : \"bg-gray-50 border-gray-100 \"} hover:bg-blue-100 hover:border-blue-500 px-2 py-2 cursor-pointer mb-2`}>\n          <div className=\"flex flex-row items-center gap-3\">\n            <FaBusinessTime className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-500\"} text-4xl`} />\n            <div className=\"flex flex-col\">\n              <div className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"} font-bold`}>{item.application_session_name}</div>\n              <div className=\"text-sm text-gray-500\"><span>Status: </span><span className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"}`}>{item.is_active === true ? \"Active\" : \"Expired\"}</span></div>\n            </div>\n          </div>\n          <div className=\"flex flex-col items-start md:items-end md:justify-end\">\n            <div className=\"text-xs md:text-sm text-right text-gray-500\"><span>Start: </span><span className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"} text-right font-bold`}>{DATE(item.application_start_date, \"DD/MM/YYYY\")}</span></div>\n            <div className=\"text-xs md:text-sm text-right text-gray-500\"><span>End: </span><span className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"} text-right font-bold`}>{DATE(item.application_end_date, \"DD/MM/YYYY\")}</span></div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ApplicationPeriods\n","import React, { Fragment, useState } from 'react'\nimport { CgDetailsMore } from 'react-icons/cg'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { IoMdTrash } from 'react-icons/io'\nimport { MdEdit } from 'react-icons/md'\nimport { questionTypesStoreInterface } from '../../actions/questionTypes'\nimport EditQuestion from '../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion'\nimport { QuestionInterface } from '../../interfaces/question'\nimport Modal, { ModalSize, Themes } from '../Modal/Modal'\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  }\n  return (\n    <Fragment>\n      <div onClick={() => props.select === true && props.callBack(props.question)} className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"} hover:border-blue-600 mb-3`}>\n        <div className=\"flex flex-row items-center justify-between w-full\">\n          <div className=\"flex flex-row items-center gap-3\">\n            <div>\n              {props.select === false ? \n              <div className=\"font-bold text-blue-600\">\n                ({props.number})\n              </div> :\n              props.status === true ?\n              <ImCheckboxChecked className=\"text-xl text-blue-600\" /> :\n              <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />}\n            </div>\n            <div className=\"flex flex-col truncate\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">{props.questionTypes.questionTypes && props.questionTypes.questionTypes.find(itm => itm.id && itm.id === props.question.type)?.title}</span>\n              <span className=\"font-bold\">{props.question.question[0].title}</span>\n              <span className=\"truncate text-xs\">{props.question.question[0].description}</span>\n            </div>\n          </div>\n          {props.select === false &&\n          <div className=\"flex flex-row items-center gap-2\">\n            <div \n            onClick={() => alert(\"Details\")} \n            className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\">\n              <CgDetailsMore className=\"text-3xl text-gray-700\"/>\n            </div>\n            <div \n            onClick={() => setEditMode(true)} \n            className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\">\n              <MdEdit className=\"text-3xl text-blue-700\"/>\n            </div>\n            <div \n            onClick={() => props.select === false && props.callBack(props.question)} \n            className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\">\n              <IoMdTrash className=\"text-3xl text-yellow-700\"/>\n            </div>\n          </div>}\n        </div>\n      </div>\n      {editMode === true &&\n      <Modal\n        title=\"\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => setEditMode(false)}\n        backDropClose={true}\n        widthSizeClass={ModalSize.extraLarge}\n        displayClose={false}\n        padding={{title: false,}}>\n          <div className=\"pt-0\">\n            <EditQuestion \n              selectedQuestion={props.question} \n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion} \n            />\n          </div>\n      </Modal>}\n    </Fragment>\n  )\n}\n\nexport default QuestionItem\n","import React, { useEffect, useState } from 'react'\nimport Loading from '../../components/Loading/Loading'\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from '../../interfaces/course';\nimport { QuestionInterface, uploadQuestionsResponse } from '../../interfaces/question';\nimport QuestionItem from './QuestionItem';\nimport { Link } from 'react-router-dom';\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] = useState<string>(\"\");\n\n  const filteredQuestions = (questionType: string, QuestionChapter: string, questions: QuestionInterface[]) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(itm => itm.type === questionType);\n      if (temp.length > 0) {\n        res = temp.filter(item => item.chapters.find(x => x === QuestionChapter));\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter(itm => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter(item => item.chapters.find(x => x === QuestionChapter));\n    }\n    return res\n  }\n\n  useEffect(() => {\n    if (props.questionTypes.questionTypes === null || props.questionTypes.questionTypes.length === 0) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? <Loading /> :\n          props.questionTypes.questionTypes.length === 0 ? <div>No Question types found!</div> :\n          <select \n          onChange={(e) => {\n            setFilterQuestionType(e.target.value);\n          }}\n          className=\"input-white border border-gray-400\">\n            <option value=\"\">Choose Question type</option>\n            {props.questionTypes.questionTypes.map((item, i) => (\n              <option key={i + 1} value={item.id}>{item.title}</option>\n            ))}\n          </select>}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Chapters</span>\n          {props.selectedCourse.chapters === undefined ? <div>Not found!</div> :\n          props.selectedCourse.chapters!.length === 0 ? <div className=\"text-yellow-700\">No Question chapters found!</div> :\n          <select \n          onChange={(e) => {\n            setFilterQuestionChapter(e.target.value);\n          }}\n          className=\"input-white border border-gray-400\">\n            <option value=\"\">Choose Chapter</option>\n            {props.selectedCourse.chapters!.map((item, i) => (\n              <option key={i + 1} value={item.id}>{item.name}</option>\n            ))}\n          </select>}\n        </div>\n      </div>\n      {loading === true ? <Loading /> :\n      filteredQuestions(filterQuestionType, filterQuestionChapter, props.questionsList.filter(itm => itm.course === props.selectedCourse.course_id)).length === 0 ? <div className=\"text-yellow-700 font-bold flex flex-col\"><div>No questions uploaded!</div> <Link className=\"btn bg-blue-600 text-white mt-4 w-max\" to=\"/upload-questions\">Upload Questions</Link></div> :\n      filteredQuestions(filterQuestionType, filterQuestionChapter, props.questionsList.filter(itm => itm.course === props.selectedCourse.course_id)).map((item, i) => (\n        <QuestionItem \n          key={i + 1}\n          question={item}\n          callBack={props.callBack}\n          status={props.questionPaper.find(itm => itm.id === item.id) ? true : false}\n          questionTypes={props.questionTypes}\n          select={true}\n          number={i + 1} \n          questionsList={props.questionsList} />\n      ))}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, questionTypes: questionTypes, };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","export enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n}\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER)\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC)\n  },{\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc)\n  },{\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I)\n  },\n]\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n}\n\nexport interface prepare_exam_request {\n    period: string;\n    course: string;\n    questions: string[];\n    exam_status: PrepareExamStatus;\n    termes: string;\n    questions_per_page: number;\n    exam_date: string;\n    start_time: string;\n    duration: number;\n    number_format: QuestionNumberFormat;\n    discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n}","import React from 'react'\nimport { applicationPeriodsStoreInterface } from '../../actions/application_periods';\nimport { courseStoreInterface } from '../../actions/course';\n\nexport enum PrepareExamStepsEnum {\n  Step1 = \"Step1\",\n  Step2 = \"Step2\",\n}\n\ninterface PrepareExamStepProps {\n  currentStep: PrepareExamStepsEnum;\n  setStep: (step: PrepareExamStepsEnum) => void;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  setSelectCourse: (status: boolean) => void;\n  setSelectPeriod: (status: boolean) => void;\n  stepStatus: (step: PrepareExamStepsEnum) => boolean;\n}\n\nconst PrepareExamSteps = (props: PrepareExamStepProps) => {\n  const Steps: { step: PrepareExamStepsEnum; title: string; description: string; status: boolean; }[] = [\n    {\n      step: PrepareExamStepsEnum.Step1,\n      title: \"Prepare questions\",\n      description: props.course.selected_course !== null ? props.course.selected_course.course_name :\"Choose questions for the exam\",\n      status: false,\n    },\n    {\n      step: PrepareExamStepsEnum.Step2,\n      title: \"Exam details\",\n      description: \"Fill all exam details\",\n      status: false,\n    }\n  ];\n  return (\n    <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n      <div className=\"flex flex-row items center justify-between\">\n        <div className=\"flex flex-row items-end w-full\">\n          <div className=\"flex flex-col px-2 w-full\">\n            <span className=\"text-blue-600 text-3xl font-bold\">Prepare exam</span>\n            <div className=\"flex flex-row items-center justify-between gap-6 w-full\">\n              <div className=\"flex flex-row items-center gap-6\">\n                {Steps.map((item, i) => (\n                  <div onClick={() => props.setStep(item.step)} key={i + 1} className={`flex flex-row items-center gap-4 my-2 rounded p-2 border ${props.currentStep === item.step ? props.stepStatus(item.step) === true ? \"border-blue-300\" : \"bg-blue-50 border-white\" : \"cursor-pointer hover:bg-gray-50 border-white\"}`}>\n                    <div className={`w-10 h-10 rounded-full ${props.stepStatus(item.step) === true ? \"bg-blue-600 text-white\" : props.currentStep === item.step ? \"bg-white text-blue-600 border-2 border-blue-300\" : \"bg-gray-200\"} text-center font-bold text-xl flex items-center justify-center`}>{i + 1}</div>\n                    <div className=\"flex flex-col\">\n                      <span className={`${props.stepStatus(item.step) === true ? \"text-blue-600\" : \"\"} font-bold text-lg`}>{item.title}</span>\n                      <span className=\"text-sm -mt-1 text-gray-500\">{item.description}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex flex-row items-center gap-2\">\n                <div onClick={() => props.setSelectCourse(true)} className={`btn ${props.course.selected_course === null ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\" : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"} h-max flex items-center justify-center h-10 cursor-pointer`}>{props.course.selected_course === null ? \"Choose course\" : \"Change course\"}</div>\n                <div onClick={() => props.setSelectPeriod(true)} className={`btn ${props.periods.selected_period === null ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\" : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"} h-max flex items-center justify-center h-10 cursor-pointer`}>{props.periods.selected_period === null ? \"Choose period\" : \"Change Period\"}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PrepareExamSteps\n","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport { QuestionInterface, uploadQuestionsResponse } from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport { EXAM_QUESTIONS_NUMBERING, PrepareExamStatus, QuestionNumberFormat } from \"../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\nimport ReactQuill from \"react-quill\";\nimport 'react-quill/dist/quill.snow.css'; // ES6\nimport PrepareExamSteps, { PrepareExamStepsEnum } from \"./PrepareExamSteps\";\n\n\nexport const getHoursList = () => {\n  let hrs:number[] = [];\n  for (let x=0; x<=24; x++) {\n    hrs = [...hrs, x]\n  }\n  return hrs;\n}\nexport const getMinutesList = () => {\n  let mins:number[] = [];\n  for (let x=0; x<=59; x++) {\n    mins = [...mins, x]\n  }\n  return mins;\n}\n\ninterface AppPropsProps {\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (course_id: string, callback: (loading: boolean) => void) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  end_time: string;\n  duration_hours: number;\n  duration_minutes: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n  currentStep: PrepareExamStepsEnum;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\", msg: \"\"\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      end_time: \"\",\n      duration_hours: 1,\n      duration_minutes: 0,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n      currentStep: PrepareExamStepsEnum.Step1,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  }\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (window.confirm(\"Are you sure do you want to remove question to question paper?\")) {\n      this.props.addExamQuestion(question);\n    }\n  }\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status })\n  }\n  setStep = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.props.periods.selected_period === null || this.props.periods.selected_period.is_active === false) {\n        return this.setState({\n          formErr: {\n            element: \"period\",\n            msg: \"Please select valid period!\",\n          },\n          selectPeriod: true,\n        })\n      }\n      if (this.props.course.selected_course === null) {\n        return this.setState({\n          formErr: {\n            element: \"course\",\n            msg: \"Please select a course!\",\n          },\n          selectCourse: true,\n        })\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return this.setState({\n          formErr: {\n            element: \"questions\",\n            msg: \"Please choose questions\",\n          }\n        })\n      }\n    }\n    this.setState({ currentStep: step});\n  }\n\n  StepStatus = (step: PrepareExamStepsEnum) => {\n    if (step === PrepareExamStepsEnum.Step1) {\n      if (this.props.periods.selected_period === null || this.props.periods.selected_period.is_active === false) {\n        return false;\n      }\n      if (this.props.course.selected_course === null) {\n        return false;\n      }\n      if (this.props.prepareExam.questions.length === 0) {\n        return false;\n      }\n    }\n    if (step === PrepareExamStepsEnum.Step2) {\n      if (this.state.exam_date === \"\") {\n        return false;\n      }\n      if (this.state.start_time === \"\") {\n        return false;\n      }\n      if (this.state.end_time === \"\") {\n        return false;\n      }\n      if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n        return false;\n      }\n      if (this.state.questions_per_page < 1) {\n        return false;\n      }\n      if (this.state.number_format === \"\") {\n        return false;\n      }\n      if (this.state.discription === \"\") {\n        return false;\n      }\n      if (this.state.termes === \"\") {\n        return false;\n      }\n\n    }\n    return true;\n  }\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\"Are you sure do you want to change course? You will loose your selected questions\")\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n      this.setState({ currentStep: PrepareExamStepsEnum.Step1 });\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  }\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.id];\n    }\n    return ids;\n  }\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (this.props.periods.selected_period === null || this.props.periods.selected_period.is_active === false) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      })\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      })\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        }\n      })\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        }\n      })\n    }\n    if (this.state.end_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"end_time\",\n          msg: \"Please fill exam ending time\",\n        }\n      })\n    }\n    if (this.state.duration_hours === 0 && this.state.duration_minutes === 0) {\n      return this.setState({\n        formErr: {\n          element: \"duration_hours\",\n          msg: \"Please fill exam duration\",\n        }\n      })\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        }\n      })\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        }\n      })\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        }\n      })\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        }\n      })\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        }\n      })\n    }\n    this.setState({ loading: true });\n    try {\n      const res = await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.application_session_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        end_time: this.state.end_time,\n        duration: this.state.duration_minutes + (this.state.duration_hours*60),\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success\n      })\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({formErr: {element: \"main\", msg: error.response.data.errors[0].message}});\n            } else {\n              this.setState({formErr: {element: \"main\", msg: \"Failed to update Question!\"}});\n            }\n          } else {\n            this.setState({formErr: {element: \"main\", msg: \"Failed to update Question!\"}});\n          }\n        } else {\n          this.setState({formErr: {element: \"main\", msg: \"Failed to update Question!\"}});\n        }\n      }\n      console.log(\"Exam err: \", {...error})\n    }\n    this.setState({ loading: false });\n  }\n\n  componentDidMount = () => {\n    if (this.props.questionTypes.questionTypes === null || this.props.questionTypes.questionTypes.length === 0) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (this.props.periods.applicationPeriods === null || this.props.periods.applicationPeriods.length === 0) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(this.props.course.selected_course.course_id, this.setLoading);\n    }\n  }\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  }\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  }\n  handleChangeTermes = (value: string) => {\n    console.log(\"Termes: \", value);\n    this.setState({\n      termes: value,\n      formErr: null,\n    })\n  }\n  setSelectCourse = (status: boolean) => {\n    this.setState({ selectCourse: status })\n  }\n  setSelectPeriod = (status: boolean) => {\n    this.setState({ selectPeriod: status })\n  }\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />\n    }\n    return (\n      <Fragment>\n      {this.state.editQuestion === null ?\n      <div>\n        <PrepareExamSteps \n              currentStep={this.state.currentStep}\n              setStep={this.setStep} \n              course={this.props.course} \n              periods={this.props.periods} \n              setSelectCourse={this.setSelectCourse} \n              setSelectPeriod={this.setSelectPeriod}\n              stepStatus={this.StepStatus} />\n        {this.state.loading === true ? \n        <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n          <div className=\"text-gray-600 mb-3 px-4\">Performing action, Please wait...</div>\n          <Loading /> \n        </div>:\n        <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n          {this.state.currentStep === PrepareExamStepsEnum.Step2 &&\n          <div className=\"grid md:grid-cols-12 gap-4\">\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam date</span>\n              <input \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  exam_date: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.exam_date}\n              type=\"date\" className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"exam_date\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"exam_date\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-3 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Duration(Hours)</span>\n              <select \n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                this.setState({\n                  duration_hours: parseInt(e.target.value),\n                  formErr: null,\n                })\n              }}\n              value={this.state.duration_hours}\n              className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"duration_hours\" ? \"border-2 border-red-600\" : \"border\"}`}>\n              {getHoursList().map((item, i) => (\n                <option key={i + 1}>{item}</option>\n              ))}\n              </select>\n              {this.state.formErr !== null && this.state.formErr.element === \"duration_hours\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-3 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Duration(Minutes)</span>\n              <select \n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                this.setState({\n                  duration_minutes: parseInt(e.target.value),\n                  formErr: null,\n                })\n              }}\n              value={this.state.duration_minutes}\n              className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"duration_minutes\" ? \"border-2 border-red-600\" : \"border\"}`}>\n              {getMinutesList().map((item, i) => (\n                <option key={i + 1}>{item}</option>\n              ))}\n              </select>\n              {this.state.formErr !== null && this.state.formErr.element === \"duration_minutes\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam start time</span>\n              <input \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  start_time: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.start_time}\n              type=\"time\" className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"start_time\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"start_time\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam ending time</span>\n              <input \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  end_time: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.end_time}\n              type=\"time\" className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"end_time\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"end_time\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-500 font-semibold\">Number of questions per page</span>\n              <input \n              disabled={true}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  questions_per_page: parseInt(e.target.value),\n                  formErr: null,\n                })\n              }}\n              value={this.state.questions_per_page}\n              type=\"number\" className={`rounded px-3 py-2 h-10 border-gray-200 bg-gray-100 ${this.state.formErr !== null && this.state.formErr.element === \"questions_per_page\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"questions_per_page\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-500 font-semibold\">Questions number format: {this.state.number_format}</span>\n              <select\n                onChange={(e) => {\n                  this.setState({\n                    number_format: e.target.value,\n                    formErr: null,\n                  })\n                }}\n                disabled={true}\n                className={`px-3 py-2 rounded bg-gray-100 h-10 border-gray-200 ${this.state.formErr !== null && this.state.formErr.element === \"number_format\" ? \"border-2 border-red-600\" : \"border\"}`}>\n                <option value=\"\">Select Numbering format</option>\n                {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                  <option selected={item.key === this.state.number_format ? true : false} key={i + 1} value={item.key}>{item.value}</option>\n                ))}\n              </select>\n              {this.state.formErr !== null && this.state.formErr.element === \"number_format\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-12 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam description</span>\n              <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  discription: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.discription}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"discription\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea>\n              {this.state.formErr !== null && this.state.formErr.element === \"discription\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-12 flex flex-col\">\n              {/* <div dangerouslySetInnerHTML={{__html: this.state.termes}}></div> */}\n              <span className=\"text-gray-700 font-semibold\">Exam terms and conditions</span>\n              {/* <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea> */}\n              <ReactQuill value={this.state.termes}\n                  className=\"rounded mb-10\"\n                  onChange={this.handleChangeTermes} />\n              {this.state.formErr !== null && this.state.formErr.element === \"termes\" && <div className=\"text-red-600 text-xs font-bold italic mt-2\">{this.state.formErr.msg}</div>}\n            </div>\n          </div>}\n          {this.state.currentStep === PrepareExamStepsEnum.Step1 &&\n          <div className=\"border rounded px-2 py-2 mt-4\">\n            <div className=\"flex flex-row items-center justify-between\">\n              <span className=\"font-bold text-blue-600 text-lg\">Question paper</span>\n              <div className=\"flex flex-row gap-2\">\n                <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">Total marks: {this.findTotalMarks(this.props.prepareExam.questions)}</span>\n                <div onClick={() => this.props.course.selected_course === null ? this.setState({ selectCourse: true }) : this.setState({ addQuestionModal: true })} className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"><MdAdd className=\"text-2xl\" /> Add question</div>\n              </div>\n            </div>\n            <div className=\"flex flex-col mt-2\">\n              {this.props.prepareExam.questions.length === 0 ?\n              <div className={`${this.state.formErr !== null && this.state.formErr.element === \"questions\" ? \"bg-red-50 border-2 border-red-600 text-red-600\" : \"bg-gray-100\"} rounded mt-2`}>\n                <NoResult theme={NoResultThemes.Dark} value={\"No questions added so far!\"} />\n              </div> :\n              this.props.questionTypes && this.props.prepareExam.questions.map((item, i) => (\n                <QuestionItem \n                key={i + 1} \n                question={item} \n                callBack={this.removeToQuestionPaper} \n                status={true} \n                questionTypes={this.props.questionTypes}\n                select={false}\n                number={i + 1}\n                questionsList={this.props.prepareExam.questions} />\n              ))}\n            </div>\n          </div>}\n          <div className=\"my-4\" onClick={() => this.setState({ formErr: null })}>\n            {this.state.formErr !== null && this.state.formErr.element !== \"\" && \n              <Alert title={\"Missing info\"} description={this.state.formErr.msg} theme={AlertInterface.danger} />\n            }\n          </div>\n          <div className=\"flex flex-row items-center justify-between mt-4\">\n            {this.state.currentStep === PrepareExamStepsEnum.Step1 ?\n            <div className=\"btn border cursor-pointer\">Cancel</div> :\n            <div onClick={() => this.setStep(PrepareExamStepsEnum.Step1)} className=\"btn border cursor-pointer\">Back to questions</div>}\n            {this.state.currentStep === PrepareExamStepsEnum.Step1 ?\n            <div className=\"flex flex-row items-center\">\n              <div onClick={() => this.setStep(PrepareExamStepsEnum.Step2)} className=\"btn bg-blue-600 text-white cursor-pointer\">Continue</div>\n            </div>:\n            <div className=\"flex flex-row items-center\">\n              <div onClick={() => this.submitExamPreparation()} className=\"btn bg-blue-600 text-white cursor-pointer\">Submit exam</div>\n            </div>}\n          </div>\n        </div>}\n      </div> :\n      this.props.questionBank.questions === null ? <Loading /> :\n      this.props.questionBank.questions.length === 0 ? <div>No Questions available!</div> :\n      <EditQuestion \n        selectedQuestion={this.state.editQuestion} \n        questionsList={this.props.questionBank.questions}\n        unSelectQuestion={this.unSelectQuestion} \n      />}\n      {this.state.selectCourse === true &&\n      <Modal\n        title=\"\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ selectCourse: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n        <div className=\"-mt-6\">\n          <Courses setSelectedCourse={this.chooseCourse} selected_course_id={this.props.course.selected_course && this.props.course.selected_course.course_id} />\n        </div>\n      </Modal>}\n      {this.state.addQuestionModal === true &&\n      <Modal\n        title=\"Add exam questions\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ addQuestionModal: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.extraLarge}\n        displayClose={true}\n        padding={{title: true,}}>\n        {this.props.course.selected_course === null ? <div>Please choose a course</div> :\n        this.props.questionBank.questions === null ? <Loading /> :\n        <Questions \n        selectedCourse={this.props.course.selected_course} \n        callBack={this.addQuestionToPaper} \n        questionsList={this.props.questionBank.questions}\n        questionPaper={this.props.prepareExam.questions} />}\n      </Modal>}\n      {this.state.selectPeriod === true &&\n      <Modal\n        title=\"Choose a period\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ selectPeriod: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n          <div className=\"px-2\">\n            <ApplicationPeriods \n            applicationPeriods={this.props.periods.applicationPeriods} \n            setSelectedPeriod={this.props.setSelectedPeriod} \n            showPeriodFilter={this.showPeriodFilter} />\n          </div>\n      </Modal>}\n      </Fragment>\n    );\n  }\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; questionTypes: questionTypesStoreInterface; prepareExam: PrepareExamsStoreInterface; periods: applicationPeriodsStoreInterface; system: System } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, questionTypes: questionTypes, prepareExam: prepareExam, periods: periods, system: system };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n})(_PrepareExam);\n"],"sourceRoot":""}