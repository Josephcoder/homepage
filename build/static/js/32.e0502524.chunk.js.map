{"version":3,"sources":["containers/SessionSettings/NoSession.tsx","components/Loading/TableLoading.tsx","utils/ExportToExcel.tsx","utils/mineduc.png","components/DownloadPDF/rest.tsx","containers/SessionSettings/ChooseSession.tsx","containers/Admin/Claiming/ClaimingReport.tsx"],"names":["NoSession","title","description","content","undefined","className","React","memo","TableLoading","props","displayCols","colsArray","index","cols","push","map","element","Math","random","ExportToExcel","fileData","fileName","btnName","showIcon","onClick","e","apiData","wb","Sheets","data","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","exportToCSV","require","addFooters","doc","pageCount","internal","getNumberOfPages","setFont","setFontSize","i","setPage","text","String","pageSize","width","align","generatePDF","reportSettings","table","callBack","a","orientation","lMargin","jsPDF","setTextColor","addImage","Logo","getWidth","institute","lines","splitTextToSize","subject","pdfInMM","y","subjectTitle","getTextWidth","length","addPage","period","autoTable","html","startY","margin","horizontal","cellPadding","rowHeight","bodyStyles","valign","columnStyles","email","cellWidth","theme","tableWidth","finalY","lastAutoTable","doneBy","DATE","Date","toString","save","returnPromise","then","ChooseSession","searched","useState","selectedPlan","setSelectedPlan","search","setSearch","onChange","target","value","placeholder","disabled","allSession","chooseAll","currentSelected","setSelectSession","searchData","item","_id","session_plan_name","is_active","reportClaimType","result","PlansTypeKeys","APPLICATION","ClaimTypesEnum","application","DOCUMENT_VALIDATION","document","EXAMINATION","exam","MARKS_PUBLICATION","marks_publication","PLACEMENT_TRANSFER","placement","defaultReportContent","key","claimReportContentKeyInterface","names","status","national_id","gender","phone","claim_session","education_category","date","decision","claim_title","claim_type","claim_level","ClaimingReport","connect","auth","sessionPlan","claiming","schoolLevels","application_sessions","allSessionPlans","documentReducer","getAllClaims","GetClaimingTypes","getAllApplications","GetAllSessionPlans","loadEducationCategories","setSelectedClaimType","PushPopupAlert","thisPeriod","setThisPeriod","thisLevel","setThisLevel","loading","setLoading","loadingSession","setLoadingSession","periodChanged","setPeriodChanged","loadingClaims","setLoadingClaims","loadingInstitutes","setLoadingInstitutes","downloading","setDownloading","claimToPrint","setClaimToPrint","sortProperty","setSortProperty","isSorted","setIsSorted","sortOrder","setSortOrder","searchInput","setSearchInput","generateReportModal","setGenerateReportModal","reportTitle","setReportTitle","reportContent","setReportContent","selectAll","setSelectAll","formError","setFormError","selectPeriod","setSelectPeriod","thisEducation","setThisEducation","useEffect","education_categories","claimTypes","msg","PopupAlertTheme","danger","thisSession","find","allClaims","objList","setSort","thisProperty","updateClaimToPrint","arrayNew","n","Object","prototype","hasOwnProperty","call","keyClaim","claims","thisType","whichClaimType","dataArray","claim_id","user","user_info","fname","lname","sex","n_id","phone_number","level","createdAt","decision_taken_status","FC_ClaimData","institute_id","isEmptyOrSpaces","isChangeAllowed","FC_FilterClaims","claimType","claimLevel","filter","education_institute_id","education_category_title","capitalizeFirstWord","output","count","values","forEach","PlansKey","capitalizeFirstLetter","itm","ClaimTypes","active","selectedType","selectedClaimType","currentType","levels","ClaimLevels","reportType","querySelectorAll","getElementById","footer","warning","FC_GeneratePDF","id","colSpan","sortThisArray","product","flag","prop","toLowerCase","indexOf","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","medium","displayClose","padding","findIndex","newArray","isSelectAllNeeded","updateReportContent","currentState","resetReportContent","extraLarge","period_id"],"mappings":"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","file":"static/js/32.e0502524.chunk.js","sourcesContent":["import React from \"react\";\nimport { IoWarning } from \"react-icons/io5\";\n// import { MdInfoOutline } from \"react-icons/md\";\nimport { NavLink } from \"react-router-dom\";\n\ntype NoSessionProps = {\n  title?: string;\n  description?: string;\n  content?: any;\n};\n\nconst NoSession: React.FC<NoSessionProps> = ({\n  title = \"No session available\",\n  description = \"Please Wait for the system to publish the sessions or contact the administrator\",\n  content = undefined,\n}) => {\n  return (\n    <div className=\"w-full my-5\">\n      <section className=\"py-10 flex flex-col items-center rounded border border-gray-300 bg-white text-2xl font-medium text-yellow-800 animate__animated animate__pulse\">\n        <div className=\"flex flex-col items-center\">\n          <IoWarning className=\"w-32 h-32\" />\n          {description}\n        </div>\n        {content && content}\n        {false && (\n          <div className=\"text-center group text-sm -mb-3 mt-5\">\n            <NavLink\n              to=\"/apps-page\"\n              className=\"border border-rounded-md bg-gray-100 text-gray-900 rounded border-gray-100 group-hover:bg-gray-50 group-hover:border-gray-400 px-2 py-1\"\n            >\n              Back to App\n            </NavLink>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default React.memo(NoSession);\n","import React from \"react\";\n\ntype TableLoadingProps = {\n  cols: number;\n};\nconst TableLoading: React.FC<TableLoadingProps> = (props) => {\n  const displayCols = (): JSX.Element[] => {\n    let colsArray: number[] = [];\n    for (let index = 0; index < props.cols; index++) {\n      colsArray.push(index);\n    }\n    let result = colsArray.map((element) => {\n      return (\n        <td className=\"p-3 text-center whitespace-nowrap\" key={element}>\n          <div className=\"w-full h-4 rounded bg-gray-200 animate__animated animate__pulse animate__delay-5s animate__infinite\"></div>\n        </td>\n      );\n    });\n\n    return result;\n  };\n  return (\n    <>\n      <tr className=\"border-b border-gray-200\" key={Math.random()}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={Math.random()}>\n        {displayCols()}\n      </tr>\n      <tr className=\"border-b border-gray-200\" key={Math.random()}>\n        {displayCols()}\n      </tr>\n    </>\n  );\n};\n\nexport default TableLoading;\n","import React from \"react\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport { RiFileExcel2Fill } from \"react-icons/ri\";\n\ninterface ExportToExcelProps {\n  fileData: any[];\n  fileName: string;\n  btnName?: string;\n  className?: string;\n  showIcon?: boolean;\n}\n\nconst ExportToExcel: React.FC<ExportToExcelProps> = ({\n  fileData,\n  fileName,\n  btnName = \"Excel\",\n  className = \"flex items-center gap-1 px-4 py-1 rounded text-green-700 bg-white border hover:text-white hover:bg-green-700 border-green-700 font-bold\",\n  showIcon = true,\n}) => {\n  const fileType =\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n  const fileExtension = \".xlsx\";\n\n  const exportToCSV = (apiData: any[], fileName: string) => {\n    const ws = XLSX.utils.json_to_sheet(apiData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n\n  return (\n    <button\n      onClick={(e) => exportToCSV(fileData, fileName)}\n      className={className}\n    >\n      {showIcon && <RiFileExcel2Fill />}\n      {btnName}\n    </button>\n  );\n};\n\nexport default ExportToExcel;\n","export default __webpack_public_path__ + \"static/media/mineduc.11a9ae1c.png\";","import jsPDF from \"jspdf\";\nimport { DATE } from \"../../utils/functions\";\nimport Logo from \"../../utils/mineduc.png\";\nrequire(\"jspdf-autotable\");\n\nexport const addFooters = (doc: any) => {\n  const pageCount = doc.internal.getNumberOfPages();\n\n  doc.setFont(\"helvetica\", \"italic\");\n  doc.setFontSize(8);\n  for (var i = 1; i <= pageCount; i++) {\n    doc.setPage(i);\n    doc.text(\n      \"Page \" + String(i) + \" of \" + String(pageCount),\n      doc.internal.pageSize.width / 2,\n      297,\n      {\n        align: \"center\",\n      }\n    );\n  }\n};\n\nexport type reportSettingsInterface = {\n  doneBy: string;\n  title: string;\n  subjectTitle: string;\n  subject: string;\n  institute: string;\n  period: string;\n  footer: string;\n  orientation?: \"p\" | \"l\";\n};\n\nexport const generatePDF = async (\n  reportSettings: reportSettingsInterface,\n  table: HTMLElement,\n  callBack: (status: boolean) => void\n) => {\n  callBack(true);\n  const orientation: \"p\" | \"l\" = reportSettings.orientation\n    ? reportSettings.orientation\n    : \"p\";\n  var lMargin: number = 20; //left margin in mm\n  var rMargin: number = 20; //right margin in mm\n  var pdfInMM: number = 185; // width of A4 in mm\n\n  //   var doc = new jsPDF(\"p\", \"mm\", \"a4\");\n  var doc: any = new jsPDF(orientation, \"mm\", \"a4\");\n\n  doc.setTextColor(95, 95, 95);\n  doc.setFontSize(28);\n  // doc.text(\n  //   this.props.reportTitle,\n  //   doc.internal.pageSize.getWidth() / 2,\n  //   30,\n  //   undefined,\n  //   \"center\"\n  // );\n  doc.addImage(Logo, \"png\", 20, 20, 10, 10);\n  doc.text(\"MINEDUC\", 32, 28.5, undefined, \"left\");\n  //   doc.setTextColor(19, 90, 152);\n  doc.setFontSize(26);\n  doc.text(\n    reportSettings.title,\n    doc.internal.pageSize.getWidth() / 2,\n    42.7,\n    undefined,\n    \"center\"\n  );\n\n  doc.setFontSize(20);\n  doc.text(\n    reportSettings.institute,\n    doc.internal.pageSize.getWidth() / 2,\n    53.7,\n    undefined,\n    \"center\"\n  );\n\n  var lines;\n  lines = doc.splitTextToSize(\n    reportSettings.subject,\n    pdfInMM - lMargin - rMargin\n  );\n  // if (reportSettings.position) {\n  // } else if (reportSettings.subject) {\n  //   lines = doc.splitTextToSize(\n  //     reportSettings.subject,\n  //     pdfInMM - lMargin - rMargin\n  //   );\n  // }\n\n  //   doc.setTextColor(0, 123, 255);\n  doc.setFontSize(16);\n  //   doc.text(lines, doc.internal.pageSize.getWidth() / 2, 45, {\n  //     maxWidth: 85,\n  //     align: \"center\",\n  //   });\n\n  var y = 63,\n    width;\n  doc.setTextColor(95, 95, 95);\n  doc.text(`${reportSettings.subjectTitle}: `, lMargin, y);\n  width = doc.getTextWidth(`${reportSettings.subjectTitle}: `);\n  // if (reportSettings.position) {\n  // } else if (reportSettings.position) {\n  //   doc.text(`Subject: `, lMargin, y);\n  //   width = doc.getTextWidth(\"Subject: \");\n  // }\n  // doc.setFontType(\"bold\");\n  doc.setTextColor(38, 38, 38);\n  for (var i = 0; i < lines.length; i++) {\n    if (y > 280) {\n      y = 10;\n      doc.addPage();\n    }\n    // doc.text(15, y, lines[i]);\n    doc.text(lines[i], lMargin + width, y);\n    y = y + 7;\n  }\n  doc.setTextColor(95, 95, 95);\n  doc.text(\"Period: \", lMargin, y + 3);\n  width = doc.getTextWidth(\"Period: \");\n  doc.setTextColor(38, 38, 38);\n  doc.text(reportSettings.period, lMargin + width, y + 3);\n\n  doc.autoTable({\n    html: table,\n    startY: 85,\n    margin: { horizontal: 20 },\n    cellPadding: 3, // Horizontal cell padding\n    // fontSize: 12,\n    rowHeight: 20,\n    // styles: { overflow: \"linebreak\" },\n    bodyStyles: { valign: \"top\" },\n    columnStyles: { email: { cellWidth: \"wrap\" } },\n    theme: \"striped\",\n    tableWidth: true,\n  });\n\n  doc.setFontSize(12);\n  let finalY = doc.lastAutoTable.finalY; // The y position on the page\n  doc.text(`Reported by: ${reportSettings.doneBy}`, lMargin, finalY + 15);\n  doc.text(\n    \"Report downloaded on \" + DATE(new Date().toString()),\n    lMargin,\n    finalY + 23\n  );\n\n  addFooters(doc);\n  await doc\n    .save(\n      `${\n        reportSettings.title +\n        \": \" +\n        reportSettings.subject +\n        \": \" +\n        reportSettings.period\n      }.pdf`,\n      { returnPromise: true }\n    )\n    .then(callBack(false));\n};\n","import React, { useState } from \"react\";\nimport {\n  MdCheckCircle,\n  MdRadioButtonUnchecked,\n  MdSearch,\n} from \"react-icons/md\";\nimport Loading from \"../../components/Loading/Loading\";\nimport {\n  PlansInterface,\n  SessionPlanInterface,\n  SessionPlanTypeStatus,\n} from \"../../interfaces\";\nimport { DATE } from \"../../utils/functions\";\nimport searchData from \"../../utils/search\";\n\nexport const isPlansActive = (plans: PlansInterface[]): PlansInterface[] => {\n  let today = new Date();\n  let activePlans: PlansInterface[] = [];\n  for (let plan of plans) {\n    let startDate = new Date(plan.start_date);\n    let endDate = new Date(plan.end_date);\n    if (\n      startDate.getTime() <= today.getTime() &&\n      endDate.getTime() >= today.getTime() &&\n      plan.type_status === SessionPlanTypeStatus.OPEN\n    ) {\n      activePlans = [...activePlans, plan];\n    }\n  }\n  return activePlans;\n};\n\ninterface ChooseSessionProps {\n  allSession: SessionPlanInterface[] | null;\n  setSelectSession: (period: SessionPlanInterface | \"all\") => void;\n  currentSelected: SessionPlanInterface | \"all\";\n  chooseAll: boolean;\n}\n\nconst ChooseSession = (props: ChooseSessionProps) => {\n  const [selectedPlan, setSelectedPlan] = useState<SessionPlanInterface | null>(\n    null\n  );\n  const [search, setSearch] = useState<string>(\"\");\n  const getSearch = (\n    period: SessionPlanInterface[],\n    searched: string\n  ): SessionPlanInterface[] => {\n    return searchData(period, searched) as SessionPlanInterface[];\n  };\n\n  return (\n    <div className=\"\">\n      <div className=\"px-3\">\n        <input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setSearch(e.target.value)\n          }\n          type=\"text\"\n          className=\"py-3 px-4 w-full rounded border border-gray-400 mb-3\"\n          placeholder=\"Search by year, name\"\n          disabled={props.allSession === null || props.allSession.length === 0}\n        />\n      </div>\n\n      <div className=\"bg-gray-100 px-3 pt-3 pb-2 rounded-b\">\n        {props.allSession === null ? (\n          <Loading />\n        ) : props.allSession.length === 0 ? (\n          <div className=\"flex flex-col text-gray-400 items-center justify-center mb-2 bg-white py-4\">\n            <MdSearch className=\"text-6xl\" />\n            <div className=\"flex flex-col items-center justify-center\">\n              <span>No session found!</span>\n            </div>\n          </div>\n        ) : (\n          <section>\n            {props.chooseAll && (\n              <div\n                className={`rounded border ${\n                  props.currentSelected === \"all\"\n                    ? \"bg-blue-50 border-blue-300\"\n                    : \"bg-white border-white \"\n                } group hover:border-blue-500 px-2 py-2 mb-2 flex flex-col md:flex-row items-start md:items-center md:justify-between`}\n              >\n                <div className=\"flex flex-row items-center gap-3\">\n                  {props.currentSelected === \"all\" ? (\n                    <MdCheckCircle className={`text-blue-500 text-4xl`} />\n                  ) : (\n                    <MdRadioButtonUnchecked\n                      className={`text-gray-300 text-4xl`}\n                    />\n                  )}\n                  <div className=\"flex flex-col\">\n                    <div className={`text-gray-600 font-bold`}>All session</div>\n                  </div>\n                </div>\n                <div\n                  onClick={() => {\n                    props.setSelectSession(\"all\");\n                  }}\n                  className=\"bg-gray-50 group-hover:bg-blue-600 font-semibold text-gray-400 group-hover:text-white rounded px-3 py-2 cursor-pointer\"\n                >\n                  Select\n                </div>\n              </div>\n            )}\n            {getSearch(props.allSession, search).map((item, i) => (\n              <div\n                key={i + 1}\n                className={`rounded border ${\n                  props.currentSelected !== \"all\" &&\n                  props.currentSelected._id === item._id\n                    ? \"bg-blue-50 border-blue-300\"\n                    : \"bg-white border-white \"\n                } group hover:border-blue-500 px-2 py-2 mb-2`}\n              >\n                <div className=\"flex flex-col md:flex-row items-start md:items-center md:justify-between \">\n                  <div className=\"flex flex-row items-center gap-3\">\n                    {props.currentSelected !== \"all\" &&\n                    props.currentSelected._id === item._id ? (\n                      <MdCheckCircle className={`text-blue-500 text-4xl`} />\n                    ) : (\n                      <MdRadioButtonUnchecked\n                        className={`text-gray-300 text-4xl`}\n                      />\n                    )}\n                    <div className=\"flex flex-col\">\n                      <div\n                        className={`${\n                          props.currentSelected !== \"all\" &&\n                          props.currentSelected._id === item._id\n                            ? \"text-blue-600\"\n                            : \"text-gray-600\"\n                        } font-bold`}\n                      >\n                        {item.session_plan_name}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        <span>Status: </span>\n                        <span\n                          className={`${\n                            item.is_active === true\n                              ? \"text-gray-900 font-bold underline\"\n                              : \"text-gray-500 italic\"\n                          }`}\n                        >\n                          {item.is_active === true ? \"Active\" : \"Expired\"}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row items-center gap-2\">\n                    {(selectedPlan === null ||\n                      selectedPlan._id !== item._id) && (\n                      <div\n                        onClick={() => setSelectedPlan(item)}\n                        className=\"bg-gray-50 group-hover:bg-blue-100 font-semibold text-gray-400 group-hover:text-blue-600 rounded px-3 py-2 cursor-pointer\"\n                      >\n                        Details\n                      </div>\n                    )}\n                    <div\n                      onClick={() => {\n                        props.setSelectSession(item);\n                      }}\n                      className=\"bg-gray-50 group-hover:bg-blue-600 font-semibold text-gray-400 group-hover:text-white rounded px-3 py-2 cursor-pointer\"\n                    >\n                      Select\n                    </div>\n                    {selectedPlan !== null && selectedPlan._id === item._id && (\n                      <div\n                        onClick={() => setSelectedPlan(null)}\n                        className=\"bg-red-100 group-hover:bg-red-200 font-semibold text-red-600 group-hover:text-red-800 rounded px-3 py-2 cursor-pointer\"\n                      >\n                        Close\n                      </div>\n                    )}\n                  </div>\n                </div>\n                {/* {selectedPlan !== null && selectedPlan._id === item._id && (\n                  <div className=\"bg-white rounded border border-blue-50 mt-2 animate__animated animate__fadeIn\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-blue-50\">\n                        <tr className=\"text-left\">\n                          <th className=\"px-3 py-3\">#</th>\n                          <th>Plan</th>\n                          <th>Start date</th>\n                          <th>Ending date</th>\n                          <th>Status</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"text-sm\">\n                        {selectedPlan !== null &&\n                          selectedPlan._id === item._id &&\n                          selectedPlan.plans.length > 0 &&\n                          item.plans.map((plan, i) => (\n                            <tr\n                              key={i + 1}\n                              className={`${\n                                isPlansActive(item.plans).find(\n                                  (itm) => itm.type_key === plan.type_key\n                                ) !== undefined\n                                  ? \"bg-blue-100 text-blue-600 font-bold\"\n                                  : \"\"\n                              } text-left border-b border-blue-50`}\n                            >\n                              <td className=\"px-3 py-1\">{i + 1}</td>\n                              <td>{plan.type_title}</td>\n                              <td>{DATE(plan.start_date, \"DD/MM/YYYY\")}</td>\n                              <td>{DATE(plan.end_date, \"DD/MM/YYYY\")}</td>\n                              <td>{plan.type_status}</td>\n                            </tr>\n                          ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )} */}\n              </div>\n            ))}\n          </section>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ChooseSession);\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { BiExport, BiSort } from \"react-icons/bi\";\nimport { FiEdit } from \"react-icons/fi\";\nimport { ImFilesEmpty } from \"react-icons/im\";\nimport {\n  MdCheckBox,\n  MdCheckBoxOutlineBlank,\n  MdHistory,\n  MdRadioButtonChecked,\n  MdRadioButtonUnchecked,\n} from \"react-icons/md\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth,\n  loadEducationCategories,\n  PushPopupAlert,\n  schoolLevelsStoreInterface,\n} from \"../../../actions\";\nimport {\n  getAllClaims,\n  getAllApplications,\n  setSelectedClaimType,\n  GetClaimingTypes,\n} from \"../../../actions/claiming\";\nimport { PopupAlertData } from \"../../../components/Alert/Popup\";\nimport {\n  generatePDF,\n  reportSettingsInterface,\n} from \"../../../components/DownloadPDF/rest\";\nimport Loading from \"../../../components/Loading/Loading\";\nimport Modal, { ModalSize, Themes } from \"../../../components/Modal/Modal\";\nimport {\n  SideNavigation,\n  MainItem,\n} from \"../../../components/Navigation/SideNavigation\";\nimport {\n  CandidateClaimInterface,\n  claimReportContentInterface,\n  claimReportContentKeyInterface,\n  ClaimToPrintInterface,\n} from \"../../../interfaces/claimings\";\nimport { PopupAlertTheme } from \"../../../interfaces/popupAlert\";\nimport { StoreState } from \"../../../reducers\";\nimport { ClaimingReducerType } from \"../../../reducers/claiming\";\nimport { DocumentReducerInterface } from \"../../../reducers/document\";\nimport ExportToExcel from \"../../../utils/ExportToExcel\";\nimport { DATE, sortThisArray } from \"../../../utils/functions\";\nimport { ClaimTypesEnum, whichClaimType } from \"../../Claimings/Candidate\";\nimport TableLoading from \"../../../components/Loading/TableLoading\";\nimport {\n  education_category,\n  PlansTypeKeys,\n  SessionPlanInterface,\n} from \"../../../interfaces\";\nimport { GetAllSessionPlans } from \"../../../actions/session\";\nimport {\n  capitalizeFirstLetter,\n  capitalizeFirstWord,\n  isEmptyOrSpaces,\n} from \"../../../shared/dataTest\";\nimport ChooseSession from \"../../SessionSettings/ChooseSession\";\nimport NoSession from \"../../SessionSettings/NoSession\";\n\nexport const reportClaimType = (\n  type: PlansTypeKeys | \"all\"\n): ClaimTypesEnum | \"all\" => {\n  let result: ClaimTypesEnum | \"all\" = \"all\";\n  switch (type) {\n    case PlansTypeKeys.APPLICATION:\n      result = ClaimTypesEnum.application;\n      break;\n    case PlansTypeKeys.DOCUMENT_VALIDATION:\n      result = ClaimTypesEnum.document;\n      break;\n    case PlansTypeKeys.EXAMINATION:\n      result = ClaimTypesEnum.exam;\n      break;\n    case PlansTypeKeys.MARKS_PUBLICATION:\n      result = ClaimTypesEnum.marks_publication;\n      break;\n    case PlansTypeKeys.PLACEMENT_TRANSFER:\n      result = ClaimTypesEnum.placement;\n      break;\n    default:\n      result = \"all\";\n      break;\n  }\n\n  return result;\n};\n\nconst searchData = (\n  objList: ClaimToPrintInterface[],\n  text: string\n): ClaimToPrintInterface[] => {\n  if (undefined === text || text === \"\") return objList;\n  return objList.filter((product) => {\n    let flag;\n    // let dataKeys = product;\n\n    for (let prop in product) {\n      flag = false;\n      if (\n        prop === \"names\" ||\n        prop === \"gender\" ||\n        prop === \"national_id\" ||\n        prop === \"phone\" ||\n        prop === \"email\" ||\n        prop === \"claim_title\" ||\n        prop === \"claim_type\" ||\n        prop === \"claim_level\" ||\n        prop === \"education_category\" ||\n        prop === \"claim_session\" ||\n        prop === \"date\" ||\n        prop === \"decision\"\n      ) {\n        if (product[prop]) {\n          flag =\n            product[prop]!.toString()\n              .toLowerCase()\n              .indexOf(text.toLowerCase()) > -1;\n        }\n      }\n      if (flag) break;\n    }\n    return flag;\n  });\n};\n\nconst defaultReportContent: claimReportContentInterface[] = [\n  {\n    key: claimReportContentKeyInterface.names,\n    title: \"Applicant Names\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.national_id,\n    title: \"National ID\",\n    status: true,\n  },\n  { key: claimReportContentKeyInterface.gender, title: \"Gender\", status: true },\n  { key: claimReportContentKeyInterface.phone, title: \"Phone\", status: true },\n  {\n    key: claimReportContentKeyInterface.claim_session,\n    title: \"Claim Session\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.education_category,\n    title: \"Education Institute\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.date,\n    title: \"Claim Date\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.decision,\n    title: \"Decision\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_title,\n    title: \"Claim Title\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_type,\n    title: \"Claim Type\",\n    status: true,\n  },\n  {\n    key: claimReportContentKeyInterface.claim_level,\n    title: \"Claim Level\",\n    status: true,\n  },\n];\n\ntype AppProps = {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  // systemPositions: PositionAPI[] | null;\n  // courses: course[] | null;\n  schoolLevels: schoolLevelsStoreInterface;\n  loadEducationCategories: (callback: (loading: boolean) => void) => void;\n  // loadCourses: Function;\n  // getAllAnswers: Function;\n  setSelectedClaimType: Function;\n  // getPositions: Function;\n  getAllClaims: Function;\n  GetClaimingTypes: Function;\n  // getAllApplications: Function;\n  GetAllSessionPlans: Function;\n  // getDocumentCategory: Function;\n  // getDocumentSubCategory: Function;\n  // getDocumentFields: Function;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n};\n\nconst _ClaimingReport: React.FC<AppProps> = (props) => {\n  const [thisPeriod, setThisPeriod] = useState<SessionPlanInterface | null>(\n    null\n  );\n  const [thisLevel, setThisLevel] = useState<number | \"all\">(\"all\");\n  const [loading, setLoading] = useState<boolean>(true);\n  const [loadingSession, setLoadingSession] = useState<boolean>(true);\n  const [periodChanged, setPeriodChanged] = useState<boolean>(false);\n  const [loadingClaims, setLoadingClaims] = useState<boolean>(true);\n  const [loadingInstitutes, setLoadingInstitutes] = useState<boolean>(true);\n  const [downloading, setDownloading] = useState<boolean>(false);\n  const [claimToPrint, setClaimToPrint] = useState<\n    ClaimToPrintInterface[] | null\n  >();\n\n  const [sortProperty, setSortProperty] = useState<string>(\"\");\n  const [isSorted, setIsSorted] = useState<boolean>(false);\n  const [sortOrder, setSortOrder] = useState<\"ASC\" | \"DESC\">(\"ASC\");\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n  const [generateReportModal, setGenerateReportModal] = useState<{\n    reportType: \"EXCEL\" | \"PDF\";\n    status: boolean;\n  } | null>(null);\n  const [reportTitle, setReportTitle] = useState<string>(\"\");\n  const [reportContent, setReportContent] =\n    useState<claimReportContentInterface[]>(defaultReportContent);\n  const [selectAll, setSelectAll] = useState<boolean>(true);\n  const [formError, setFormError] = useState<{\n    element: string;\n    msg: string;\n  } | null>(null);\n  const [selectPeriod, setSelectPeriod] = useState<boolean>(false);\n  const [thisEducation, setThisEducation] = useState<\n    education_category | \"all\"\n  >(\"all\");\n\n  useEffect(() => {\n    // LOADING EDUCATION CATEGORY =================================\n    if (\n      props.schoolLevels.education_categories === null ||\n      props.schoolLevels.education_categories.length === 0\n    ) {\n      props.loadEducationCategories(setLoadingInstitutes);\n    } else {\n      setLoadingInstitutes(false);\n    }\n    // END LOADING EDUCATION CATEGORY =================================\n    // LOADING CLAIM TYPES ========================================\n    if (props.claiming.claimTypes === null) {\n      props.GetClaimingTypes((status: boolean, msg: string) => {\n        if (status === false) {\n          if (msg.length > 0) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    }\n    // END LOADING CLAIM TYPES ========================================\n    // LOADING APPLICATION SESSION ====================================\n    if (props.application_sessions === null) {\n      props.GetAllSessionPlans((status: boolean, msg: string) => {\n        if (!status) {\n          setLoadingSession(false);\n          setLoading(false);\n          if (msg.length) {\n            props.PushPopupAlert({\n              title: msg,\n              theme: PopupAlertTheme.danger,\n            });\n          }\n        }\n      });\n    } else if (loadingSession) {\n      setLoading(false);\n      setLoadingSession(false);\n    }\n\n    // SETTING ACTIVE SESSION ==========================\n    if (\n      thisPeriod === null &&\n      !loadingSession &&\n      props.application_sessions &&\n      props.application_sessions.length > 0\n    ) {\n      let thisSession = props.application_sessions.find(\n        (item) => item.is_active === true\n      );\n      setThisPeriod(thisSession ? thisSession : props.application_sessions[0]);\n      // if (props.claiming.allAnswer === null) {\n      //   props.getAllAnswers(\n      //     thisSession\n      //       ? thisSession._id\n      //       : props.application_sessions[0]._id,\n      //     (status: boolean, msg: string) => {\n      //       setLoading(status);\n      //       if (!status && msg.length) {\n      //         props.PushPopupAlert({\n      //           title: msg,\n      //           theme: PopupAlertTheme.danger,\n      //         });\n      //       }\n      //     }\n      //   );\n      // }\n    }\n\n    // LOADING DOCUMENT CATEGORIES ==========================\n    // if (!props.documentReducer.documentCategory && loadingDocuments) {\n    //   props.getDocumentCategory();\n    //   setLoadingDocuments(false);\n    // } else if (loadingDocuments) {\n    //   setLoadingDocuments(false);\n    // }\n    // LOADING DOCUMENT CLARIFICATIONS ==========================\n    // if (!props.documentReducer.documentSubCategory && loadingClarifications) {\n    //   props.getDocumentSubCategory();\n    //   setLoadingClarifications(false);\n    // } else if (loadingClarifications) {\n    //   setLoadingClarifications(false);\n    // }\n    // LOADING DOCUMENT FIELDS ==========================\n    // if (!props.documentReducer.documentFields && loadingFields) {\n    //   props.getDocumentFields();\n    //   setLoadingFields(false);\n    // } else if (loadingFields) {\n    //   setLoadingFields(false);\n    // }\n\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    if (props.claiming.allClaims === null && thisPeriod !== null) {\n      props.getAllClaims(1, thisPeriod._id, (status: boolean, msg: string) => {\n        !status && setLoadingClaims(status);\n        if (status === false && msg.length) {\n          props.PushPopupAlert({\n            title: msg,\n            theme: PopupAlertTheme.danger,\n          });\n        }\n      });\n    } else if (thisPeriod && loadingClaims) {\n      setLoadingClaims(false);\n    }\n\n    // LOADING CLAIMING OF CURRENT CANDIDATES ================================\n    // if (props.claiming.allApplications === null && thisPeriod !== null) {\n    //   props.getAllApplications(\n    //     thisPeriod._id,\n    //     (status: boolean, msg: string) => {\n    //       !status && setLoadingApplications(status);\n    //       if (status === false && msg.length) {\n    //         props.PushPopupAlert({\n    //           title: msg,\n    //           theme: PopupAlertTheme.danger,\n    //         });\n    //       }\n    //     }\n    //   );\n    // } else if (thisPeriod && loadingApplications) {\n    //   setLoadingApplications(false);\n    // }\n\n    // if (props.systemPositions === null) {\n    //   props.getPositions((status: boolean, msg: string) => {\n    //     setLoadingPosition(status);\n    //     console.log({ status: status, msg: msg });\n    //     if (msg.length) {\n    //       props.PushPopupAlert({\n    //         title: msg,\n    //         theme: PopupAlertTheme.danger,\n    //       });\n    //     }\n    //   });\n    // } else if (loadingPosition) {\n    //   setLoadingPosition(false);\n    // }\n\n    // LOADING COURSE ====================================\n    // if (\n    //   props.courses === null ||\n    //   (props.courses.length === 0 && loadingCourses)\n    // ) {\n    //   props.loadCourses(setLoadingCourses);\n    // } else if (loadingCourses) {\n    //   setLoadingCourses(false);\n    // }\n  }, [loadingClaims, loadingSession, props, thisPeriod]);\n\n  if (loading === true) {\n    return (\n      <div className=\"text-center mt-7 font-bold text-4xl text-gray-400 animate-pulse\">\n        Loading Data...\n      </div>\n    );\n  }\n\n  if (props.application_sessions && props.application_sessions.length === 0) {\n    return <NoSession />;\n  }\n\n  // const displayClaimTitle = (thisClaim: CandidateClaimInterface): string => {\n  //   let result: string = thisClaim.claiming_on_id;\n  //   if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n  //     result =\n  //       thisClaim.user.details.filter(\n  //         (item) => item.validation_status !== \"waiting\"\n  //       ).length > 0\n  //         ? adminDisplayClaimTitle(\n  //             props.documentReducer,\n  //             thisClaim.user.details.filter(\n  //               (item) => item.validation_status !== \"waiting\"\n  //             ),\n  //             thisClaim\n  //           )\n  //         : \"Document not found\";\n  //   }\n  //   if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n  //     if (props.claiming.allApplications) {\n  //       let thisApplication = props.claiming.allApplications.find(\n  //         (item) => item._id === thisClaim.claiming_on_id\n  //       );\n  //       if (\n  //         thisApplication &&\n  //         props.claiming.allApplications &&\n  //         props.systemPositions\n  //       ) {\n  //         let thisPosition = props.systemPositions.find(\n  //           (item) => item.position_id === thisApplication!.position\n  //         );\n  //         if (thisPosition) {\n  //           result = thisPosition.position_title;\n  //         } else {\n  //           result = \"Application not found\";\n  //         }\n  //       }\n  //     }\n  //   }\n\n  //   if (\n  //     thisClaim.type_key === PlansTypeKeys.EXAMINATION &&\n  //     props.courses &&\n  //     props.claiming.allAnswer\n  //   ) {\n  //     let thisAnswer = getCourseIdBySheetId(\n  //       props.claiming.allAnswer,\n  //       thisClaim.claiming_on_id\n  //     );\n  //     if (thisAnswer && getCourseById(props.courses, thisAnswer.course)) {\n  //       result =\n  //         \"Exam of \" +\n  //         getCourseById(props.courses, thisAnswer.course)!.course_name;\n  //     } else {\n  //       result = \"Unknown exam\";\n  //     }\n  //   }\n\n  //   return result;\n  // };\n\n  // const getClaimInstitute = (\n  //   thisClaim: CandidateClaimInterface\n  // ): string | null => {\n  //   if (thisClaim.type_key === PlansTypeKeys.DOCUMENT_VALIDATION) {\n  //     return null;\n  //   }\n  //   // if (thisClaim.type_key === PlansTypeKeys.APPLICATION) {\n  //   //   if (props.claiming.allApplications) {\n  //   //     let thisApplication = props.claiming.allApplications.find(\n  //   //       (item) => item._id === thisClaim.claiming_on_id\n  //   //     );\n  //   //     if (\n  //   //       thisApplication &&\n  //   //       props.claiming.allApplications &&\n  //   //       props.systemPositions\n  //   //     ) {\n  //   //       // return thisApplication.\n  //   //       let thisPosition = props.systemPositions.find(\n  //   //         (item) => item.position_id === thisApplication!.position\n  //   //       );\n  //   //       if (thisPosition) {\n  //   //         return thisPosition.education_institute_id.education_institute_id;\n  //   //       }\n  //   //     }\n  //   //   }\n  //   // }\n\n  //   return null;\n  // };\n\n  const onPeriodChange = (period_id: string) => {\n    setPeriodChanged(true);\n    props.getAllClaims(1, period_id, (status: boolean, msg: string) => {\n      !status && setPeriodChanged(false);\n      if (status === false && msg.length) {\n        props.PushPopupAlert({\n          title: msg,\n          theme: PopupAlertTheme.danger,\n        });\n      }\n    });\n  };\n\n  const isClaimTypeActive = (\n    selectedType: PlansTypeKeys | \"all\",\n    currentType: PlansTypeKeys | \"all\"\n  ): boolean => {\n    if (currentType === \"all\" && selectedType === \"all\") {\n      return true;\n    } else if (currentType !== \"all\" && selectedType !== \"all\") {\n      if (currentType === selectedType) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const setSort = (thisProperty: string) => {\n    if (sortProperty === thisProperty && sortOrder === \"ASC\") {\n      setSortOrder(\"DESC\");\n    } else {\n      setSortOrder(\"ASC\");\n    }\n    setSortProperty(thisProperty);\n    setIsSorted(true);\n  };\n\n  const ClaimTypes = (\n    claims: ClaimToPrintInterface[]\n  ): {\n    title: string;\n    count: number;\n    type: PlansTypeKeys | \"all\";\n  }[] => {\n    let output: {\n      title: string;\n      count: number;\n      type: PlansTypeKeys | \"all\";\n    }[] = [{ title: \"All types\", count: claims.length, type: \"all\" }];\n\n    Object.values(PlansTypeKeys).forEach((PlansKey) => {\n      if (PlansKey !== PlansTypeKeys.MARKS_PUBLICATION) {\n        output.push({\n          title: capitalizeFirstLetter(reportClaimType(PlansKey)),\n          count:\n            claims.length > 0\n              ? claims.filter(\n                  (itm) => itm.claim_type === reportClaimType(PlansKey)\n                ).length\n              : 0,\n          type: PlansKey,\n        });\n      }\n    });\n\n    return output;\n  };\n\n  const ClaimLevels = (\n    claims: ClaimToPrintInterface[]\n  ): {\n    title: string;\n    count: number;\n    level: number | \"all\";\n  }[] => {\n    let output: {\n        title: string;\n        count: number;\n        level: number | \"all\";\n      }[] = [{ title: \"All levels\", count: claims.length, level: \"all\" }],\n      levels: number[] = [1, 2];\n    for (let i in levels) {\n      output.push({\n        title: \"Level \" + levels[i],\n        count: claims.filter((itm) => itm.claim_level === levels[i]).length,\n        level: levels[i],\n      });\n    }\n    return output;\n  };\n\n  const updateReportContent = (key: claimReportContentKeyInterface) => {\n    let index: number = reportContent.findIndex((item) => item.key === key);\n    let newArray: claimReportContentInterface[] = reportContent;\n    newArray[index].status = !newArray[index].status;\n    setReportContent(newArray);\n    let isSelectAllNeeded = newArray.find((item) => item.status === false);\n    if (isSelectAllNeeded) {\n      setSelectAll(false);\n    } else {\n      setSelectAll(true);\n    }\n\n    // UPDATE APPLICATION LIST FOR UPDATE ==============================\n    updateClaimToPrint();\n  };\n\n  const updateClaimToPrint = () => {\n    // UPDATE REPORT TITLE ========================\n    if (thisPeriod) {\n      let title = \"Claim Report \" + thisPeriod.session_plan_name;\n      // if (thisLevel!==\"all\") {\n      //   title = \"Claim Report - Level \"+thisLevel + thisPeriod.session_plan_name;\n      // }\n      setReportTitle(title);\n    }\n    // UPDATE CONTENT =============================\n    if (props.claiming.allClaims && props.claiming.claimTypes) {\n      let arrayNew: ClaimToPrintInterface[] = [];\n      let n: number = 1;\n      for (const key in props.claiming.allClaims) {\n        if (\n          Object.prototype.hasOwnProperty.call(props.claiming.allClaims, key)\n        ) {\n          for (const keyClaim in props.claiming.allClaims[key].claims) {\n            if (\n              Object.prototype.hasOwnProperty.call(\n                props.claiming.allClaims[key].claims,\n                keyClaim\n              )\n            ) {\n              const element = props.claiming.allClaims[key].claims[keyClaim];\n              const thisType = whichClaimType(props.claiming.allClaims[key]);\n              let dataArray: ClaimToPrintInterface = {\n                claim_id: n,\n                names:\n                  props.claiming.allClaims[key].user.user_info.fname +\n                  \" \" +\n                  props.claiming.allClaims[key].user.user_info.lname,\n                gender: props.claiming.allClaims[key].user.user_info.sex\n                  ? \"Male\"\n                  : \"Female\",\n                national_id: props.claiming.allClaims[key].user.n_id!,\n                phone: props.claiming.allClaims[key].user.phone_number,\n                email: props.claiming.allClaims[key].user.email,\n                claim_type: thisType ? thisType : \"\",\n                claim_level: element.level,\n                education_category: \"\",\n                claim_session: thisPeriod ? thisPeriod.session_plan_name : \"\",\n                date: DATE(element.createdAt),\n                decision: element.decision_taken_status\n                  ? element.decision_taken_status\n                  : \"PENDING\",\n                claim_title: props.claiming.allClaims[key].title,\n              };\n              for (const key in reportContent) {\n                if (Object.prototype.hasOwnProperty.call(reportContent, key)) {\n                  if (!reportContent[key].status) {\n                    delete dataArray[reportContent[key].key];\n                  }\n                }\n              }\n              arrayNew.push(dataArray);\n              n++;\n            }\n          }\n        }\n      }\n      setClaimToPrint(arrayNew);\n      arrayNew = [];\n      n = 1;\n    }\n  };\n\n  const FC_ClaimData = (\n    allClaims: CandidateClaimInterface[] | null\n  ): ClaimToPrintInterface[] | null => {\n    if (allClaims === null) return null;\n    let arrayNew: ClaimToPrintInterface[] = [];\n    let n: number = 1;\n    // LOOP IN ALL CLAIM ONE BY ONE ###########################\n    for (const key in allClaims) {\n      if (Object.prototype.hasOwnProperty.call(allClaims, key)) {\n        // LOOP IN ALL CLAIM OF ONE FILE ONE BY ONE ===========================\n        for (const keyClaim in allClaims[key].claims) {\n          if (\n            Object.prototype.hasOwnProperty.call(\n              allClaims[key].claims,\n              keyClaim\n            )\n          ) {\n            const element = allClaims[key].claims[keyClaim];\n            const thisType = whichClaimType(allClaims[key]);\n            let dataArray: ClaimToPrintInterface = {\n              claim_id: n,\n              names:\n                allClaims[key].user.user_info.fname +\n                \" \" +\n                allClaims[key].user.user_info.lname,\n              gender: allClaims[key].user.user_info.sex ? \"Male\" : \"Female\",\n              national_id: allClaims[key].user.n_id!,\n              phone: allClaims[key].user.phone_number,\n              email: allClaims[key].user.email,\n              claim_type: thisType ? thisType : \"\",\n              claim_level: element.level,\n              education_category:\n                allClaims[key].institute_id &&\n                !isEmptyOrSpaces(allClaims[key].institute_id)\n                  ? allClaims[key].institute_id\n                  : null,\n              claim_session: thisPeriod ? thisPeriod.session_plan_name : \"\",\n              date: DATE(element.createdAt),\n              decision: element.decision_taken_status\n                ? element.decision_taken_status\n                : \"PENDING\",\n              claim_title: allClaims[key].title\n                ? allClaims[key].title\n                : \"Undefined\",\n            };\n            // for (const key in reportContent) {\n            //   if (Object.prototype.hasOwnProperty.call(reportContent, key)) {\n            //     if (!reportContent[key].status) {\n            //       delete dataArray[reportContent[key].key];\n            //     }\n            //   }\n            // }\n            arrayNew.push(dataArray);\n            n++;\n          }\n        }\n      }\n    }\n    return arrayNew;\n  };\n\n  const resetReportContent = (currentState: boolean) => {\n    let newArray: claimReportContentInterface[] = reportContent;\n    for (const key in newArray) {\n      if (isChangeAllowed(newArray[key].key)) {\n        newArray[key].status = !currentState;\n      }\n    }\n\n    setReportContent(newArray);\n    setSelectAll(!currentState);\n    updateClaimToPrint();\n  };\n\n  const isChangeAllowed = (key: claimReportContentKeyInterface): boolean => {\n    if (\n      key === claimReportContentKeyInterface.names ||\n      key === claimReportContentKeyInterface.decision ||\n      key === claimReportContentKeyInterface.claim_session ||\n      key === claimReportContentKeyInterface.claim_type ||\n      key === claimReportContentKeyInterface.date\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  const FC_GeneratePDF = () => {\n    if (!document.querySelectorAll(\"#report_content tbody tr\").length) {\n      props.PushPopupAlert({\n        title: `Can't generate Report of empty Data`,\n        theme: PopupAlertTheme.warning,\n      });\n      return;\n    }\n\n    if (thisPeriod) {\n      const table: HTMLElement | null =\n        document.getElementById(\"report_content\");\n      const reportSettings: reportSettingsInterface = {\n        doneBy: props.auth.user.fname + \" \" + props.auth.user.lname,\n        title: \"Claim Report\",\n        subjectTitle: \"Claim type\",\n        subject:\n          props.claiming.selectedClaimType === \"all\"\n            ? \"All Types\"\n            : props.claiming.selectedClaimType,\n        period: thisPeriod.session_plan_name,\n        footer: \"Online Recruitment\",\n        institute:\n          thisEducation === \"all\"\n            ? \"All institute\"\n            : thisEducation.education_category_title,\n      };\n      table && generatePDF(reportSettings, table, setDownloading);\n    }\n  };\n\n  const FC_FilterClaims = (\n    allClaims: ClaimToPrintInterface[],\n    claimType: PlansTypeKeys | \"all\",\n    claimLevel: number | \"all\",\n    institute: education_category | \"all\"\n  ): ClaimToPrintInterface[] => {\n    let result: ClaimToPrintInterface[] = allClaims;\n    if (claimType !== \"all\") {\n      result = result.filter((item) => item.claim_type === claimType);\n    }\n    if (claimLevel !== \"all\") {\n      result = result.filter((item) => item.claim_level === claimLevel);\n    }\n\n    if (institute !== \"all\") {\n      result = result.filter(\n        (item) =>\n          item.education_category === null ||\n          item.education_category === institute.education_institute_id\n      );\n    }\n\n    return result;\n  };\n\n  return (\n    <Fragment>\n      <SideNavigation>\n        <div className=\"flex flex-col mb-4\">\n          <span className=\"text-sm text-gray-600 mb-2\">\n            Education categories:\n          </span>\n          {props.schoolLevels.education_categories === null ||\n          loadingInstitutes ? (\n            <Loading />\n          ) : props.schoolLevels.education_categories.length === 0 ? (\n            <span>No result found</span>\n          ) : (\n            <Fragment>\n              <div\n                onClick={() => setThisEducation(\"all\")}\n                className={`border rounded px-2 py-2 mb-2 cursor-pointer ${\n                  thisEducation === \"all\"\n                    ? \"bg-blue-600 text-white hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                    : \"hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                } font-bold flex flex-row items-center gap-2`}\n              >\n                {thisEducation === \"all\" ? (\n                  <MdRadioButtonChecked />\n                ) : (\n                  <MdRadioButtonUnchecked />\n                )}\n                <span>All</span>\n              </div>\n              {props.schoolLevels.education_categories.map((item, i) => (\n                <div\n                  onClick={() => setThisEducation(item)}\n                  key={i + 1}\n                  className={`border rounded px-2 py-2 mb-2 cursor-pointer ${\n                    thisEducation !== \"all\" &&\n                    thisEducation.education_institute_id ===\n                      item.education_institute_id\n                      ? \"bg-blue-600 text-white hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                      : \"hover:bg-blue-100 hover:text-blue-600 hover:border-blue-500\"\n                  } font-bold flex flex-row items-center gap-2`}\n                >\n                  {thisEducation !== \"all\" &&\n                  thisEducation.education_institute_id ===\n                    item.education_institute_id ? (\n                    <MdRadioButtonChecked />\n                  ) : (\n                    <MdRadioButtonUnchecked />\n                  )}\n                  <span>{item.education_category_title}</span>\n                </div>\n              ))}\n            </Fragment>\n          )}\n        </div>\n        <div className=\"\">\n          <div className=\"text-gray-600 text-sm mb-2\">Selected period:</div>\n          <div\n            onClick={() => setSelectPeriod(true)}\n            className=\"font-bold bg-blue-50 border border-blue-200 rounded py-2 cursor-pointer text-xs px-2 hover:underline  text-blue-600  mb-4 w-full flex flex-row items-center animate__animated animate__zoomIn\"\n          >\n            {thisPeriod !== null\n              ? `${capitalizeFirstWord(thisPeriod.session_plan_name)} - ${\n                  thisPeriod.period\n                }`\n              : \"Filter by period\"}\n            <FiEdit className=\"text-3xl text-blue-600\" />\n          </div>\n        </div>\n        <div className=\"pt-1\">\n          <div className=\"text-sm text-gray-700 pb-2 pt-2\">Claim types:</div>\n          {props.claiming.claimTypes === null ||\n          FC_ClaimData(props.claiming.allClaims) === null ? (\n            <Loading />\n          ) : (\n            ClaimTypes(FC_ClaimData(props.claiming.allClaims)!).map(\n              (item, index: number) => (\n                <div\n                  onClick={() =>\n                    props.setSelectedClaimType(reportClaimType(item.type))\n                  }\n                  key={item.title + index}\n                >\n                  <MainItem\n                    title={item.title}\n                    count={item.count}\n                    active={isClaimTypeActive(\n                      props.claiming.selectedClaimType,\n                      item.type\n                    )}\n                  />\n                </div>\n              )\n            )\n          )}\n        </div>\n        <div className=\"pt-1\">\n          <div className=\"text-sm text-gray-700 pb-2 pt-2\">Claim level:</div>\n          {props.claiming.claimTypes === null ||\n          FC_ClaimData(props.claiming.allClaims) === null ? (\n            <Loading />\n          ) : (\n            ClaimLevels(FC_ClaimData(props.claiming.allClaims)!).map(\n              (item, index: number) => (\n                <div\n                  onClick={() => setThisLevel(item.level)}\n                  key={item.title + index}\n                >\n                  <MainItem\n                    title={item.title}\n                    count={item.count}\n                    active={item.level === thisLevel}\n                  />\n                </div>\n              )\n            )\n          )}\n        </div>\n      </SideNavigation>\n      <section>\n        {/* REPORT TITLE ============================================ */}\n        <div className=\"grid md:grid-cols-12\">\n          <div className=\"col-span-8\">\n            <div className=\"mt-4 mx-4 flex flex-col gap-1\">\n              <span className=\"text-3xl font-bold text-gray-700\">\n                Claim report\n              </span>\n            </div>\n          </div>\n          <div className=\"col-span-4\">\n            <div className=\"float-right mt-2\">\n              {props.claiming.allClaims && props.claiming.allClaims.length > 0 && (\n                <div className=\"flex flex-row items-center justify-end font-bold mb-2\">\n                  <BiExport className=\"text-2xl text-gray-500\" />\n                  <span className=\"text-gray-500\">Export as</span>\n                  <button\n                    className=\"px-4 py-1 ml-1 rounded bg-white border hover:text-blue-600 font-bold hover:bg-blue-50 border-gray-200\"\n                    disabled={loading}\n                    onClick={() => {\n                      updateClaimToPrint();\n                      setGenerateReportModal({\n                        reportType: \"EXCEL\",\n                        status: true,\n                      });\n                    }}\n                  >\n                    EXCEL\n                  </button>\n                  <button\n                    className={`px-4 py-1 ml-1 rounded bg-white border hover:text-blue-600 font-bold hover:bg-blue-50 border-gray-200 ${\n                      downloading && \"cursor-wait\"\n                    }`}\n                    onClick={() => FC_GeneratePDF()}\n                    disabled={loading || downloading}\n                  >\n                    PDF\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {/* END REPORT TITLE ============================================ */}\n        <div className=\"bg-white my-4\">\n          <div className=\"w-full px-2 py-2\">\n            <input\n              onChange={(e) => setSearchInput(e.target.value)}\n              type=\"text\"\n              value={searchInput}\n              placeholder=\"Search...\"\n              className=\"w-full bg-gray-100 py-2 px-3 rounded focus:border-gray-800\"\n              disabled={\n                props.claiming.allClaims === null ||\n                props.claiming.claimTypes === null ||\n                FC_ClaimData(props.claiming.allClaims) === null ||\n                periodChanged\n              }\n            />\n          </div>\n          <table className=\"w-full shadow\" id=\"report_content\">\n            <thead className=\"bg-white border-b-2 border-gray-300 text-gray-600 font-bold text-sm\">\n              <tr>\n                <td className=\"px-2 py-2\">#</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"names\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Applicant names <BiSort />\n                  </div>\n                </td>\n                <td className=\"px-2 py-2\">National ID</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"gender\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Gender <BiSort />\n                  </div>\n                </td>\n                <td className=\"px-2 py-2\">Phone</td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_title\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Title <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_type\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Type <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"claim_level\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Claim Level <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"decision\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Status <BiSort />\n                  </div>\n                </td>\n                <td\n                  className=\"px-2 py-2 cursor-pointer\"\n                  onClick={() => setSort(\"date\")}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    Date <BiSort />\n                  </div>\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {props.claiming.allClaims === null ||\n              props.claiming.claimTypes === null ||\n              periodChanged ? (\n                <TableLoading cols={10} />\n              ) : FC_ClaimData(props.claiming.allClaims) === null ? (\n                <TableLoading cols={10} />\n              ) : FC_FilterClaims(\n                  FC_ClaimData(props.claiming.allClaims)!,\n                  props.claiming.selectedClaimType,\n                  thisLevel,\n                  thisEducation\n                ).length === 0 ? (\n                <tr>\n                  <td colSpan={10} className=\"px-2 py-2\">\n                    <div className=\"flex flex-col text-gray-400 items-center justify-center bg-gray-100 rounded py-10\">\n                      <ImFilesEmpty className=\"text-8xl text-gray-400 mb-2 animate__animated animate__shakeX\" />\n                      <span className=\"text-sm font-bold\">\n                        No result found! Please try to search again\n                      </span>\n                      <div className=\"w-full mt-2 flex flex-row items-center justify-center\">\n                        <ul className=\"text-sm py-2 text-blue-600 font-bold flex flex-row gap-2\">\n                          <li\n                            onClick={() => setSelectPeriod(true)}\n                            className=\"underline text-gray-500 cursor-pointer\"\n                          >\n                            Filter by period\n                          </li>\n                          <li className=\"text-gray-400 italic\">or</li>\n                          <li className=\"text-gray-500\">\n                            Filter by Claim type\n                          </li>\n                          <li className=\"text-gray-400 italic\">or</li>\n                          <li className=\"text-gray-500\">\n                            Filter by Claim Level\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </td>\n                </tr>\n              ) : (\n                sortThisArray(\n                  isSorted,\n                  searchData(\n                    FC_FilterClaims(\n                      FC_ClaimData(props.claiming.allClaims)!,\n                      props.claiming.selectedClaimType,\n                      thisLevel,\n                      thisEducation\n                    ),\n                    searchInput\n                  ),\n                  sortProperty,\n                  sortOrder\n                ).map((item: ClaimToPrintInterface, i) => (\n                  <tr\n                    key={i + 1}\n                    className={`${\n                      i % 2 !== 0 ? \"bg-gray-100\" : \"bg-white\"\n                    } text-gray-600 hover:bg-blue-100 hover:text-blue-700 border-b border-gray-300 hover:border-blue-500 text-sm`}\n                  >\n                    <td className=\"px-2 py-2\">{i + 1}</td>\n                    <td className=\"px-2 py-2\">{item.names}</td>\n                    <td className=\"px-2 py-2\">{item.national_id}</td>\n                    <td className=\"px-2 py-2\">{item.gender}</td>\n                    <td className=\"px-2 py-2\">{item.phone}</td>\n                    <td className=\"px-2 py-2\">{item.claim_title}</td>\n                    <td className=\"px-2 py-2\">{item.claim_type}</td>\n                    <td className=\"px-2 py-2\">{\"Level \" + item.claim_level}</td>\n                    <td className=\"px-2 py-2\">\n                      {item.decision}\n                      {/* {capitalizeFirstLetter(item.decision)} */}\n                    </td>\n                    <td className=\"px-2 py-2\">{item.date}</td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </section>\n      {/* GENERATE DYNAMIC REPORT CONTENT MODAL */}\n      {generateReportModal !== null && generateReportModal.status === true && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              {/* <IoBriefcase className=\"text-5xl text-gray-500\" /> */}\n              <div className=\"flex flex-col\">\n                <span className=\"font-bold text-2xl text-gray-500\">\n                  Generating Report contents\n                </span>\n                <span className=\"text-sm text-blue-600 font-normal\">\n                  Generating {generateReportModal.reportType} Report\n                </span>\n              </div>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => setGenerateReportModal(null)}\n          backDropClose={false}\n          widthSizeClass={ModalSize.medium}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <div className=\"px-6\">\n            <div className=\"my-2 text-base text-gray-700 sm:text-lg\">\n              <div className=\"flex flex-col\">\n                <label>Title</label>\n                <input\n                  type=\"text\"\n                  className={`text-left input-white w-20 inline-block ${\n                    formError && formError.element === \"report_title\"\n                      ? \"border-red-500\"\n                      : \"border-gray-500\"\n                  } border-2`}\n                  placeholder=\"Sub Category Title\"\n                  value={reportTitle}\n                  onChange={(e) => {\n                    setFormError(null);\n                    setReportTitle(e.target.value);\n                  }}\n                  disabled={loading}\n                />\n                {formError && formError.element === \"report_title\" && (\n                  <span className=\"text-red-500\">{formError.msg}</span>\n                )}\n              </div>\n              <div className=\"flex flex-col mt-2\">\n                <label>Report content</label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 items-center gap-2 mt-2\">\n                  {reportContent.map((item, index) => (\n                    <div\n                      key={index}\n                      className={`flex items-center gap-1 ${\n                        isChangeAllowed(item.key)\n                          ? \"cursor-pointer\"\n                          : \"cursor-not-allowed\"\n                      }`}\n                      onClick={() =>\n                        isChangeAllowed(item.key) &&\n                        updateReportContent(item.key)\n                      }\n                      title={\n                        !isChangeAllowed(item.key)\n                          ? \"Required for every report!\"\n                          : \"\"\n                      }\n                    >\n                      {item.status ? (\n                        <MdCheckBox className=\"w-6 h-6 text-blue-700\" />\n                      ) : (\n                        <MdCheckBoxOutlineBlank className=\"w-6 h-6\" />\n                      )}\n                      <span>{item.title}</span>\n                    </div>\n                  ))}\n                </div>\n                {formError && formError.element === \"report_content\" && (\n                  <span className=\"text-red-500\">{formError.msg}</span>\n                )}\n              </div>\n            </div>\n            <div className=\"flex justify-between mb-2 mt-4\">\n              <div\n                className={`flex items-center gap-1 cursor-pointer`}\n                onClick={() => resetReportContent(selectAll)}\n              >\n                {selectAll ? (\n                  <MdCheckBox className=\"w-6 h-6 text-blue-700\" />\n                ) : (\n                  <MdCheckBoxOutlineBlank className=\"w-6 h-6\" />\n                )}\n                <span>Select all</span>\n              </div>\n\n              {claimToPrint && !loading && (\n                <ExportToExcel\n                  fileData={claimToPrint}\n                  fileName={reportTitle}\n                  btnName=\"Generate\"\n                />\n              )}\n            </div>\n          </div>\n        </Modal>\n      )}\n      {/* END GENERATE DYNAMIC REPORT CONTENT MODAL */}\n      {selectPeriod && (\n        <Modal\n          title={\n            <div className=\"flex flex-row gap-4 items-center\">\n              <MdHistory className=\"text-5xl text-blue-600\" />\n              <span className=\"flex flex-col\">Choose a period</span>\n            </div>\n          }\n          backDrop={true}\n          theme={Themes.default}\n          close={() => thisPeriod !== null && setSelectPeriod(false)}\n          backDropClose={true}\n          widthSizeClass={ModalSize.extraLarge}\n          displayClose={true}\n          padding={{ title: true }}\n        >\n          <ChooseSession\n            allSession={props.application_sessions}\n            setSelectSession={(value: SessionPlanInterface | \"all\") => {\n              value !== \"all\" && setThisPeriod(value);\n              value !== \"all\" && onPeriodChange(value._id);\n              value !== \"all\" && setSelectPeriod(false);\n            }}\n            chooseAll={false}\n            currentSelected={thisPeriod ? thisPeriod : \"all\"}\n          />\n        </Modal>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  auth,\n  sessionPlan,\n  claiming,\n  document,\n  schoolLevels,\n}: StoreState): {\n  auth: Auth;\n  application_sessions: SessionPlanInterface[] | null;\n  claiming: ClaimingReducerType;\n  documentReducer: DocumentReducerInterface;\n  schoolLevels: schoolLevelsStoreInterface;\n} => {\n  return {\n    auth: auth,\n    application_sessions: sessionPlan.allSessionPlans,\n    claiming,\n    documentReducer: document,\n    schoolLevels,\n  };\n};\n\nexport const ClaimingReport = connect(mapStateToProps, {\n  getAllClaims,\n  GetClaimingTypes,\n  getAllApplications,\n  GetAllSessionPlans,\n  loadEducationCategories,\n  setSelectedClaimType,\n  PushPopupAlert,\n})(_ClaimingReport);\n"],"sourceRoot":""}