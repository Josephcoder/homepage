{"version":3,"sources":["containers/DoExam/DoExam.tsx"],"names":["_DoEam","props","setLoading","status","setState","loading","setSubmitQuestionAnswer","submitQuestionAnswer","setProfileWindowStatus","windowStatus","profile","questionsList","state","setQuestionsListWindowStatus","setSelectedQuestion","question","selectedQuestion","answerQuestionFn","answer","console","log","setExamQuestionAnswer","setCompletedTest","completedTest","changingExamStatusLoading","changingExamStatus","initializeEmptyList","testResults","localStorage","getItem","ActionTypes","ADD_ANSWER","newData","JSON","parse","questionAnswers","length","i","addExamAnswer","doExam","exam_answers","exam_questions","SubmitExamAnswers","auth","user","n_id","examDetails","periods","selected_period","check","candidateExam","selected_exam_details","checkUserExam","exam","positions","selected_position","exam_room_details","RequestUserExamDetails","user_id","position","position_id","userExamLocation","district_id","center_id","room_id","setLoadExamResultMessage","BackToExamination","loadUserProfileDetails","FC_GetProfileDetails","msg","componentDidMount","sex","course","courses","loadCourses","questionTypes","loadQuestionTypes","exam_questions_answers","testAnswers","componentWillUnmount","socket","emit","Events","USER_DISCONNECTED_ONLINE_SERVER","setLoadExamResultNoMessage","PushPopupAlert","title","description","theme","PopupAlertTheme","danger","success","candidate_exam","undefined","user_exams_done","find","itm","exam_paper","exam_paper_id","CleanCandidateExam","SubmitAnswer","question_answers","examQuestionIds","questions","temp","question_id","sel_question","item","questionAnswered","findQuestionType","type","SubmitExamQuestionAnswer","disability","fname","lname","gender","email","phone_number","in_education","questions_order","language","selected_language","userAnswer","answers","position_code","submitExam","a","exam_id","submitWholeExam","axios","put","API","DO_EXAM","doneExam","submittedExam","document","fullscreenElement","exitFullscreen","errorToText","setSubmitModal","submitModalStatus","startExam","display_exam","start_exam","selected_exam_id","requestExam","loadCandidateExamFromSupervisor","candidateDetailsProctoring","joined","pauseExam","inExam","data","application_session_id","application_session","session_plan_id","done_by","event_type_id","EventsLabels","DONE_EXAM","time","Date","toString","FC_SaveEvent","error","EXAM_DONE_SERVER","timeOutExam","TIME_OUT","TIME_OUT_SERVER","getExam","REQUEST_EXAM_SERVER","examStatus","loadUserExamErr","start_time","duration","added_minutes","group_id","this","to","className","onClick","window","location","reload","homeProctoring","restartExam","id","CleanCandidateExamAnswers","setExamStatus","UserExamActions","Restart","stopExam","Done","period_id","removeClient","Removed","examAlreadyDone","candidateStopExam","reason","candidateContinueExam","joinedRoom","changeTime","timer","candidateProctoringDetails","requestUserAnswers","ejectCandidate","backDrop","Themes","default","close","setSelectedCandidateExam","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","selected_course","course_code","course_name","DATE","exam_date","medium","Component","DoExam","connect","system","proctoring","loadExam","deleteExamAnswers","ChangeExamStatus","loadCandidateExam","setSelectedExamQuestion","setSelectedPeriod","GetUserExamDetails","FC_AddRules"],"mappings":"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","file":"static/js/61.b06e81cb.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Footer from \"./Footer/Footer\";\nimport Profile from \"./Profile/Profile\";\nimport QuestionDetails from \"./QuestionDetails/QuestionDetails\";\nimport DoExamTitle from \"./DoExamTitle/DoExamTitle\";\nimport * as Interfaces from \"../../interfaces/index\";\nimport { connect } from \"react-redux\";\nimport {\n  ActionTypes,\n  examDataInterface,\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  Auth,\n  candidateExamStoreInterface,\n  System,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  courseStoreInterface,\n  loadCourses,\n  setSelectedPeriod,\n  applicationPeriodsStoreInterface,\n  QuestionAnswersStore,\n  setExamQuestionAnswer,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  positionsStoreInterface,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  RequestUserExamDetailsInterface,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  Socket,\n  FC_AddRules,\n  FT_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n  Proctoring,\n  InitialExamDetails,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport {\n  EventInterface,\n  Events,\n  EventsLabels,\n  LiveServer__Candidate_Details,\n  LiveServer__Room,\n  question_answer,\n} from \"../../interfaces/index\";\nimport {\n  CandidateExam,\n  CandidateExamQuestionAnswer,\n  ExamInterface,\n  ExamResultsDetails,\n  examStatus,\n  UserExamActions,\n  userExamDetails,\n} from \"../../interfaces/exam\";\nimport { exam_question } from \"../../interfaces/exam_question\";\nimport { Redirect } from \"react-router\";\nimport { ProctoringCandidateOnline } from \"../ProctoringCandidateOnline/ProctoringCandidateOnline\";\nimport QuestionsList from \"./QuestionsList/QuestionsList\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport Loading from \"../../components/Loading/Loading\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport { DATE, errorToText } from \"../../utils/functions\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport axios from \"axios\";\nimport { API } from \"../../utils/api\";\nimport { MdCheckCircle, MdInfoOutline } from \"react-icons/md\";\nimport ProctoringRuleItem from \"../../components/ProctoringRuleItem/ProctoringRuleItem\";\nimport { findQuestionType, questionAnswered } from \"./utils/utils\";\n\ninterface DoExamProps {\n  proctoring: Proctoring;\n  FC_GetProfileDetails: Function;\n  currentPosition: Interfaces.PositionAPI | null;\n  doExam: examDataInterface;\n  auth: Auth;\n  loadExam: (user_id: string, exam: ExamInterface) => void;\n  addExamAnswer: (questionAnswer: newAnswer) => void;\n  deleteExamAnswers: () => void;\n  SubmitExamAnswers: (user_id: string) => void;\n  ChangeExamStatus: (user_id: string, status: examStatus) => void;\n  candidateExam: candidateExamStoreInterface;\n  setSelectedCandidateExam: (selected_exam: InitialExamDetails | null) => void;\n  loadCandidateExam: (\n    exam_id: string,\n    CheckUserExam: (candidateExam: CandidateExam) => void,\n    callback: (loading: boolean) => void\n  ) => void;\n  setSelectedExamQuestion: (\n    exam_id: string,\n    question_id: string | null\n  ) => void;\n  course: courseStoreInterface;\n  loadCourses: (callback: (loading: boolean) => void) => void;\n  periods: applicationPeriodsStoreInterface;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  setExamQuestionAnswer: (answer: QuestionAnswersStore) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  RequestUserExamDetails: (\n    userExamDetails: userExamDetails,\n    callback: (loading: boolean) => void,\n    setLoadExamResultMessage: (msg: string, status: boolean) => void,\n    BackToExamination: (exam: ExamResultsDetails) => void\n  ) => void;\n  positions: positionsStoreInterface;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n  CleanCandidateExam: (exam_id: string) => void;\n  CleanCandidateExamAnswers: (exam_id: string) => void;\n  SubmitExamQuestionAnswer: (\n    answer: CandidateExamQuestionAnswer,\n    callback: (loading: boolean) => void,\n    actionStatus: (msg: string, status: boolean) => void\n  ) => void;\n  GetUserExamDetails: (\n    request: RequestUserExamDetailsInterface,\n    callback: (loading: boolean) => void\n  ) => void;\n  BackToExamination: (exam: ExamResultsDetails) => void;\n  setExamStatus: (\n    user: string,\n    exam_paper_id: string,\n    action: UserExamActions,\n    reason: string,\n    callback: (loading: boolean) => void\n  ) => void;\n  FC_SaveEvent: Function;\n  socket: Socket;\n  FC_AddRules: FT_AddRules;\n  loadCandidateExamFromSupervisor: (\n    candidateExam: CandidateExam,\n    firstTime: boolean\n  ) => void;\n  requestUserAnswers: (\n    exam_id: string,\n    user_id: string,\n    callback: (loading: boolean) => void\n  ) => void;\n}\n\ninterface DoExamState {\n  windowStatus: {\n    profile: boolean;\n    questionsList: boolean;\n  };\n  selectedQuestion: exam_question | null;\n  testAnswers: newAnswer[] | [];\n  completedTest: boolean;\n  examStatus: boolean;\n  loading: boolean;\n  loadUserExamErr: string;\n  submitQuestionAnswer: boolean;\n  submitWholeExam: boolean;\n  display_exam: boolean;\n  changingExamStatus: boolean;\n  inExam: boolean;\n\n  // Exam counter\n  start_exam: boolean;\n  start_time: string;\n  duration: number;\n  added_minutes: number;\n  group_id: string;\n  submittedExam: boolean;\n  candidateDetailsProctoring: LiveServer__Candidate_Details | null;\n  submitModalStatus: boolean;\n}\n\nexport interface newAnswer {\n  question_id: string | null;\n  user_answers: question_answer | null;\n}\n\nclass _DoEam extends Component<DoExamProps, DoExamState> {\n  constructor(props: DoExamProps) {\n    super(props);\n\n    this.state = {\n      windowStatus: {\n        profile: false,\n        questionsList: false,\n      },\n      selectedQuestion:\n        this.props.doExam.exam_answers !== null\n          ? this.props.doExam.exam_answers?.exam_questions[0]\n          : null,\n      testAnswers: [],\n      completedTest: false,\n      examStatus: false,\n      loading: false,\n      loadUserExamErr: \"\",\n      submitQuestionAnswer: false,\n      submitWholeExam: false,\n      display_exam: false,\n      changingExamStatus: false,\n      // timer\n      start_exam: false,\n      start_time: \"\",\n      duration: 0,\n      added_minutes: 0,\n      group_id: \"\",\n      inExam: false,\n      submittedExam: false,\n      candidateDetailsProctoring: null,\n      submitModalStatus: false,\n    };\n  }\n\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  };\n  setSubmitQuestionAnswer = (status: boolean) => {\n    this.setState({ submitQuestionAnswer: status });\n  };\n\n  setProfileWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: status,\n        questionsList: this.state.windowStatus.questionsList,\n      },\n    });\n  };\n  setQuestionsListWindowStatus = (status: boolean) => {\n    this.setState({\n      windowStatus: {\n        profile: this.state.windowStatus.profile,\n        questionsList: status,\n      },\n    });\n  };\n\n  setSelectedQuestion = (question: exam_question) => {\n    this.setState({ selectedQuestion: question });\n  };\n\n  answerQuestionFn = (answer: QuestionAnswersStore) => {\n    console.log(\"sUBMITT: \", answer);\n    this.props.setExamQuestionAnswer(answer);\n    // console.log(\"Submitted: \", answer);\n  };\n\n  setCompletedTest = (state: boolean) => {\n    this.setState({ completedTest: state });\n  };\n\n  changingExamStatusLoading = (status: boolean) => {\n    this.setState({ changingExamStatus: status });\n  };\n\n  initializeEmptyList = () => {\n    // localStorage.removeItem(ActionTypes.ADD_ANSWER)\n    let testResults = localStorage.getItem(ActionTypes.ADD_ANSWER);\n    if (testResults !== null) {\n      let newData = JSON.parse(testResults!).questionAnswers;\n      if (newData) {\n        if (newData.length > 0) {\n          for (let i in newData) {\n            this.props.addExamAnswer(newData[i]);\n          }\n          if (\n            newData.length ===\n            this.props.doExam.exam_answers?.exam_questions.length\n          ) {\n            this.setState({ completedTest: true });\n            this.props.SubmitExamAnswers(this.props.auth.user.n_id);\n          }\n        }\n      }\n    }\n  };\n\n  examDetails = () => {\n    if (this.props.periods.selected_period !== null) {\n      let check = this.props.candidateExam.selected_exam_details;\n      if (check !== null) {\n        return check;\n      }\n    }\n    return null;\n  };\n\n  checkUserExam = (exam: CandidateExam) => {\n    if (\n      this.props.positions.selected_position !== null &&\n      this.props.candidateExam.selected_exam_details !== null\n    ) {\n      if (this.props.candidateExam.exam_room_details !== null) {\n        // alert(this.props.candidateExam.exam_room_details.district_id)\n        this.props.RequestUserExamDetails(\n          {\n            user: this.props.auth.user.user_id,\n            position: this.props.positions.selected_position.position_id,\n            exam: exam,\n            userExamLocation: {\n              district_id:\n                this.props.candidateExam.exam_room_details.district_id,\n              center_id: this.props.candidateExam.exam_room_details.center_id,\n              room_id: this.props.candidateExam.exam_room_details.room_id,\n            },\n          },\n          this.setLoading,\n          this.setLoadExamResultMessage,\n          this.props.BackToExamination\n        );\n      }\n    }\n  };\n\n  loadUserProfileDetails = () => {\n    this.setState({\n      loading: true,\n    });\n    this.props.FC_GetProfileDetails(\n      this.props.auth.user.user_id,\n      (status: boolean, msg: string) => {\n        if (status === true) {\n          this.setState({\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      }\n    );\n    this.setState({\n      loading: false,\n    });\n  };\n\n  componentDidMount = () => {\n    if (\n      this.props.auth.user.sex === \"\" ||\n      this.props.auth.user.sex.length === 0\n    ) {\n      this.loadUserProfileDetails();\n    }\n    if (\n      this.props.course.courses === null ||\n      this.props.course.courses.length === 0\n    ) {\n      this.props.loadCourses(this.setLoading);\n    }\n    if (\n      this.props.questionTypes.questionTypes === null ||\n      this.props.questionTypes.questionTypes.length === 0\n    ) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    this.initializeEmptyList();\n    if (\n      this.props.doExam.exam_answers?.exam_questions.length === 0 &&\n      this.props.doExam.exam_answers.exam_questions_answers &&\n      this.props.doExam.exam_answers.exam_questions_answers?.questionAnswers\n        .length > 0\n    ) {\n      this.setState({\n        testAnswers:\n          this.props.doExam.exam_answers.exam_questions_answers\n            ?.questionAnswers,\n      });\n    }\n    // Function to change exam status\n  };\n\n  componentWillUnmount = () => {\n    if (this.props.candidateExam.exam_room_details) {\n      this.props.socket.socket.emit(Events.USER_DISCONNECTED_ONLINE_SERVER, {\n        room_id: this.props.candidateExam.exam_room_details.room_id,\n        user_id: this.props.auth.user.user_id,\n      });\n    }\n  };\n\n  setLoadExamResultNoMessage = (msg: string, status: boolean) => {\n    if (status === false) {\n      this.props.PushPopupAlert({\n        title: \"Error!\",\n        description: msg,\n        theme: PopupAlertTheme.danger,\n      });\n    }\n  };\n\n  setLoadExamResultMessage = (msg: string, status: boolean) => {\n    this.props.PushPopupAlert({\n      title: status === true ? \"Success!\" : \"Error!\",\n      description: msg,\n      theme: status === true ? PopupAlertTheme.success : PopupAlertTheme.danger,\n    });\n    if (status === false && this.props.candidateExam.candidate_exam !== null) {\n      // );\n      let test = this.props.candidateExam.user_exams_done.find(\n        (itm) =>\n          itm.exam_paper ===\n          this.props.candidateExam.candidate_exam?.exam_paper_id\n      );\n      if (test === undefined) {\n        this.props.CleanCandidateExam(\n          this.props.candidateExam.candidate_exam.exam_paper_id\n        );\n      }\n    }\n  };\n\n  SubmitAnswer = () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.question_answers.length > 0\n    ) {\n      let examQuestionIds: string[] = [];\n      for (let temp of this.props.candidateExam.candidate_exam.questions) {\n        examQuestionIds = [...examQuestionIds, temp.question_id];\n      }\n      for (let answer of this.props.candidateExam.question_answers) {\n        let sel_question =\n          this.props.candidateExam.candidate_exam.questions.find(\n            (item) => item.question_id === answer.question_id\n          );\n        if (\n          answer.status === false &&\n          this.props.candidateExam.exam_room_details &&\n          sel_question !== undefined\n        ) {\n          if (\n            questionAnswered(\n              this.props.candidateExam.question_answers,\n              sel_question,\n              findQuestionType(\n                sel_question.type,\n                this.props.questionTypes.questionTypes\n              )!\n            ) === true\n          ) {\n            //Means updated need to be submitted!\n            this.props.SubmitExamQuestionAnswer(\n              {\n                user: this.props.auth.user.user_id,\n                exam_paper:\n                  this.props.candidateExam.candidate_exam.exam_paper_id,\n                // New updates need to be checked\n                position:\n                  this.props.candidateExam.exam_room_details.position\n                    .position_id,\n                disability: this.props.auth.user.disability,\n                fname: this.props.auth.user.fname,\n                lname: this.props.auth.user.lname,\n                gender: this.props.auth.user.sex,\n                email: this.props.auth.user.email,\n                phone_number: this.props.auth.user.phone_number,\n                in_education: this.props.auth.user.in_education,\n                questions_order: examQuestionIds,\n                // End new updates\n                question: answer.question_id,\n                language:\n                  sel_question.question.find(\n                    (itm) =>\n                      itm.language ===\n                      this.props.candidateExam.selected_language\n                  ) === undefined\n                    ? sel_question.question[0].language\n                    : this.props.candidateExam.selected_language,\n                userAnswer: answer.answers,\n                position_code:\n                  this.props.candidateExam.exam_room_details.position\n                    .position_code,\n              },\n              this.setSubmitQuestionAnswer,\n              this.setLoadExamResultNoMessage\n            );\n          }\n        }\n      }\n    }\n  };\n\n  submitExam = async () => {\n    if (\n      this.props.candidateExam.candidate_exam !== null &&\n      this.props.candidateExam.exam_room_details !== null\n    ) {\n      let exam_id = this.props.candidateExam.candidate_exam.exam_paper_id;\n      let user_id = this.props.auth.user.user_id;\n      this.setState({ submitWholeExam: true });\n      try {\n        const res = await axios.put(\n          `${API.DO_EXAM}/answersheet/submit/${user_id}/${exam_id}`\n        );\n        if (res) {\n          this.doneExam();\n          this.setState({ submittedExam: true });\n          // this.props.CleanCandidateExam(exam_id);\n          // Exit full screen\n          if (document.fullscreenElement) {\n            if (document.exitFullscreen) {\n              document.exitFullscreen();\n            }\n          }\n          this.props.PushPopupAlert({\n            title: \"Success!\",\n            description: \"Exam submitted successfully!\",\n            theme: PopupAlertTheme.success,\n          });\n        }\n      } catch (error: any) {\n        // console.log(\"Submit exam err: \", { ...error });\n        this.props.PushPopupAlert({\n          title: \"Error occured!\",\n          description: errorToText(error),\n          theme: PopupAlertTheme.danger,\n        });\n      }\n      this.setState({ submitWholeExam: false });\n    }\n  };\n\n  setSubmitModal = (status: boolean) => {\n    this.setState({ submitModalStatus: status });\n  };\n\n  startExam = () => {\n    this.setState({ display_exam: true, start_exam: true });\n    this.props.candidateExam.selected_exam_id !== null &&\n      this.requestExam(\n        this.props.candidateExam.selected_exam_id,\n        (status: boolean, exam: CandidateExam) => {\n          // console.log(\"Testing exam from supervisor: \", exam);\n          if (status === true) {\n            this.props.loadCandidateExamFromSupervisor(\n              exam,\n              this.state.candidateDetailsProctoring !== null &&\n                this.state.candidateDetailsProctoring.user.joined === true\n                ? true\n                : false\n            );\n          }\n        }\n      );\n  };\n  pauseExam = () => {\n    this.setState({ display_exam: false, start_exam: false, inExam: false });\n  };\n\n  doneExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Done the exam\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.DONE_EXAM,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id:\n          this.props.candidateExam.exam_room_details.position.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.EXAM_DONE_SERVER, data);\n    }\n  };\n\n  timeOutExam = () => {\n    if (\n      this.props.candidateExam.exam_room_details !== null &&\n      this.props.candidateExam.candidate_exam !== null\n    ) {\n      let room_id = this.props.candidateExam.exam_room_details.room_id;\n\n      let data = {\n        application_session_id:\n          this.props.auth.application_session?.session_plan_id,\n        description: \"Time out\",\n        done_by: \"System\",\n        event_type_id: EventsLabels.TIME_OUT,\n        exam_id: this.props.candidateExam.candidate_exam.exam_paper_id, //this.props.proctoring.exam.\n        position_id:\n          this.props.candidateExam.exam_room_details.position.position_id,\n        room_id: room_id,\n        time: new Date().toString(),\n        user_id: this.props.auth.user.user_id,\n      } as EventInterface;\n\n      this.props.FC_SaveEvent(data, (status: boolean, error: string) => {});\n      this.props.socket.socket.emit(Events.TIME_OUT_SERVER, data);\n      this.submitExam();\n      // console.log(\"this.submitExam(); ==> timeOutExam()\");\n    }\n  };\n\n  requestExam = (\n    exam_id: string,\n    getExam: (status: boolean, exam: CandidateExam) => void\n  ) => {\n    this.props.socket.socket.emit(Events.REQUEST_EXAM_SERVER, exam_id, getExam);\n  };\n\n  render() {\n    // Control if user has started the exam\n    if (this.props.candidateExam.selected_exam_id === null) {\n      return <Redirect to=\"/candidate-exams\" />;\n    }\n\n    if (\n      this.state.loading === true ||\n      this.props.candidateExam.exam_room_details === null\n    ) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Loading, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    if (this.state.submitWholeExam === true) {\n      return (\n        <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n          <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n            <div className=\"text-gray-600 text-lg px-4 mb-4\">\n              Submitting your exam, Please wait...\n            </div>\n            <Loading />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"fixed top-0 left-0 z-50 w-full\">\n        <Fragment>\n          {/* {console.log(\"Rules: \")} */}\n          {this.state.inExam === false ? (\n            <div className=\"fixed top-0 left-0 z-50 rounded px-4 py-4 bg-gray-200 w-full h-screen flex flex-col items-center justify-center\">\n              <div className=\"bg-white rounded mx-4 my-4 px-4 py-4 w-full h-full\">\n                <div className=\"text-white text-lg px-4 mb-4\">Confirm</div>\n                <div className=\"flex flex-col items-center justify-center mb-10\">\n                  <Loading />\n                  <div className=\"text-yellow-800 text-xl font-bold my-5\">\n                    Something went wrong, retry again!\n                  </div>\n\n                  <div\n                    onClick={() => window.location.reload()}\n                    className=\"btn bg-yellow-100 text-yellow-800 border border-yellow-600 w-max text-center cursor-pointer\"\n                  >\n                    Click here to reload\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <ProctoringCandidateOnline\n              homeProctoring={true}\n              startExam={() => {\n                this.startExam();\n                this.setState({ start_exam: true });\n              }}\n              restartExam={() => {\n                if (this.props.candidateExam.candidate_exam !== null) {\n                  let id =\n                    this.props.candidateExam.candidate_exam.exam_paper_id;\n                  this.props.CleanCandidateExamAnswers(id);\n\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    id,\n                    UserExamActions.Restart,\n                    \"Exam restarted by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n\n                  // this.props.candidateExam.candidate_exam &&\n                  //   this.props.requestUserAnswers(\n                  //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                  //     this.props.auth.user.user_id,\n                  //     this.setLoading\n                  //   );\n                }\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              stopExam={() => {\n                // EXAM DONE ON WHOLE ROOM\n                // Stop all the room\n                // this.setState({ start_exam: false });\n                // console.log(\"DONE whole room\");\n                this.pauseExam();\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Done,\n                    \"All candidates ended by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              room_id={this.props.candidateExam.exam_room_details.room_id}\n              exam_id={\n                this.props.candidateExam.candidate_exam === null\n                  ? this.props.candidateExam.selected_exam_id\n                  : this.props.candidateExam.candidate_exam.exam_paper_id\n              }\n              position_id={\n                this.props.candidateExam.exam_room_details.position.position_id\n              }\n              application_session_id={\n                this.props.candidateExam.exam_room_details.period_id\n              }\n              removeClient={() => {\n                // REMOVE INDIVIDUAL\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.setExamStatus(\n                    this.props.auth.user.user_id,\n                    this.props.candidateExam.candidate_exam.exam_paper_id,\n                    UserExamActions.Removed,\n                    \"Exam stopped by supervisor\",\n                    this.changingExamStatusLoading\n                  );\n                this.props.candidateExam.candidate_exam !== null &&\n                  this.props.CleanCandidateExam(\n                    this.props.candidateExam.candidate_exam.exam_paper_id\n                  );\n              }}\n              examAlreadyDone={() => {\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                // console.log(\"Exam already done\");\n              }}\n              candidateStopExam={(reason: string) => {\n                // PAUSE\n                // console.log(`candidateStopExam: ${reason}`);\n                // this.pauseExam();\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Paused,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n              }}\n              candidateContinueExam={(reason: string) => {\n                // console.log(`candidateContinueExam: ${reason}`);\n                // this.props.candidateExam.candidate_exam !== null &&\n                //   this.props.setExamStatus(\n                //     this.props.auth.user.user_id,\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     UserExamActions.Continue,\n                //     reason,\n                //     this.changingExamStatusLoading\n                //   );\n\n                // this.props.candidateExam.candidate_exam &&\n                //   this.props.requestUserAnswers(\n                //     this.props.candidateExam.candidate_exam.exam_paper_id,\n                //     this.props.auth.user.user_id,\n                //     this.setLoading\n                //   );\n                this.startExam();\n                this.setState({ start_exam: true });\n                this.setState({ inExam: true });\n              }}\n              joinedRoom={(data: LiveServer__Room) => {\n                // console.log(\"Joined room: \", data);\n                this.setState({\n                  group_id: data.group_id,\n                });\n              }}\n              changeTime={(timer: {\n                duration: number;\n                start_time: string;\n                added_minutes: string;\n              }) => {\n                this.setState({\n                  duration: timer.duration,\n                  start_time: timer.start_time,\n                });\n              }}\n              candidateProctoringDetails={(\n                data: LiveServer__Candidate_Details\n              ) => {\n                this.setState({ candidateDetailsProctoring: data });\n                if (data.user.joined === true) {\n                  this.startExam();\n                  this.props.candidateExam.candidate_exam &&\n                    this.props.requestUserAnswers(\n                      this.props.candidateExam.candidate_exam.exam_paper_id,\n                      this.props.auth.user.user_id,\n                      this.setLoading\n                    );\n                }\n                console.log(\"Joined: \", data.user.joined);\n              }}\n              ejectCandidate={(user_id) => {\n                // window\n              }}\n            >\n              <div className=\"p-20 text-center text-4xl\">Janvier tests</div>\n            </ProctoringCandidateOnline>\n          )}\n          {this.props.candidateExam.candidate_exam === null &&\n            this.state.inExam === false && (\n              <Modal\n                title=\"\"\n                backDrop={true}\n                theme={Themes.default}\n                close={() => this.props.setSelectedCandidateExam(null)}\n                backDropClose={false}\n                widthSizeClass={ModalSize.extraLarge}\n                displayClose={false}\n                padding={{ title: false }}\n              >\n                <div className=\"rounded px-4 py-4 mx-2 my-2\">\n                  {this.props.course.courses === null ? (\n                    <Loading />\n                  ) : (\n                    <div>\n                      <div className=\"flex flex-row items-center gap-2\">\n                        {/* <div className=\"flex items-center justify-center \">\n                        <IoIosPaper className=\"text-9xl text-blue-600\" />\n                      </div> */}\n                        <div className=\"my-2 w-full\">\n                          <div className=\"text-blue-600 text-2xl font-extrabold mb-2\">\n                            {this.props.course.selected_course && (\n                              <div>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_code\n                                  }\n                                  -\n                                </span>\n                                <span>\n                                  {\n                                    this.props.course.selected_course\n                                      .course_name\n                                  }\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam date:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              {this.examDetails() &&\n                                DATE(\n                                  this.examDetails()!.exam_date,\n                                  \"DD/MM/YYYY\"\n                                )}\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Start time:\n                            </span>\n                            <span className=\"text-blue-600 font-bold\">\n                              start tme\n                            </span>\n                          </div>\n                          <div className=\"flex flex-row gap-3 text-sm\">\n                            <span className=\"text-gray-600 font-normal\">\n                              Exam duration:\n                            </span>\n                            duration of exam\n                          </div>\n                        </div>\n                      </div>\n                      {/* <div className=\"text-blue-600 text-3xl font-extrabold text-center\">Start Exam</div> */}\n                      <div className=\"flex flex-row justify-center items-center\">\n                        {/* <div className=\"text-blue-600 text-xl font-extrabold text-center bg-blue-50 rounded px-2 py-2 w-max\">00:00:00</div> */}\n                      </div>\n                      <div className=\"text-gray-600 font-bold text-l text-center mb-4\">\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Examination rules\n                          </div>\n                          rules hahahha\n                        </div>\n                        <div className=\"rounded px-4 py-4 bg-gray-100 my-4 text-sm text-left font-normal\">\n                          <div className=\"text-left text-gray-800 text-xl mb-3 font-extrabold\">\n                            Exam Proctoring rules\n                          </div>\n                          exam rules\n                        </div>\n                        <span className=\"text-blue-700\">\n                          If you are ready, click to start the exam now, The\n                          system will start to count your time!\n                        </span>\n                      </div>\n                      <div className=\"flex flex-row items-center justify-between mt-2\">\n                        <button\n                          onClick={() =>\n                            this.props.setSelectedCandidateExam(null)\n                          }\n                          className=\"btn bg-gray-50 text-gray-600 border\"\n                        >\n                          Go Back\n                        </button>\n                        <button\n                          onClick={() => {\n                            this.setState({ inExam: true });\n                            this.props.candidateExam.selected_exam_id !==\n                              null &&\n                              this.requestExam(\n                                this.props.candidateExam.selected_exam_id,\n                                (status: boolean, exam: CandidateExam) => {\n                                  if (status === true) {\n                                    this.props.loadCandidateExamFromSupervisor(\n                                      exam,\n                                      this.state.candidateDetailsProctoring !==\n                                        null &&\n                                        this.state.candidateDetailsProctoring\n                                          .user.joined === true\n                                        ? true\n                                        : false\n                                    );\n                                  }\n                                }\n                              );\n                          }}\n                          className=\"btn bg-blue-600 text-white\"\n                        >\n                          I accept, Start exam\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </Modal>\n            )}\n          {this.state.submittedExam === true && (\n            <Modal\n              title=\"\"\n              backDrop={true}\n              theme={Themes.default}\n              close={() => this.props.setSelectedCandidateExam(null)}\n              backDropClose={false}\n              widthSizeClass={ModalSize.medium}\n              displayClose={false}\n              padding={{ title: false }}\n            >\n              <div className=\"px-5 py-5\">\n                <div className=\"flex flex-row items-center justify-center\">\n                  <MdCheckCircle className=\"text-7xl text-blue-600\" />\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <span className=\"text-3xl font-extrabold text-blue-600 text-center\">\n                    Exam submitted\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center mt-3 mb-5\">\n                  <span className=\"text-center text-gray-500\">\n                    Thank you for attending the exam, Your exam has been\n                    submitted successfully!, click continue to the applications\n                    list, you will open the application to view your score right\n                    now.\n                  </span>\n                </div>\n                <div className=\"flex flex-row items-center justify-center\">\n                  <div\n                    onClick={() => {\n                      this.setState({ submittedExam: false });\n                      if (document.fullscreenElement) {\n                        if (document.exitFullscreen) {\n                          document.exitFullscreen();\n                        }\n                      }\n                      this.props.candidateExam.candidate_exam &&\n                        this.props.CleanCandidateExam(\n                          this.props.candidateExam.candidate_exam.exam_paper_id\n                        );\n                      window.location.reload();\n                    }}\n                    className=\"btn bg-blue-100 text-blue-700 rounded w-max cursor-pointer\"\n                  >\n                    Continue to view marks\n                  </div>\n                </div>\n              </div>\n            </Modal>\n          )}\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  auth,\n  doExam,\n  candidateExam,\n  system,\n  course,\n  periods,\n  questionTypes,\n  positions,\n  socket,\n  proctoring,\n}: StoreState): {\n  auth: Auth;\n  doExam: examDataInterface;\n  candidateExam: candidateExamStoreInterface;\n  system: System;\n  course: courseStoreInterface;\n  periods: applicationPeriodsStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  positions: positionsStoreInterface;\n  socket: Socket;\n  proctoring: Proctoring;\n} => {\n  return {\n    auth: auth,\n    doExam: doExam,\n    candidateExam: candidateExam,\n    system: system,\n    course: course,\n    periods: periods,\n    questionTypes: questionTypes,\n    positions: positions,\n    socket,\n    proctoring,\n  };\n};\n\nexport const DoExam = connect(mapStateToProps, {\n  loadExam,\n  addExamAnswer,\n  deleteExamAnswers,\n  SubmitExamAnswers,\n  ChangeExamStatus,\n  setSelectedCandidateExam,\n  loadCandidateExam,\n  setSelectedExamQuestion,\n  loadCourses,\n  setSelectedPeriod,\n  setExamQuestionAnswer,\n  loadQuestionTypes,\n  RequestUserExamDetails,\n  PushPopupAlert,\n  CleanCandidateExam,\n  SubmitExamQuestionAnswer,\n  GetUserExamDetails,\n  BackToExamination,\n  setExamStatus,\n  FC_SaveEvent,\n  FC_AddRules,\n  CleanCandidateExamAnswers,\n  loadCandidateExamFromSupervisor,\n  requestUserAnswers,\n  FC_GetProfileDetails,\n})(_DoEam);\n"],"sourceRoot":""}