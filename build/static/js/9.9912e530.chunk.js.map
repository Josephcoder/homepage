{"version":3,"sources":["components/NoResult/NoResult.tsx","components/ApplicationPeriods/ApplicationPeriods.tsx","components/Questions/QuestionItem.tsx","components/Questions/Questions.tsx","interfaces/prepare_exam.ts","containers/PrepareExam/PrepareExam.tsx"],"names":["NoResultThemes","NoResult","props","className","theme","Dark","value","undefined","component","ApplicationPeriods","type","placeholder","applicationPeriods","map","item","i","onClick","setSelectedPeriod","showPeriodFilter","is_active","application_session_name","DATE","application_start_date","application_end_date","QuestionItem","useState","editMode","setEditMode","select","callBack","question","number","status","questionTypes","find","itm","id","title","description","alert","backDrop","Themes","default","close","backDropClose","widthSizeClass","ModalSize","extraLarge","displayClose","padding","selectedQuestion","questionsList","unSelectQuestion","Questions","connect","auth","course","schoolLevels","questionBank","loadCourses","loadSchoolLevels","loadEducationCategories","setSelectedEducationCategory","setSelectedSchoolLevel","setUploadedQuestions","setSelectedCourse","loadQuestionTypes","loading","setLoading","filterQuestionType","setFilterQuestionType","filterQuestionChapter","setFilterQuestionChapter","filteredQuestions","questionType","QuestionChapter","questions","res","temp","filter","length","chapters","x","useEffect","onChange","e","target","selectedCourse","name","course_id","questionPaper","QuestionNumberFormat","PrepareExamStatus","returnQuestionNumbering","numbering","ABC","abc","I","NUMBER","EXAM_QUESTIONS_NUMBERING","key","_PrepareExam","setState","addQuestionToPaper","addExamQuestion","removeToQuestionPaper","window","confirm","selectPeriod","chooseCourse","myCourse","conf","prepareExam","selectCourse","loadQuestionBank","examQuestionsIds","ids","submitExamPreparation","a","formErr","periods","selected_period","element","msg","selected_course","state","exam_date","start_time","duration","questions_per_page","number_format","discription","termes","axios","post","API","QBank","period","application_session_id","exam_status","Created","redirectToExams","PushPopupAlert","PopupAlertTheme","success","response","data","errors","message","console","log","componentDidMount","loadApplicationPeriods","editQuestion","findTotalMarks","total","marks","addQuestionModal","this","to","course_code","course_name","parseInt","selected","AlertInterface","danger","large","selected_course_id","Component","PrepareExam","system"],"mappings":"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","file":"static/js/9.9912e530.chunk.js","sourcesContent":["import React from 'react'\nimport { RiSearchLine } from 'react-icons/ri'\n\nexport enum NoResultThemes {\n  Dark = \"Dark\",\n  Light = \"Light\",\n}\n\ninterface NoResultProps {\n  theme: NoResultThemes;\n  value: string;\n  component?: any;\n}\n\nconst NoResult = (props: NoResultProps) => {\n  return (\n    <div className={`flex flex-col py-4 justify-center items-center text-gray-500 border-2 border-white ${props.theme === NoResultThemes.Dark ? \"bg-gray-100\" : \"bg-white\"} rounded`}>\n      <RiSearchLine className=\"text-6xl text-gray-500 animate__animated animate__shakeX\" />\n      <span className=\"text-xl mb-3\">{props.value}</span>\n      {props.component !== undefined &&\n      props.component}\n    </div>\n  )\n}\n\nexport default NoResult\n","import React from 'react'\nimport { FaBusinessTime } from 'react-icons/fa';\nimport { ApplicationPeriodGet } from '../../interfaces/application';\nimport { DATE } from '../../utils/functions';\nimport Loading from '../Loading/Loading';\n\ninterface ApplicationPeriodsProps {\n  applicationPeriods: ApplicationPeriodGet[] | null;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  showPeriodFilter: (status: boolean) => void;\n}\n\nconst ApplicationPeriods = (props: ApplicationPeriodsProps) => {\n  return (\n    <div className=\"-mt-4\">\n      <input type=\"text\" className=\"input-white border -mt-2 mb-3\" placeholder=\"Search by year, name\" />\n      {props.applicationPeriods === null ? <Loading /> : props.applicationPeriods.map((item, i) => (\n        <div onClick={() => {props.setSelectedPeriod(item); props.showPeriodFilter(false)}} key={i + 1} \n          className={`flex flex-col md:flex-row items-start md:items-center md:justify-between rounded border ${item.is_active === true ? \"bg-blue-50 border-blue-100\" : \"bg-gray-50 border-gray-100 \"} hover:bg-blue-100 hover:border-blue-500 px-2 py-2 cursor-pointer mb-2`}>\n          <div className=\"flex flex-row items-center gap-3\">\n            <FaBusinessTime className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-500\"} text-4xl`} />\n            <div className=\"flex flex-col\">\n              <div className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"} font-bold`}>{item.application_session_name}</div>\n              <div className=\"text-sm text-gray-500\"><span>Status: </span><span className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"}`}>{item.is_active === true ? \"Active\" : \"Expired\"}</span></div>\n            </div>\n          </div>\n          <div className=\"flex flex-col items-start md:items-end md:justify-end\">\n            <div className=\"text-xs md:text-sm text-right text-gray-500\"><span>Start: </span><span className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"} text-right font-bold`}>{DATE(item.application_start_date, \"DD/MM/YYYY\")}</span></div>\n            <div className=\"text-xs md:text-sm text-right text-gray-500\"><span>End: </span><span className={`${item.is_active === true ? \"text-blue-600\" : \"text-gray-600\"} text-right font-bold`}>{DATE(item.application_end_date, \"DD/MM/YYYY\")}</span></div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ApplicationPeriods\n","import React, { Fragment, useState } from 'react'\nimport { CgDetailsMore } from 'react-icons/cg'\nimport { ImCheckboxChecked, ImCheckboxUnchecked } from 'react-icons/im'\nimport { IoMdTrash } from 'react-icons/io'\nimport { MdEdit } from 'react-icons/md'\nimport { questionTypesStoreInterface } from '../../actions/questionTypes'\nimport EditQuestion from '../../containers/QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion'\nimport { QuestionInterface } from '../../interfaces/question'\nimport Modal, { ModalSize, Themes } from '../Modal/Modal'\n\ninterface QuestionItemProps {\n  question: QuestionInterface;\n  callBack: (question: QuestionInterface) => void;\n  status: boolean;\n  questionTypes: questionTypesStoreInterface;\n  select: boolean;\n  number: number;\n  questionsList: QuestionInterface[];\n}\n\nconst QuestionItem = (props: QuestionItemProps) => {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const unSelectQuestion = () => {\n    setEditMode(false);\n  }\n  return (\n    <Fragment>\n      <div onClick={() => props.select === true && props.callBack(props.question)} className={`bg-gray-50 cursor-pointer rounded border border-gray-200 px-3 py-2 text-gray-700 hover:text-blue-600 flex flex-row items-center justify-between gap-4 ${props.select === true ? \"hover:bg-blue-50\" : \"hover:bg-white\"} hover:border-blue-600 mb-3`}>\n        <div className=\"flex flex-row items-center justify-between w-full\">\n          <div className=\"flex flex-row items-center gap-3\">\n            <div>\n              {props.select === false ? \n              <div className=\"font-bold text-blue-600\">\n                ({props.number})\n              </div> :\n              props.status === true ?\n              <ImCheckboxChecked className=\"text-xl text-blue-600\" /> :\n              <ImCheckboxUnchecked className=\"text-xl text-blue-600\" />}\n            </div>\n            <div className=\"flex flex-col truncate\">\n              <span className=\"text-xs text-blue-600 font-bold w-max\">{props.questionTypes.questionTypes && props.questionTypes.questionTypes.find(itm => itm.id && itm.id === props.question.type)?.title}</span>\n              <span className=\"font-bold\">{props.question.question[0].title}</span>\n              <span className=\"truncate text-xs\">{props.question.question[0].description}</span>\n            </div>\n          </div>\n          {props.select === false &&\n          <div className=\"flex flex-row items-center gap-2\">\n            <div \n            onClick={() => alert(\"Details\")} \n            className=\"bg-gray-50 hover:bg-gray-200 rounded-full px-1 py-1 cursor-pointer\">\n              <CgDetailsMore className=\"text-3xl text-gray-700\"/>\n            </div>\n            <div \n            onClick={() => setEditMode(true)} \n            className=\"bg-gray-50 hover:bg-blue-100 rounded-full px-1 py-1 cursor-pointer\">\n              <MdEdit className=\"text-3xl text-blue-700\"/>\n            </div>\n            <div \n            onClick={() => props.select === false && props.callBack(props.question)} \n            className=\"bg-gray-100 hover:bg-red-100 rounded-full px-1 py-1 cursor-pointer\">\n              <IoMdTrash className=\"text-3xl text-yellow-700\"/>\n            </div>\n          </div>}\n        </div>\n      </div>\n      {editMode === true &&\n      <Modal\n        title=\"\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => setEditMode(false)}\n        backDropClose={true}\n        widthSizeClass={ModalSize.extraLarge}\n        displayClose={false}\n        padding={{title: false,}}>\n          <div className=\"pt-0\">\n            <EditQuestion \n              selectedQuestion={props.question} \n              questionsList={props.questionsList}\n              unSelectQuestion={unSelectQuestion} \n            />\n          </div>\n      </Modal>}\n    </Fragment>\n  )\n}\n\nexport default QuestionItem\n","import React, { useEffect, useState } from 'react'\nimport Loading from '../../components/Loading/Loading'\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  setSelectedCourse,\n  loadQuestionTypes,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from '../../interfaces/course';\nimport { QuestionInterface, uploadQuestionsResponse } from '../../interfaces/question';\nimport QuestionItem from './QuestionItem';\n\ninterface UploadedQuestionsProps {\n  questionBank: QuestionBankStoreInterface;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  selectedCourse: course;\n  course: courseStoreInterface;\n  callBack: (question: QuestionInterface) => void;\n  questionTypes: questionTypesStoreInterface;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  setSelectedCourse: (course: course | null) => void;\n  questionsList: QuestionInterface[];\n  questionPaper: QuestionInterface[];\n}\n\nconst _Questions = (props: UploadedQuestionsProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filterQuestionType, setFilterQuestionType] = useState<string>(\"\");\n  const [filterQuestionChapter, setFilterQuestionChapter] = useState<string>(\"\");\n\n  const filteredQuestions = (questionType: string, QuestionChapter: string, questions: QuestionInterface[]) => {\n    let res: QuestionInterface[] = questions;\n    if (questionType !== \"\" && QuestionChapter !== \"\") {\n      let temp: QuestionInterface[] = questions.filter(itm => itm.type === questionType);\n      if (temp.length > 0) {\n        res = temp.filter(item => item.chapters.find(x => x === QuestionChapter));\n      }\n    } else if (questionType !== \"\") {\n      res = questions.filter(itm => itm.type === questionType);\n    } else if (QuestionChapter !== \"\") {\n      res = questions.filter(item => item.chapters.find(x => x === QuestionChapter));\n    }\n    return res\n  }\n\n  useEffect(() => {\n    if (props.questionTypes.questionTypes === null || props.questionTypes.questionTypes.length === 0) {\n      props.loadQuestionTypes(setLoading);\n    }\n  }, [props]);\n  return (\n    <div className=\"bg-white animate__animated animate__fadeInLeft animate__fast px-2 py-2 gap-3 mb-2 rounded\">\n      <div className=\"flex flex-row items-center mb-4 gap-2 bg-blue-100 px-2 py-2 -mx-2\">\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Type</span>\n          {props.questionTypes.questionTypes === null ? <Loading /> :\n          props.questionTypes.questionTypes.length === 0 ? <div>No Question types found!</div> :\n          <select \n          onChange={(e) => {\n            setFilterQuestionType(e.target.value);\n          }}\n          className=\"input-white border border-gray-400\">\n            <option>Choose Question type</option>\n            {props.questionTypes.questionTypes.map((item, i) => (\n              <option key={i + 1} value={item.id}>{item.title}</option>\n            ))}\n          </select>}\n        </div>\n        <div className=\"flex flex-col w-full\">\n          <span className=\"text-gray-700 text-sm font-bold\">Question Chapters</span>\n          {props.selectedCourse.chapters === undefined ? <div>Not found!</div> :\n          props.selectedCourse.chapters!.length === 0 ? <div>No Question types found!</div> :\n          <select \n          onChange={(e) => {\n            setFilterQuestionChapter(e.target.value);\n          }}\n          className=\"input-white border border-gray-400\">\n            <option>Choose Chapter</option>\n            {props.selectedCourse.chapters!.map((item, i) => (\n              <option key={i + 1} value={item.id}>{item.name}</option>\n            ))}\n          </select>}\n        </div>\n      </div>\n      {loading === true ? <Loading /> :\n      filteredQuestions(filterQuestionType, filterQuestionChapter, props.questionsList.filter(itm => itm.course === props.selectedCourse.course_id)).length === 0 ? <div>No questions uploaded!</div> :\n      filteredQuestions(filterQuestionType, filterQuestionChapter, props.questionsList.filter(itm => itm.course === props.selectedCourse.course_id)).map((item, i) => (\n        <QuestionItem \n          key={i + 1}\n          question={item}\n          callBack={props.callBack}\n          status={props.questionPaper.find(itm => itm.id === item.id) ? true : false}\n          questionTypes={props.questionTypes}\n          select={true}\n          number={i + 1} \n          questionsList={props.questionsList} />\n      ))}\n    </div>\n  )\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; questionTypes: questionTypesStoreInterface; } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, questionTypes: questionTypes, };\n};\n\nconst Questions = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  setSelectedCourse,\n  loadQuestionTypes,\n})(_Questions);\n\nexport default Questions;\n","export enum QuestionNumberFormat {\n  ABC = \"ABC\",\n  abc = \"abc\",\n  NUMBER = \"NUMBER\",\n  I = \"I\",\n}\n\nexport const returnQuestionNumbering = (numbering: QuestionNumberFormat) => {\n  switch (numbering) {\n    case QuestionNumberFormat.ABC:\n      return \"A,B,C\";\n    case QuestionNumberFormat.abc:\n      return \"a,b,c\";\n    case QuestionNumberFormat.I:\n      return \"i, ii, iii\";\n    case QuestionNumberFormat.NUMBER:\n      return \"1,2,3\";\n  }\n}\n\nexport const EXAM_QUESTIONS_NUMBERING = [\n  {\n    key: QuestionNumberFormat.NUMBER,\n    value: returnQuestionNumbering(QuestionNumberFormat.NUMBER)\n  },\n  {\n    key: QuestionNumberFormat.ABC,\n    value: returnQuestionNumbering(QuestionNumberFormat.ABC)\n  },{\n    key: QuestionNumberFormat.abc,\n    value: returnQuestionNumbering(QuestionNumberFormat.abc)\n  },{\n    key: QuestionNumberFormat.I,\n    value: returnQuestionNumbering(QuestionNumberFormat.I)\n  },\n]\n\nexport enum PrepareExamStatus {\n  Created = \"Created\",\n}\n\nexport interface prepare_exam_request {\n    period: string;\n    course: string;\n    questions: string[];\n    exam_status: PrepareExamStatus;\n    termes: string;\n    questions_per_page: number;\n    exam_date: string;\n    start_time: string;\n    duration: number;\n    number_format: QuestionNumberFormat;\n    discription: string;\n}\n\nexport interface ExamItemResponse {\n  questions: string[];\n  status: number;\n  period: string;\n  course: string;\n  exam_status: PrepareExamStatus;\n  termes: string;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: QuestionNumberFormat;\n  discription: string;\n  createdAt: string;\n  updatedAt: string;\n  id: string;\n}","import React, { Component, Fragment } from \"react\";\nimport Courses from \"../../components/Courses/Courses\";\nimport Modal, { ModalSize, Themes } from \"../../components/Modal/Modal\";\nimport { connect } from \"react-redux\";\nimport {\n  Auth, \n  courseStoreInterface,\n  loadCourses,\n  schoolLevelsStoreInterface,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  QuestionBankStoreInterface,\n  setUploadedQuestions,\n  questionTypesStoreInterface,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  PrepareExamsStoreInterface,\n  addExamQuestion,\n  applicationPeriodsStoreInterface,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  System,\n  PushPopupAlert,\n} from \"../../actions\";\nimport { StoreState } from \"../../reducers\";\nimport { course } from \"../../interfaces/course\";\nimport { QuestionInterface, uploadQuestionsResponse } from \"../../interfaces/question\";\nimport NoResult, { NoResultThemes } from \"../../components/NoResult/NoResult\";\nimport Questions from \"../../components/Questions/Questions\";\nimport Loading from \"../../components/Loading/Loading\";\nimport QuestionItem from \"../../components/Questions/QuestionItem\";\nimport { ApplicationPeriodGet } from \"../../interfaces/application\";\nimport ApplicationPeriods from \"../../components/ApplicationPeriods/ApplicationPeriods\";\nimport { RiFilePaperFill } from \"react-icons/ri\";\nimport { API } from \"../../utils/api\";\nimport axios from \"axios\";\nimport Alert, { AlertInterface } from \"../../components/Alert/Alert\";\nimport { EXAM_QUESTIONS_NUMBERING, PrepareExamStatus, QuestionNumberFormat } from \"../../interfaces/prepare_exam\";\nimport { Redirect } from \"react-router-dom\";\nimport { PopupAlertData } from \"../../components/Alert/Popup\";\nimport { PopupAlertTheme } from \"../../interfaces/popupAlert\";\nimport EditQuestion from \"../QuestionBank/AddQuestion/UploadQuestion/EditQuestion/EditQuestion\";\nimport { MdAdd } from \"react-icons/md\";\n\ninterface AppPropsProps {\n  selectedCourse: course;\n  questionBank: QuestionBankStoreInterface;\n  course: courseStoreInterface;\n  questionTypes: questionTypesStoreInterface;\n  prepareExam: PrepareExamsStoreInterface;\n  system: System;\n  setUploadingStatus: (status: boolean) => void;\n  setSelectedCourse: (coure: course | null) => void;\n  setUploadedQuestions: (questions: uploadQuestionsResponse | null) => void;\n  loadQuestionTypes: (callback: (loading: boolean) => void) => void;\n  loadQuestionBank: (course_id: string, callback: (loading: boolean) => void) => void;\n  addExamQuestion: (question: QuestionInterface) => void;\n  periods: applicationPeriodsStoreInterface;\n  loadApplicationPeriods: (callback: (loading: boolean) => void) => void;\n  setSelectedPeriod: (period: ApplicationPeriodGet) => void;\n  PushPopupAlert: (alert: PopupAlertData) => void;\n}\ninterface AppPropsState {\n  loading: boolean;\n  selectCourse: boolean;\n  selectPeriod: boolean;\n  addQuestionModal: boolean;\n  formErr: {\n    element: string;\n    msg: string;\n  } | null;\n  questions_per_page: number;\n  exam_date: string;\n  start_time: string;\n  duration: number;\n  number_format: string;\n  discription: string;\n  termes: string;\n  redirectToExams: boolean;\n  editQuestion: QuestionInterface | null;\n}\n\nclass _PrepareExam extends Component<AppPropsProps, AppPropsState> {\n  constructor(props: AppPropsProps) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      selectCourse: false,\n      selectPeriod: false,\n      addQuestionModal: false,\n      formErr: {\n        element: \"\", msg: \"\"\n      },\n      questions_per_page: 1,\n      exam_date: \"\",\n      start_time: \"\",\n      duration: 1,\n      number_format: QuestionNumberFormat.NUMBER,\n      discription: \"\",\n      termes: \"\",\n      redirectToExams: false,\n      editQuestion: null,\n    };\n  }\n  setLoading = (status: boolean) => {\n    this.setState({ loading: status });\n  }\n  addQuestionToPaper = (question: QuestionInterface) => {\n    this.props.addExamQuestion(question);\n  }\n  removeToQuestionPaper = (question: QuestionInterface) => {\n    if (window.confirm(\"Are you sure do you want to remove question to question paper?\")) {\n      this.props.addExamQuestion(question);\n    }\n  }\n  showPeriodFilter = (status: boolean) => {\n    this.setState({ selectPeriod: status })\n  }\n\n  chooseCourse = (myCourse: course | null) => {\n    let conf: boolean = false;\n    if (this.props.prepareExam.questions.length !== 0) {\n      conf = window.confirm(\"Are you sure do you want to change course? You will loose your selected questions\")\n    }\n    if (conf === true) {\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(myCourse);\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      this.props.setSelectedCourse(myCourse);\n    }\n    this.setState({ selectCourse: false });\n    if (myCourse !== null) {\n      this.props.loadQuestionBank(myCourse.course_id, this.setLoading);\n    }\n  }\n\n  examQuestionsIds = (questions: QuestionInterface[]): string[] => {\n    let ids: string[] = [];\n    for (let question of questions) {\n      ids = [...ids, question.id];\n    }\n    return ids;\n  }\n\n  submitExamPreparation = async () => {\n    this.setState({ formErr: null });\n    if (this.props.periods.selected_period === null || this.props.periods.selected_period.is_active === false) {\n      return this.setState({\n        formErr: {\n          element: \"period\",\n          msg: \"Please select valid period!\",\n        },\n        selectPeriod: true,\n      })\n    }\n    if (this.props.course.selected_course === null) {\n      return this.setState({\n        formErr: {\n          element: \"course\",\n          msg: \"Please select a course!\",\n        },\n        selectCourse: true,\n      })\n    }\n    if (this.state.exam_date === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"exam_date\",\n          msg: \"Please choose exam date\",\n        }\n      })\n    }\n    if (this.state.start_time === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"start_time\",\n          msg: \"Please fill exam start time\",\n        }\n      })\n    }\n    if (this.state.duration < 1) {\n      return this.setState({\n        formErr: {\n          element: \"duration\",\n          msg: \"Please fill exam duration\",\n        }\n      })\n    }\n    if (this.state.questions_per_page < 1) {\n      return this.setState({\n        formErr: {\n          element: \"questions_per_page\",\n          msg: \"Please fill number of questions per page\",\n        }\n      })\n    }\n    if (this.state.number_format === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"number_format\",\n          msg: \"Please fill questions numbering format\",\n        }\n      })\n    }\n    if (this.state.discription === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"discription\",\n          msg: \"Please fill exam description\",\n        }\n      })\n    }\n    if (this.props.prepareExam.questions.length === 0) {\n      return this.setState({\n        formErr: {\n          element: \"questions\",\n          msg: \"Please choose questions\",\n        }\n      })\n    }\n    if (this.state.termes === \"\") {\n      return this.setState({\n        formErr: {\n          element: \"termes\",\n          msg: \"Please fill exam terms and conditions\",\n        }\n      })\n    }\n    this.setState({ loading: true });\n    try {\n      const res = await axios.post(`${API.QBank}/exam`, {\n        period: this.props.periods.selected_period.application_session_id,\n        course: this.props.course.selected_course.course_id,\n        questions: this.examQuestionsIds(this.props.prepareExam.questions),\n        exam_status: PrepareExamStatus.Created,\n        termes: this.state.termes,\n        questions_per_page: this.state.questions_per_page,\n        exam_date: this.state.exam_date,\n        start_time: this.state.start_time,\n        duration: this.state.duration,\n        number_format: this.state.number_format,\n        discription: this.state.discription,\n      });\n      for (let x of this.props.prepareExam.questions) {\n        this.props.addExamQuestion(x);\n      }\n      this.props.setSelectedCourse(null);\n      this.setState({ redirectToExams: true });\n      this.props.PushPopupAlert({\n        title: \"Success\",\n        description: \"Exam has prepared successfully!\",\n        theme: PopupAlertTheme.success\n      })\n    } catch (error: any) {\n      if (error.response) {\n        if (error.response.data) {\n          if (error.response.data.errors !== undefined) {\n            if (error.response.data.errors.length > 0) {\n              this.setState({formErr: {element: \"main\", msg: error.response.data.errors[0].message}});\n            } else {\n              this.setState({formErr: {element: \"main\", msg: \"Failed to update Question!\"}});\n            }\n          } else {\n            this.setState({formErr: {element: \"main\", msg: \"Failed to update Question!\"}});\n          }\n        } else {\n          this.setState({formErr: {element: \"main\", msg: \"Failed to update Question!\"}});\n        }\n      }\n      console.log(\"Exam err: \", {...error})\n    }\n    this.setState({ loading: false });\n  }\n\n  componentDidMount = () => {\n    if (this.props.questionTypes.questionTypes === null || this.props.questionTypes.questionTypes.length === 0) {\n      this.props.loadQuestionTypes(this.setLoading);\n    }\n    if (this.props.periods.applicationPeriods === null || this.props.periods.applicationPeriods.length === 0) {\n      this.props.loadApplicationPeriods(this.setLoading);\n    }\n    if (this.props.course.selected_course === null) {\n      this.setState({ selectCourse: true });\n    }\n    if (this.props.course.selected_course !== null) {\n      this.props.loadQuestionBank(this.props.course.selected_course.course_id, this.setLoading);\n    }\n  }\n  unSelectQuestion = () => {\n    this.setState({ editQuestion: null });\n  }\n  findTotalMarks = (questions: QuestionInterface[]) => {\n    let total = 0;\n    for (let question of questions) {\n      total = total + question.marks;\n    }\n    return total;\n  }\n  render() {\n    if (this.state.redirectToExams === true) {\n      return <Redirect to=\"exams-list\" />\n    }\n    return (\n      <Fragment>\n      {this.state.editQuestion === null ?\n      <div>\n        <div className=\"mt-3 rounded px-2 flex flex-col gap-3 bg-white py-2\">\n          <div className=\"flex flex-row items center justify-between\">\n            <div className=\"flex flex-row items-center\">\n              {/* <RiFilePaperFill className=\"text-7xl text-blue-600\" /> */}\n              <div className=\"flex flex-col px-2\">\n                <span className=\"text-gray-800 text-3xl font-bold\">Prepare exam</span>\n                <span className=\"text-blue-600 text-sm font-bold\">Period: {this.props.periods.selected_period === null ? <span className=\"text-yellow-700 italic\">Not selected!</span> : (`${this.props.periods.selected_period.application_session_name} - ${this.props.periods.selected_period.is_active === true ? \"Active\" : \"Not valid!\"}`)}</span>\n                <span className=\"text-gray-600 text-sm font-bold underline mb-2\">Course: {this.props.course.selected_course === null ? <span className=\"text-yellow-700 italic\">Not selected!</span> : (`${this.props.course.selected_course.course_code} - ${this.props.course.selected_course.course_name}`)}</span>\n              </div>\n            </div>\n            <div className=\"flex flex-row items-center gap-2\">\n              <div onClick={() => this.setState({ selectCourse: true })} className={`btn ${this.props.course.selected_course === null ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\" : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"} h-max flex items-center justify-center h-10 cursor-pointer`}>{this.props.course.selected_course === null ? \"Choose course\" : \"Change course\"}</div>\n              <div onClick={() => this.setState({ selectPeriod: true })} className={`btn ${this.props.periods.selected_period === null ? \"bg-yellow-50 hover:bg-yellow-100 border border-yellow-600 text-yellow-600\" : \"bg-white hover:bg-blue-100 border border-blue-600 text-blue-600\"} h-max flex items-center justify-center h-10 cursor-pointer`}>{this.props.periods.selected_period === null ? \"Choose period\" : \"Change Period\"}</div>\n            </div>\n          </div>\n        </div>\n        {this.state.loading === true ? \n        <div className=\"px-4 py-6 mt-4 bg-white rounded\">\n          <div className=\"text-gray-600 mb-3 px-4\">Performing action, Please wait...</div>\n          <Loading /> \n        </div>:\n        <div className=\"rounded bg-white px-3 py-3 mt-2 mb-28\">\n          <div className=\"grid md:grid-cols-12 gap-4\">\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam date</span>\n              <input \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  exam_date: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.exam_date}\n              type=\"date\" className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"exam_date\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"exam_date\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam start time</span>\n              <input \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  start_time: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.start_time}\n              type=\"time\" className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"start_time\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"start_time\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam duration</span>\n              <input \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  duration: parseInt(e.target.value),\n                  formErr: null,\n                })\n              }}\n              value={this.state.duration}\n              type=\"number\" className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"duration\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"duration\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Number of questions per page</span>\n              <input \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                this.setState({\n                  questions_per_page: parseInt(e.target.value),\n                  formErr: null,\n                })\n              }}\n              value={this.state.questions_per_page}\n              type=\"number\" className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"questions_per_page\" ? \"border-2 border-red-600\" : \"border\"}`} />\n              {this.state.formErr !== null && this.state.formErr.element === \"questions_per_page\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Questions number format: {this.state.number_format}</span>\n              <select\n                onChange={(e) => {\n                  this.setState({\n                    number_format: e.target.value,\n                    formErr: null,\n                  })\n                }}\n                className={`input-white h-10 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"number_format\" ? \"border-2 border-red-600\" : \"border\"}`}>\n                <option value=\"\">Select Numbering format</option>\n                {EXAM_QUESTIONS_NUMBERING.map((item, i) => (\n                  <option selected={item.key === this.state.number_format ? true : false} key={i + 1} value={item.key}>{item.value}</option>\n                ))}\n              </select>\n              {this.state.formErr !== null && this.state.formErr.element === \"number_format\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-6 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam description</span>\n              <textarea\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  discription: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.discription}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"discription\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea>\n              {this.state.formErr !== null && this.state.formErr.element === \"discription\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n            <div className=\"md:col-span-12 flex flex-col\">\n              <span className=\"text-gray-700 font-semibold\">Exam terms and conditions</span>\n              <textarea \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                this.setState({\n                  termes: e.target.value,\n                  formErr: null,\n                })\n              }}\n              value={this.state.termes}\n              className={`input-white min-h-8 border-gray-400 ${this.state.formErr !== null && this.state.formErr.element === \"termes\" ? \"border-2 border-red-600\" : \"border\"}`}></textarea>\n              {this.state.formErr !== null && this.state.formErr.element === \"termes\" && <div className=\"text-red-600 text-xs font-bold italic\">{this.state.formErr.msg}</div>}\n            </div>\n          </div>\n          <div className=\"border rounded px-2 py-2 mt-4\">\n            <div className=\"flex flex-row items-center justify-between\">\n              <span className=\"font-bold text-blue-600 text-lg\">Question paper</span>\n              <div className=\"flex flex-row gap-2\">\n                <span className=\"rounded-full bg-yellow-50 text-yellow-800 font-bold px-4 py-2 text-sm underline h-max\">Total marks: {this.findTotalMarks(this.props.prepareExam.questions)}</span>\n                <div onClick={() => this.props.course.selected_course === null ? this.setState({ selectCourse: true }) : this.setState({ addQuestionModal: true })} className=\"btn bg-blue-50 text-blue-600 hover:bg-blue-100 cursor-pointer flex flex-row items-center\"><MdAdd className=\"text-2xl\" /> Add question</div>\n              </div>\n            </div>\n            <div className=\"flex flex-col mt-2\">\n              {this.props.prepareExam.questions.length === 0 ?\n              <div className={`${this.state.formErr !== null && this.state.formErr.element === \"questions\" ? \"bg-red-50 border-2 border-red-600 text-red-600\" : \"bg-gray-100\"} rounded mt-2`}>\n                <NoResult theme={NoResultThemes.Dark} value={\"No questions added so far!\"} />\n              </div> :\n              this.props.questionTypes && this.props.prepareExam.questions.map((item, i) => (\n                <QuestionItem \n                key={i + 1} \n                question={item} \n                callBack={this.removeToQuestionPaper} \n                status={true} \n                questionTypes={this.props.questionTypes}\n                select={false}\n                number={i + 1}\n                questionsList={this.props.prepareExam.questions} />\n              ))}\n            </div>\n          </div>\n          <div className=\"my-4\" onClick={() => this.setState({ formErr: null })}>\n            {this.state.formErr !== null && this.state.formErr.element !== \"\" && \n              <Alert title={\"Missing info\"} description={this.state.formErr.msg} theme={AlertInterface.danger} />\n            }\n          </div>\n          <div className=\"flex flex-row items-center justify-between mt-4\">\n            <div className=\"btn border\">Cancel</div>\n            <div className=\"flex flex-row items-center\">\n              <div onClick={() => this.submitExamPreparation()} className=\"btn bg-blue-600 text-white cursor-pointer\">Submit exam</div>\n            </div>\n          </div>\n        </div>}\n      </div> :\n      this.props.questionBank.questions === null ? <Loading /> :\n      this.props.questionBank.questions.length === 0 ? <div>No Questions available!</div> :\n      <EditQuestion \n        selectedQuestion={this.state.editQuestion} \n        questionsList={this.props.questionBank.questions}\n        unSelectQuestion={this.unSelectQuestion} \n      />}\n      {this.state.selectCourse === true &&\n      <Modal\n        title=\"\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ selectCourse: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n        <div className=\"-mt-6\">\n          <Courses setSelectedCourse={this.chooseCourse} selected_course_id={this.props.course.selected_course && this.props.course.selected_course.course_id} />\n        </div>\n      </Modal>}\n      {this.state.addQuestionModal === true &&\n      <Modal\n        title=\"Add exam questions\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ addQuestionModal: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n        {this.props.course.selected_course === null ? <div>Please choose a course</div> :\n        this.props.questionBank.questions === null ? <Loading /> :\n        <Questions \n        selectedCourse={this.props.course.selected_course} \n        callBack={this.addQuestionToPaper} \n        questionsList={this.props.questionBank.questions}\n        questionPaper={this.props.prepareExam.questions} />}\n      </Modal>}\n      {this.state.selectPeriod === true &&\n      <Modal\n        title=\"Choose a period\"\n        backDrop={true}\n        theme={Themes.default}\n        close={() => this.setState({ selectPeriod: false })}\n        backDropClose={true}\n        widthSizeClass={ModalSize.large}\n        displayClose={true}\n        padding={{title: true,}}>\n          <div className=\"px-2\">\n            <ApplicationPeriods \n            applicationPeriods={this.props.periods.applicationPeriods} \n            setSelectedPeriod={this.props.setSelectedPeriod} \n            showPeriodFilter={this.showPeriodFilter} />\n          </div>\n      </Modal>}\n      </Fragment>\n    );\n  }\n}\n\n\nconst mapStateToProps = ({\n  auth,\n  course,\n  schoolLevels,\n  questionBank,\n  questionTypes,\n  prepareExam,\n  periods,\n  system,\n}: StoreState): { auth: Auth; course: courseStoreInterface; schoolLevels: schoolLevelsStoreInterface; questionBank: QuestionBankStoreInterface; questionTypes: questionTypesStoreInterface; prepareExam: PrepareExamsStoreInterface; periods: applicationPeriodsStoreInterface; system: System } => {\n  return { auth: auth, course: course, schoolLevels: schoolLevels, questionBank: questionBank, questionTypes: questionTypes, prepareExam: prepareExam, periods: periods, system: system };\n};\n\nexport const PrepareExam = connect(mapStateToProps, {\n  loadCourses,\n  loadSchoolLevels,\n  loadEducationCategories,\n  setSelectedEducationCategory,\n  setSelectedSchoolLevel,\n  setUploadedQuestions,\n  loadQuestionTypes,\n  loadQuestionBank,\n  setSelectedCourse,\n  addExamQuestion,\n  loadApplicationPeriods,\n  setSelectedPeriod,\n  PushPopupAlert,\n})(_PrepareExam);\n"],"sourceRoot":""}